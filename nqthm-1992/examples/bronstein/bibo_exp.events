#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)

;;;                          bibo_exp.bm
;;;
;;; Experiments with type conversions, standard commutative squares, to
;;; get a feel for these issues.  Some of these theorems may turn out
;;; useful in the future, in which case they should end up in Brain,
;;; probably in th_types.
;;;
;;; Clearly, no sugar involved.
;;;
;;; Name convention: "isa" means "is almost", i.e. up to type conversion.

; (setq bibo_exp '(

; comb_bor.bm: Binary Or combinational element
; U7-DONE

(defn bor (u v)
  (if (and (equal u 0) (equal v 0))
      0
      1))
	   
; Everything below generated by: (bmcomb 'bor '() '(x y))

(DEFN S-BOR (X Y)
      (IF (EMPTY X) (E) (A (S-BOR (P X) (P Y)) (BOR (L X) (L Y)))))

;; A2-Begin-S-BOR

(PROVE-LEMMA A2-EMPTY-S-BOR (REWRITE)
    (EQUAL (EMPTY (S-BOR X Y)) (EMPTY X)) ((DISABLE BOR)))

(PROVE-LEMMA A2-E-S-BOR (REWRITE)
    (EQUAL (EQUAL (S-BOR X Y) (E)) (EMPTY X))
    ((DISABLE S-BOR A2-EMPTY-S-BOR) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-BOR))))

(PROVE-LEMMA A2-LP-S-BOR (REWRITE) (EQUAL (LEN (S-BOR X Y)) (LEN X))
    ((DISABLE BOR) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-BOR (REWRITE) (EQLEN (S-BOR X Y) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-BOR)))

(PROVE-LEMMA A2-IC-S-BOR (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (S-BOR (I C_X X) (I C_Y Y))
                    (I (BOR C_X C_Y) (S-BOR X Y))))
    ((ENABLE I LEN) (DISABLE STR-A-I BOR)))

(PROVE-LEMMA A2-LC-S-BOR (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-BOR X Y)) (BOR (L X) (L Y))))
    ((DISABLE BOR) (EXPAND (S-BOR X Y))))

(PROVE-LEMMA A2-PC-S-BOR (REWRITE)
    (EQUAL (P (S-BOR X Y)) (S-BOR (P X) (P Y))) ((DISABLE BOR)))

(PROVE-LEMMA A2-HC-S-BOR (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X)) (EQUAL (LEN X) (LEN Y)))
             (EQUAL (H (S-BOR X Y)) (BOR (H X) (H Y))))
    ((DISABLE BOR S-BOR) (ENABLE H LEN) (INDUCT (S-BOR X Y))))

(PROVE-LEMMA A2-BC-S-BOR (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (B (S-BOR X Y)) (S-BOR (B X) (B Y))))
    ((DISABLE BOR) (ENABLE B LEN) (INDUCT (S-BOR X Y))))

(PROVE-LEMMA A2-BNC-S-BOR (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (BN N (S-BOR X Y)) (S-BOR (BN N X) (BN N Y))))
    ((DISABLE BOR S-BOR)))

;; A2-End-S-BOR

; eof:comb_bor.bm


; BOR-ISA-OR is trivially proved (straight rewrites) and useless because
; it refers to non-recursive head: bibo ; and in fact it does not trigger
; in the next theorem.

(prove-lemma bor-isa-or (rewrite)
(equal (bibo (bor (bobi u) (bobi v)))
       (or u v))
)

; SBOR-ISA-SOR requires induction, and difficulty depends on hypothesis:
;   - when no eqlen hyp is given, requires 16 cases, and non-trivial rewriting
;     for the non-eqlen cases. Time: 41s
;   - with: (equal (len x) (len y)), reduces to 5 cases and 7s, same induction.
;   - with: (eqlen x y), gets better induction scheme, 4 cases and 8s.
; of course, we keep the theorem in its most general form.

(prove-lemma sbor-isa-sor (rewrite)
(equal (s-bibo (s-bor (s-bobi x) (s-bobi y)))
       (s-or x y))
)

; some trivial type-checking experiments:

(prove-lemma bor-0 ()
(implies (bitp v)   ; necessary of course.
	 (equal (bor 0 v)
		v)
	 )
)

; eof: bibo_exp.bm
;))

