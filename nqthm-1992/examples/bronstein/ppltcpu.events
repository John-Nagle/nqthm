#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)
; ppltcpu.bm is our 1st pipelined CPU (on our way to SRC CPU):
;
; it's totally trivial and unrealistic: no jumps, and current values in
; (visible) register(s) can't be USED in instructions!  (i.e. NO LOOPS).
; 

;;; (Sugared) Circuits:
#|
(setq sy-A '(SY-A (x)
(Ypc R 0 Ypcn)
(Ypcn S inc Ypc)
(Ypr S Up Ypc)
(Yi S Ui Ypr)
(Ye S Ue Yi)
(Yout R 0 Ye)
; and the cork for Ye:
(Yec1 R (UE (UI 0)) Ye)
(Yec R (UE 0) Yec1)
))

(setq sy-B '(SY-B (x)
(Ypc R 0 Ypcn)
(Ypcn S inc Ypc)
(Ypr S Up Ypc)
(Ypr2 R 0 Ypr)
(Yi S Ui Ypr2)
(Yi2 R 0 Yi)
(Ye S Ue Yi2)
(Yout R 0 Ye)
))

(setq ppltcpu '( |#
; BM DEFINITIONS and A2 LEMMAS, generated by BMSYSD:
; comb_inc.bm: INCrement combinational element
; U7-DONE

(defn Inc (u) (add1 u))

; Everything below generated by: (bmcomb 'inc '() '(x))

(DEFN S-INC (X) (IF (EMPTY X) (E) (A (S-INC (P X)) (INC (L X)))))

;; A2-Begin-S-INC

(PROVE-LEMMA A2-EMPTY-S-INC (REWRITE)
    (EQUAL (EMPTY (S-INC X)) (EMPTY X)) ((DISABLE INC)))

(PROVE-LEMMA A2-E-S-INC (REWRITE)
    (EQUAL (EQUAL (S-INC X) (E)) (EMPTY X))
    ((DISABLE S-INC A2-EMPTY-S-INC) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-INC))))

(PROVE-LEMMA A2-LP-S-INC (REWRITE) (EQUAL (LEN (S-INC X)) (LEN X))
    ((DISABLE INC) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-INC (REWRITE) (EQLEN (S-INC X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-INC)))

(PROVE-LEMMA A2-IC-S-INC (REWRITE)
    (EQUAL (S-INC (I C_X X)) (I (INC C_X) (S-INC X)))
    ((ENABLE I) (DISABLE STR-A-I INC)))

(PROVE-LEMMA A2-LC-S-INC (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-INC X)) (INC (L X))))
    ((DISABLE INC) (EXPAND (S-INC X))))

(PROVE-LEMMA A2-PC-S-INC (REWRITE) (EQUAL (P (S-INC X)) (S-INC (P X)))
    ((DISABLE INC)))

(PROVE-LEMMA A2-HC-S-INC (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-INC X)) (INC (H X))))
    ((DISABLE INC S-INC) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-INC (REWRITE) (EQUAL (B (S-INC X)) (S-INC (B X)))
    ((DISABLE INC) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-INC (REWRITE)
    (EQUAL (BN N (S-INC X)) (S-INC (BN N X))) ((DISABLE INC S-INC)))

;; A2-End-S-INC

; eof:comb_inc.bm

; comb_up.bm: Up combinational element (= fun1)
; U7-DONE

; arbitrary Char-Fun of arity 1:
(dcl Up (u))

; Everything below generated by: (bmcomb 'Up '() '(x))

(DEFN S-UP (X) (IF (EMPTY X) (E) (A (S-UP (P X)) (UP (L X)))))

;; A2-Begin-S-UP

(PROVE-LEMMA A2-EMPTY-S-UP (REWRITE) (EQUAL (EMPTY (S-UP X)) (EMPTY X))
    ((DISABLE UP)))

(PROVE-LEMMA A2-E-S-UP (REWRITE) (EQUAL (EQUAL (S-UP X) (E)) (EMPTY X))
    ((DISABLE S-UP A2-EMPTY-S-UP) (ENABLE EMPTY) (USE (A2-EMPTY-S-UP))))

(PROVE-LEMMA A2-LP-S-UP (REWRITE) (EQUAL (LEN (S-UP X)) (LEN X))
    ((DISABLE UP) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-UP (REWRITE) (EQLEN (S-UP X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-UP)))

(PROVE-LEMMA A2-IC-S-UP (REWRITE)
    (EQUAL (S-UP (I C_X X)) (I (UP C_X) (S-UP X)))
    ((ENABLE I) (DISABLE STR-A-I UP)))

(PROVE-LEMMA A2-LC-S-UP (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-UP X)) (UP (L X))))
    ((DISABLE UP) (EXPAND (S-UP X))))

(PROVE-LEMMA A2-PC-S-UP (REWRITE) (EQUAL (P (S-UP X)) (S-UP (P X)))
    ((DISABLE UP)))

(PROVE-LEMMA A2-HC-S-UP (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-UP X)) (UP (H X))))
    ((DISABLE UP S-UP) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-UP (REWRITE) (EQUAL (B (S-UP X)) (S-UP (B X)))
    ((DISABLE UP) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-UP (REWRITE)
    (EQUAL (BN N (S-UP X)) (S-UP (BN N X))) ((DISABLE UP S-UP)))

;; A2-End-S-UP

; eof:comb_up.bm

; comb_ui.bm: Ui combinational element (= fun1)
; U7-DONE

; arbitrary Char-Fun of arity 1:
(dcl Ui (u))

; Everything below generated by: (bmcomb 'Ui '() '(x))

(DEFN S-UI (X) (IF (EMPTY X) (E) (A (S-UI (P X)) (UI (L X)))))

;; A2-Begin-S-UI

(PROVE-LEMMA A2-EMPTY-S-UI (REWRITE) (EQUAL (EMPTY (S-UI X)) (EMPTY X))
    ((DISABLE UI)))

(PROVE-LEMMA A2-E-S-UI (REWRITE) (EQUAL (EQUAL (S-UI X) (E)) (EMPTY X))
    ((DISABLE S-UI A2-EMPTY-S-UI) (ENABLE EMPTY) (USE (A2-EMPTY-S-UI))))

(PROVE-LEMMA A2-LP-S-UI (REWRITE) (EQUAL (LEN (S-UI X)) (LEN X))
    ((DISABLE UI) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-UI (REWRITE) (EQLEN (S-UI X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-UI)))

(PROVE-LEMMA A2-IC-S-UI (REWRITE)
    (EQUAL (S-UI (I C_X X)) (I (UI C_X) (S-UI X)))
    ((ENABLE I) (DISABLE STR-A-I UI)))

(PROVE-LEMMA A2-LC-S-UI (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-UI X)) (UI (L X))))
    ((DISABLE UI) (EXPAND (S-UI X))))

(PROVE-LEMMA A2-PC-S-UI (REWRITE) (EQUAL (P (S-UI X)) (S-UI (P X)))
    ((DISABLE UI)))

(PROVE-LEMMA A2-HC-S-UI (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-UI X)) (UI (H X))))
    ((DISABLE UI S-UI) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-UI (REWRITE) (EQUAL (B (S-UI X)) (S-UI (B X)))
    ((DISABLE UI) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-UI (REWRITE)
    (EQUAL (BN N (S-UI X)) (S-UI (BN N X))) ((DISABLE UI S-UI)))

;; A2-End-S-UI

; eof:comb_ui.bm

; comb_ue.bm: Ue combinational element (= fun1)
; U7-DONE

; arbitrary Char-Fun of arity 1:
(dcl Ue (u))

; Everything below generated by: (bmcomb 'Ue '() '(x))

(DEFN S-UE (X) (IF (EMPTY X) (E) (A (S-UE (P X)) (UE (L X)))))

;; A2-Begin-S-UE

(PROVE-LEMMA A2-EMPTY-S-UE (REWRITE) (EQUAL (EMPTY (S-UE X)) (EMPTY X))
    ((DISABLE UE)))

(PROVE-LEMMA A2-E-S-UE (REWRITE) (EQUAL (EQUAL (S-UE X) (E)) (EMPTY X))
    ((DISABLE S-UE A2-EMPTY-S-UE) (ENABLE EMPTY) (USE (A2-EMPTY-S-UE))))

(PROVE-LEMMA A2-LP-S-UE (REWRITE) (EQUAL (LEN (S-UE X)) (LEN X))
    ((DISABLE UE) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-UE (REWRITE) (EQLEN (S-UE X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-UE)))

(PROVE-LEMMA A2-IC-S-UE (REWRITE)
    (EQUAL (S-UE (I C_X X)) (I (UE C_X) (S-UE X)))
    ((ENABLE I) (DISABLE STR-A-I UE)))

(PROVE-LEMMA A2-LC-S-UE (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-UE X)) (UE (L X))))
    ((DISABLE UE) (EXPAND (S-UE X))))

(PROVE-LEMMA A2-PC-S-UE (REWRITE) (EQUAL (P (S-UE X)) (S-UE (P X)))
    ((DISABLE UE)))

(PROVE-LEMMA A2-HC-S-UE (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-UE X)) (UE (H X))))
    ((DISABLE UE S-UE) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-UE (REWRITE) (EQUAL (B (S-UE X)) (S-UE (B X)))
    ((DISABLE UE) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-UE (REWRITE)
    (EQUAL (BN N (S-UE X)) (S-UE (BN N X))) ((DISABLE UE S-UE)))

;; A2-End-S-UE

; eof:comb_ue.bm



(DEFN TOPOR-SY-A (LN) 
(IF (EQUAL LN 'YPC) 0 
(IF (EQUAL LN 'YPCN) 1 
(IF (EQUAL LN 'YPR) 1 
(IF (EQUAL LN 'YI) 2 
(IF (EQUAL LN 'YE) 3 
(IF (EQUAL LN 'YOUT) 0 
(IF (EQUAL LN 'YEC1) 0 
(IF (EQUAL LN 'YEC) 0 
0)))))))))

(DEFN SY-A (LN X) 
(IF (EQUAL LN 'YPC) (IF (EMPTY X) (E) (I 0 (SY-A 'YPCN (P X)))) 
(IF (EQUAL LN 'YPCN) (S-INC (SY-A 'YPC X)) 
(IF (EQUAL LN 'YPR) (S-UP (SY-A 'YPC X)) 
(IF (EQUAL LN 'YI) (S-UI (SY-A 'YPR X)) 
(IF (EQUAL LN 'YE) (S-UE (SY-A 'YI X)) 
(IF (EQUAL LN 'YOUT) (IF (EMPTY X) (E) (I 0 (SY-A 'YE (P X)))) 
(IF (EQUAL LN 'YEC1) (IF (EMPTY X) (E)
                         (I (UE (UI 0)) (SY-A 'YE (P X)))) 
(IF (EQUAL LN 'YEC) (IF (EMPTY X) (E) (I (UE 0) (SY-A 'YEC1 (P X)))) 
(SFIX X)))))))))
((LEX2 (LIST (COUNT X) (TOPOR-SY-A LN)))) )

;; A2-Begin-SY-A

(PROVE-LEMMA A2-EMPTY-SY-A (REWRITE)
    (EQUAL (EMPTY (SY-A LN X)) (EMPTY X))
    ((DISABLE S-INC S-UP S-UI S-UE)))

(PROVE-LEMMA A2-E-SY-A (REWRITE)
    (EQUAL (EQUAL (SY-A LN X) (E)) (EMPTY X))
    ((DISABLE SY-A A2-EMPTY-SY-A) (ENABLE EMPTY) (USE (A2-EMPTY-SY-A))))

(PROVE-LEMMA A2-LP-SY-A (REWRITE) (EQUAL (LEN (SY-A LN X)) (LEN X))
    ((DISABLE LEN S-INC S-UP S-UI S-UE) (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-A (REWRITE) (EQLEN (SY-A LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-A)))

(PROVE-LEMMA A2-PC-SY-A (REWRITE)
    (EQUAL (P (SY-A LN X)) (SY-A LN (P X)))
    ((DISABLE S-INC S-UP S-UI S-UE A2-IC-S-INC A2-IC-S-UP A2-IC-S-UI
              A2-IC-S-UE)))

;; A2-End-SY-A

(DEFN TOPOR-SY-B (LN) 
(IF (EQUAL LN 'YPC) 0 
(IF (EQUAL LN 'YPCN) 1 
(IF (EQUAL LN 'YPR) 1 
(IF (EQUAL LN 'YPR2) 0 
(IF (EQUAL LN 'YI) 1 
(IF (EQUAL LN 'YI2) 0 
(IF (EQUAL LN 'YE) 1 
(IF (EQUAL LN 'YOUT) 0 
0)))))))))

(DEFN SY-B (LN X) 
(IF (EQUAL LN 'YPC) (IF (EMPTY X) (E) (I 0 (SY-B 'YPCN (P X)))) 
(IF (EQUAL LN 'YPCN) (S-INC (SY-B 'YPC X)) 
(IF (EQUAL LN 'YPR) (S-UP (SY-B 'YPC X)) 
(IF (EQUAL LN 'YPR2) (IF (EMPTY X) (E) (I 0 (SY-B 'YPR (P X)))) 
(IF (EQUAL LN 'YI) (S-UI (SY-B 'YPR2 X)) 
(IF (EQUAL LN 'YI2) (IF (EMPTY X) (E) (I 0 (SY-B 'YI (P X)))) 
(IF (EQUAL LN 'YE) (S-UE (SY-B 'YI2 X)) 
(IF (EQUAL LN 'YOUT) (IF (EMPTY X) (E) (I 0 (SY-B 'YE (P X)))) 
(SFIX X)))))))))
((LEX2 (LIST (COUNT X) (TOPOR-SY-B LN)))) )

;; A2-Begin-SY-B

(PROVE-LEMMA A2-EMPTY-SY-B (REWRITE)
    (EQUAL (EMPTY (SY-B LN X)) (EMPTY X))
    ((DISABLE S-INC S-UP S-UI S-UE)))

(PROVE-LEMMA A2-E-SY-B (REWRITE)
    (EQUAL (EQUAL (SY-B LN X) (E)) (EMPTY X))
    ((DISABLE SY-B A2-EMPTY-SY-B) (ENABLE EMPTY) (USE (A2-EMPTY-SY-B))))

(PROVE-LEMMA A2-LP-SY-B (REWRITE) (EQUAL (LEN (SY-B LN X)) (LEN X))
    ((DISABLE LEN S-INC S-UP S-UI S-UE) (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-B (REWRITE) (EQLEN (SY-B LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-B)))

(PROVE-LEMMA A2-PC-SY-B (REWRITE)
    (EQUAL (P (SY-B LN X)) (SY-B LN (P X)))
    ((DISABLE S-INC S-UP S-UI S-UE A2-IC-S-INC A2-IC-S-UP A2-IC-S-UI
              A2-IC-S-UE)))

;; A2-End-SY-B

; SOME ANIMATION:
; (setq x5T (A (A (A (A (A (e) T) T) T) T) T))
;*(sy-A 'Yout x5t)
; (A (A (A (A (A (E) 0)
;	     '(UE (UI (UP 0))))
;          '(UE (UI (UP 1))))
;       '(UE (UI (UP 2))))
;    '(UE (UI (UP 3))))
;*(sy-A 'Ye x5t)
; (A (A (A (A (A (E) '(UE (UI (UP 0))))
;             '(UE (UI (UP 1))))
;          '(UE (UI (UP 2))))
;       '(UE (UI (UP 3))))
;    '(UE (UI (UP 4))))
;*(sy-B 'Yout x5t)
; (A (A (A (A (A (E) 0)
;	     '(UE 0))
;	  '(UE (UI 0)))
;       '(UE (UI (UP 0))))
;    '(UE (UI (UP 1))))
;*(sy-B 'Ye x5t)
; (A (A (A (A (A (E) '(UE 0))
;	     '(UE (UI 0)))
;          '(UE (UI (UP 0))))
;       '(UE (UI (UP 1))))
;    '(UE (UI (UP 2))))
;*
; THIS SHOWS that Yout is not PPL but YE is. Proof of PPL YE w/ cork:
; (UE 0) (UE (UI 0))
; NOTE: I should really find a way to prove such a thing without going
; back to the circuit and altering def... (w/ DECORK & CORK?)

; This takes care of the PC loop:

(prove-lemma EQ-PC (rewrite)
(equal (sy-b 'Ypc x)
       (sy-a 'Ypc x))
((induct (induct-P x)))
)

(prove-lemma EQ-A-B ()
(equal (sy-b 'Ye x)
       (sy-a 'Yec x))
((expand (sy-b 'Ye x)
	 (sy-a 'Yec x)
	 (SY-B 'YI2 X)
	 (SY-A 'YEC1 (P X))
	 (SY-B 'YI (P X))
	 (SY-A 'YE (P (P X)))
	 (SY-B 'YPR2 (P X))
	 (SY-A 'YI (P (P X)))
	 (SY-B 'YPR (P (P X)))
	 (SY-A 'YPR (P (P X)))
	 )
 )
)

; EQ-A-B2: this phrasing REMOVES the need for fiddling with the circuit:
; i.e. has the cork explicitely in thm.

(prove-lemma EQ-A-B2 ()
(equal (sy-b 'Ye x)
       (if (empty x) (e) (I (UE 0)
       (if (empty (P x)) (e) (I (UE (UI 0))
				(sy-a 'Ye (P (P x)))
				))))
       )
((expand (sy-b 'Ye x)
	 (SY-B 'YI2 X)
	 (SY-B 'YI (P X))
	 (SY-A 'YE (P (P X)))
	 (SY-B 'YPR2 (P X))
	 (SY-A 'YI (P (P X)))
	 (SY-B 'YPR (P (P X)))
	 (SY-A 'YPR (P (P X)))
	 )
 )
)

; EQ-A-B3: this is a weaker but more legible version of the explicitely
; corked thm.

(prove-lemma EQ-A-B3 ()
(implies (not (empty (P x)))
	 (equal (sy-b 'Ye x)
		(I (UE 0)
		   (I (UE (UI 0))
		      (sy-a 'Ye (P (P x)))
		      ))
		))
((expand (sy-b 'Ye x)
	 (SY-B 'YI2 X)
	 (SY-B 'YI (P X))
	 (SY-A 'YE (P (P X)))
	 (SY-B 'YPR2 (P X))
	 (SY-A 'YI (P (P X)))
	 (SY-B 'YPR (P (P X)))
	 (SY-A 'YPR (P (P X)))
	 )
 )
)

; Leaving the circuit alone AND WITHOUT EXPLICITING the cork, we get:

(prove-lemma EQ-A-B4 ()
(implies (not (empty (P x)))
	 (equal (B (B (sy-b 'Ye x)))
		(sy-a 'Ye (P (P x)))
		))
((expand (sy-b 'Ye x)
	 (SY-B 'YI2 X)
	 (SY-B 'YI (P X))
	 (SY-A 'YE (P (P X)))
	 (SY-B 'YPR2 (P X))
	 (SY-A 'YI (P (P X)))
	 (SY-B 'YPR (P (P X)))
	 (SY-A 'YPR (P (P X)))
	 )
 )
)
; eof: ppltcpu.bm
;))
