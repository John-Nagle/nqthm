#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)

; corr_CIXA00.bm
;   . definition of circuits:
;	w/ stringadd: OK
;	w/ stringins: 
;   . proof of equivalence:
;	w/ stringadd: OK! get: LP theorems, IC theorems, and then Rewrite!
;	w/ stringins:
; NOTE: one of the original experiments, NOT sugar generated. 

;;; DEFINITION OF CIRCUITS:

; Register: NOT NEEDED in expanded version
;(defn R (u x)
;  (if (empty x) (e) (I u (p x))))

; combinationals (defs & thms) needed for circuits:
; comb_del.bm: Delta combinational element, parametrized.
; U7-DONE

(defn del (val u)
  (if (equal val u) 1 0))

; Everything below generated by SUGAR with:    (bmcomb 'del '(val) '(x))

(DEFN S-DEL (VAL X)
      (IF (EMPTY X) (E) (A (S-DEL VAL (P X)) (DEL VAL (L X)))))

;; A2-Begin-S-DEL

(PROVE-LEMMA A2-EMPTY-S-DEL (REWRITE)
    (EQUAL (EMPTY (S-DEL VAL X)) (EMPTY X)) ((DISABLE DEL)))

(PROVE-LEMMA A2-E-S-DEL (REWRITE)
    (EQUAL (EQUAL (S-DEL VAL X) (E)) (EMPTY X))
    ((DISABLE S-DEL A2-EMPTY-S-DEL) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-DEL))))

(PROVE-LEMMA A2-LP-S-DEL (REWRITE) (EQUAL (LEN (S-DEL VAL X)) (LEN X))
    ((DISABLE DEL) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-DEL (REWRITE) (EQLEN (S-DEL VAL X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-DEL)))

(PROVE-LEMMA A2-IC-S-DEL (REWRITE)
    (EQUAL (S-DEL VAL (I C_X X)) (I (DEL VAL C_X) (S-DEL VAL X)))
    ((ENABLE I) (DISABLE STR-A-I DEL)))

(PROVE-LEMMA A2-LC-S-DEL (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-DEL VAL X)) (DEL VAL (L X))))
    ((DISABLE DEL) (EXPAND (S-DEL VAL X))))

(PROVE-LEMMA A2-PC-S-DEL (REWRITE)
    (EQUAL (P (S-DEL VAL X)) (S-DEL VAL (P X))) ((DISABLE DEL)))

(PROVE-LEMMA A2-HC-S-DEL (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-DEL VAL X)) (DEL VAL (H X))))
    ((DISABLE DEL S-DEL) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-DEL (REWRITE)
    (EQUAL (B (S-DEL VAL X)) (S-DEL VAL (B X)))
    ((DISABLE DEL) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-DEL (REWRITE)
    (EQUAL (BN N (S-DEL VAL X)) (S-DEL VAL (BN N X)))
    ((DISABLE DEL S-DEL)))

;; A2-End-S-DEL

; eof:comb_del.bm


; comb_plus.bm: Plus combinational element.
; U7-DONE

;   no character function definition since BM already knows about Plus..

; Everything below generated by:     (bmcomb 'plus '() '(x y))

(DEFN S-PLUS (X Y)
      (IF (EMPTY X) (E) (A (S-PLUS (P X) (P Y)) (PLUS (L X) (L Y)))))

;; A2-Begin-S-PLUS

(PROVE-LEMMA A2-EMPTY-S-PLUS (REWRITE)
    (EQUAL (EMPTY (S-PLUS X Y)) (EMPTY X)) ((DISABLE PLUS)))

(PROVE-LEMMA A2-E-S-PLUS (REWRITE)
    (EQUAL (EQUAL (S-PLUS X Y) (E)) (EMPTY X))
    ((DISABLE S-PLUS A2-EMPTY-S-PLUS) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-PLUS))))

(PROVE-LEMMA A2-LP-S-PLUS (REWRITE) (EQUAL (LEN (S-PLUS X Y)) (LEN X))
    ((DISABLE PLUS) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-PLUS (REWRITE) (EQLEN (S-PLUS X Y) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-PLUS)))

(PROVE-LEMMA A2-IC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (S-PLUS (I C_X X) (I C_Y Y))
                    (I (PLUS C_X C_Y) (S-PLUS X Y))))
    ((ENABLE I LEN) (DISABLE STR-A-I PLUS)))

(PROVE-LEMMA A2-LC-S-PLUS (REWRITE)
    (IMPLIES (NOT (EMPTY X))
             (EQUAL (L (S-PLUS X Y)) (PLUS (L X) (L Y))))
    ((DISABLE PLUS) (EXPAND (S-PLUS X Y))))

(PROVE-LEMMA A2-PC-S-PLUS (REWRITE)
    (EQUAL (P (S-PLUS X Y)) (S-PLUS (P X) (P Y))) ((DISABLE PLUS)))

(PROVE-LEMMA A2-HC-S-PLUS (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X)) (EQUAL (LEN X) (LEN Y)))
             (EQUAL (H (S-PLUS X Y)) (PLUS (H X) (H Y))))
    ((DISABLE PLUS S-PLUS) (ENABLE H LEN) (INDUCT (S-PLUS X Y))))

(PROVE-LEMMA A2-BC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (B (S-PLUS X Y)) (S-PLUS (B X) (B Y))))
    ((DISABLE PLUS) (ENABLE B LEN) (INDUCT (S-PLUS X Y))))

(PROVE-LEMMA A2-BNC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (BN N (S-PLUS X Y)) (S-PLUS (BN N X) (BN N Y))))
    ((DISABLE PLUS S-PLUS)))

;; A2-End-S-PLUS

; eof:comb_plus.bm


; 1st circuit:

(defn Y1 (x)   (if (empty x) (e) (I 'a1 (p x))))
(defn Y2 (x)   (S-Del 'a1 (Y1 x) ))
(defn Y3 (x)   (Y1 x) )
(defn Y4 (x)   (if (empty x) (e) (I 'a2 (Y3 (p x)))))
(defn Y5 (x)   (S-Del 'a2 (Y4 x) ))
(defn W1 (x)   (S-Plus (Y2 x)  (Y5 x) ))

; 2nd circuit:

(defn Z1 (x)   (S-Del 'a1 x))
(defn Z2 (x)   x)
(defn Z3 (x)   (if (empty x) (e) (I 'a1 (Z2 (p x)))))
(defn Z4 (x)   (S-Del 'a2 (Z3 x)))
(defn Z5 (x)   (S-Plus (Z1 x)  (Z4 x) ))
(defn W2 (x)   (if (empty x) (e) (I 2 (Z5 (p x)))))

;;; PROOF:

;;; no 2nd order for sysd lines, because we are not in CSX..

;;; Correctness (equivalence):
 
(prove-lemma Lw1w2 (rewrite)
(implies (stringp x)
	 (equal (w1 x) (w2 x)))
)

; eof: corr_CIXA00.bm

