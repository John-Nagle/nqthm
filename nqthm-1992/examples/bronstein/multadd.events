#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)
; multadd.bm: an iterative multiplier, built from an adder;
;    This is Paillet #7.
;    Note: this is the first multi-input circuit which forced the 
;    EQ-LEN hyps. Also, we prove the same Deroulement as Paillet, 
;    an induction over the macrocycle would be illegible to specify
;    and let alone prove.
;

;;; CIRCUIT in SUGARED form:
#|
(setq sysd '(sy-MULTADD (Xx Xy)
(Y1 S mux Ydone Xx Y3)
(YN R 0 Y1)         ; initially called l2 in Paillet, but then renamed to N
(Y3 S dec YN)
(Y4 S dec Y3)
(Y5 S dec Xx)
(Y6 S mux Ydone Y5 Y4)
(Y7 S eq0 Y6)
(Yt S or Y7 Y8)
(Ydone R T Yt)
(Y8 S eq0 Xy)
(Y9 S eq0 Xx)
(Y0 S const 0 Xx)
(Y10 S mux Y9 Y0 Xy)
(Y11 S mux Ydone Y10 Y12)
(Yout R 0 Y11)
(Y12 S plus Y10 Yout)
))

(setq multadd '(  |#
; BM DEFINITIONS and A2 LEMMAS, generated by BMSYSD:
; comb_dec.bm: DECrement combinational element (with dec 0 = 0 )
; U7-DONE

(defn Dec (u) (sub1 u))

; Everything below generated by: (bmcomb 'dec '() '(x))

(DEFN S-DEC (X) (IF (EMPTY X) (E) (A (S-DEC (P X)) (DEC (L X)))))

;; A2-Begin-S-DEC

(PROVE-LEMMA A2-EMPTY-S-DEC (REWRITE)
    (EQUAL (EMPTY (S-DEC X)) (EMPTY X)) ((DISABLE DEC)))

(PROVE-LEMMA A2-E-S-DEC (REWRITE)
    (EQUAL (EQUAL (S-DEC X) (E)) (EMPTY X))
    ((DISABLE S-DEC A2-EMPTY-S-DEC) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-DEC))))

(PROVE-LEMMA A2-LP-S-DEC (REWRITE) (EQUAL (LEN (S-DEC X)) (LEN X))
    ((DISABLE DEC) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-DEC (REWRITE) (EQLEN (S-DEC X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-DEC)))

(PROVE-LEMMA A2-IC-S-DEC (REWRITE)
    (EQUAL (S-DEC (I C_X X)) (I (DEC C_X) (S-DEC X)))
    ((ENABLE I) (DISABLE STR-A-I DEC)))

(PROVE-LEMMA A2-LC-S-DEC (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-DEC X)) (DEC (L X))))
    ((DISABLE DEC) (EXPAND (S-DEC X))))

(PROVE-LEMMA A2-PC-S-DEC (REWRITE) (EQUAL (P (S-DEC X)) (S-DEC (P X)))
    ((DISABLE DEC)))

(PROVE-LEMMA A2-HC-S-DEC (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-DEC X)) (DEC (H X))))
    ((DISABLE DEC S-DEC) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-DEC (REWRITE) (EQUAL (B (S-DEC X)) (S-DEC (B X)))
    ((DISABLE DEC) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-DEC (REWRITE)
    (EQUAL (BN N (S-DEC X)) (S-DEC (BN N X))) ((DISABLE DEC S-DEC)))

;; A2-End-S-DEC

; eof:comb_dec.bm

; comb_eq0.bm: (slightly abstract) equal to 0 test, could be done with: XOR 1 u
; U7-DONE

(defn Eq0 (u) (zerop u))

; Everything below generated by: (bmcomb 'eq0 '() '(x))

(DEFN S-EQ0 (X) (IF (EMPTY X) (E) (A (S-EQ0 (P X)) (EQ0 (L X)))))

;; A2-Begin-S-EQ0

(PROVE-LEMMA A2-EMPTY-S-EQ0 (REWRITE)
    (EQUAL (EMPTY (S-EQ0 X)) (EMPTY X)) ((DISABLE EQ0)))

(PROVE-LEMMA A2-E-S-EQ0 (REWRITE)
    (EQUAL (EQUAL (S-EQ0 X) (E)) (EMPTY X))
    ((DISABLE S-EQ0 A2-EMPTY-S-EQ0) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-EQ0))))

(PROVE-LEMMA A2-LP-S-EQ0 (REWRITE) (EQUAL (LEN (S-EQ0 X)) (LEN X))
    ((DISABLE EQ0) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-EQ0 (REWRITE) (EQLEN (S-EQ0 X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-EQ0)))

(PROVE-LEMMA A2-IC-S-EQ0 (REWRITE)
    (EQUAL (S-EQ0 (I C_X X)) (I (EQ0 C_X) (S-EQ0 X)))
    ((ENABLE I) (DISABLE STR-A-I EQ0)))

(PROVE-LEMMA A2-LC-S-EQ0 (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-EQ0 X)) (EQ0 (L X))))
    ((DISABLE EQ0) (EXPAND (S-EQ0 X))))

(PROVE-LEMMA A2-PC-S-EQ0 (REWRITE) (EQUAL (P (S-EQ0 X)) (S-EQ0 (P X)))
    ((DISABLE EQ0)))

(PROVE-LEMMA A2-HC-S-EQ0 (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-EQ0 X)) (EQ0 (H X))))
    ((DISABLE EQ0 S-EQ0) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-EQ0 (REWRITE) (EQUAL (B (S-EQ0 X)) (S-EQ0 (B X)))
    ((DISABLE EQ0) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-EQ0 (REWRITE)
    (EQUAL (BN N (S-EQ0 X)) (S-EQ0 (BN N X))) ((DISABLE EQ0 S-EQ0)))

;; A2-End-S-EQ0

; eof:comb_eq0.bm

; comb_mux.bm: Mux combinational element, i.e. "if".
; U7-DONE

(defn mux (u1 u2 u3) (if u1 u2 u3))

; everything below generated by: (bmcomb 'mux '() '(x1 x2 x3))
; with the EXCEPTIONS/HAND-MODIFICATIONS given below.

(DEFN S-MUX (X1 X2 X3)
      (IF (EMPTY X1) (E)
          (A (S-MUX (P X1) (P X2) (P X3)) (MUX (L X1) (L X2) (L X3)))))

; SMUX-is-SIF can make things much simpler on occasions:

(prove-lemma smux-is-sif (rewrite) 
    (equal (s-mux x1 x2 x3) (s-if x1 x2 x3)))

(disable smux-is-sif)

; We take advantage of SMUX-is-SIF for all inductive proofs. To do so we
; HAND-MODIFY the code generated by Sugar to replace all the hints by
;   - A2-EMPTY, A2-PC replace hint with: ((enable smux-is-sif)) 
;   - A2-LP, A2-IC, A2-HC, A2-BC: ((enable smux-is-sif) (disable len))
;   - A2-BNC: ((enable smux-is-sif) (disable bn len))

;; A2-Begin-S-MUX

(PROVE-LEMMA A2-EMPTY-S-MUX (REWRITE)
    (EQUAL (EMPTY (S-MUX X1 X2 X3)) (EMPTY X1)) ((enable smux-is-sif)))

(PROVE-LEMMA A2-E-S-MUX (REWRITE)
    (EQUAL (EQUAL (S-MUX X1 X2 X3) (E)) (EMPTY X1))
    ((DISABLE S-MUX A2-EMPTY-S-MUX) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-MUX))))

(PROVE-LEMMA A2-LP-S-MUX (REWRITE)
    (EQUAL (LEN (S-MUX X1 X2 X3)) (LEN X1))
    ((enable smux-is-sif) (disable len)))

(PROVE-LEMMA A2-LPE-S-MUX (REWRITE) (EQLEN (S-MUX X1 X2 X3) X1)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-MUX)))

(PROVE-LEMMA A2-IC-S-MUX (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3)))
             (EQUAL (S-MUX (I C_X1 X1) (I C_X2 X2) (I C_X3 X3))
                    (I (MUX C_X1 C_X2 C_X3) (S-MUX X1 X2 X3))))
    ((enable smux-is-sif) (disable len)))

(PROVE-LEMMA A2-LC-S-MUX (REWRITE)
    (IMPLIES (NOT (EMPTY X1))
             (EQUAL (L (S-MUX X1 X2 X3)) (MUX (L X1) (L X2) (L X3))))
    ((DISABLE MUX) (EXPAND (S-MUX X1 X2 X3))))

(PROVE-LEMMA A2-PC-S-MUX (REWRITE)
    (EQUAL (P (S-MUX X1 X2 X3)) (S-MUX (P X1) (P X2) (P X3)))
    ((enable smux-is-sif)))

(PROVE-LEMMA A2-HC-S-MUX (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X1))
                  (AND (EQUAL (LEN X1) (LEN X2))
                       (EQUAL (LEN X2) (LEN X3))))
             (EQUAL (H (S-MUX X1 X2 X3)) (MUX (H X1) (H X2) (H X3))))
    ((enable smux-is-sif) (disable len)))

;old:    ((DISABLE MUX S-MUX) (ENABLE H LEN) (INDUCT (S-MUX X1 X2 X3)))

(PROVE-LEMMA A2-BC-S-MUX (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3)))
             (EQUAL (B (S-MUX X1 X2 X3)) (S-MUX (B X1) (B X2) (B X3))))
    ((enable smux-is-sif) (disable len)))

;old:    ((DISABLE MUX) (ENABLE B LEN) (INDUCT (S-MUX X1 X2 X3)))

(PROVE-LEMMA A2-BNC-S-MUX (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3)))
             (EQUAL (BN N (S-MUX X1 X2 X3))
                    (S-MUX (BN N X1) (BN N X2) (BN N X3))))
    ((enable smux-is-sif) (disable bn len)))

;old: ((DISABLE MUX S-MUX))

;; A2-End-S-MUX

; eof:comb_mux.bm

; comb_plus.bm: Plus combinational element.
; U7-DONE

;   no character function definition since BM already knows about Plus..

; Everything below generated by:     (bmcomb 'plus '() '(x y))

(DEFN S-PLUS (X Y)
      (IF (EMPTY X) (E) (A (S-PLUS (P X) (P Y)) (PLUS (L X) (L Y)))))

;; A2-Begin-S-PLUS

(PROVE-LEMMA A2-EMPTY-S-PLUS (REWRITE)
    (EQUAL (EMPTY (S-PLUS X Y)) (EMPTY X)) ((DISABLE PLUS)))

(PROVE-LEMMA A2-E-S-PLUS (REWRITE)
    (EQUAL (EQUAL (S-PLUS X Y) (E)) (EMPTY X))
    ((DISABLE S-PLUS A2-EMPTY-S-PLUS) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-PLUS))))

(PROVE-LEMMA A2-LP-S-PLUS (REWRITE) (EQUAL (LEN (S-PLUS X Y)) (LEN X))
    ((DISABLE PLUS) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-PLUS (REWRITE) (EQLEN (S-PLUS X Y) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-PLUS)))

(PROVE-LEMMA A2-IC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (S-PLUS (I C_X X) (I C_Y Y))
                    (I (PLUS C_X C_Y) (S-PLUS X Y))))
    ((ENABLE I LEN) (DISABLE STR-A-I PLUS)))

(PROVE-LEMMA A2-LC-S-PLUS (REWRITE)
    (IMPLIES (NOT (EMPTY X))
             (EQUAL (L (S-PLUS X Y)) (PLUS (L X) (L Y))))
    ((DISABLE PLUS) (EXPAND (S-PLUS X Y))))

(PROVE-LEMMA A2-PC-S-PLUS (REWRITE)
    (EQUAL (P (S-PLUS X Y)) (S-PLUS (P X) (P Y))) ((DISABLE PLUS)))

(PROVE-LEMMA A2-HC-S-PLUS (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X)) (EQUAL (LEN X) (LEN Y)))
             (EQUAL (H (S-PLUS X Y)) (PLUS (H X) (H Y))))
    ((DISABLE PLUS S-PLUS) (ENABLE H LEN) (INDUCT (S-PLUS X Y))))

(PROVE-LEMMA A2-BC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (B (S-PLUS X Y)) (S-PLUS (B X) (B Y))))
    ((DISABLE PLUS) (ENABLE B LEN) (INDUCT (S-PLUS X Y))))

(PROVE-LEMMA A2-BNC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (BN N (S-PLUS X Y)) (S-PLUS (BN N X) (BN N Y))))
    ((DISABLE PLUS S-PLUS)))

;; A2-End-S-PLUS

; eof:comb_plus.bm


(DEFN TOPOR-SY-MULTADD (LN) 
(IF (EQUAL LN 'Y1) 2 
(IF (EQUAL LN 'YN) 0 
(IF (EQUAL LN 'Y3) 1 
(IF (EQUAL LN 'Y4) 2 
(IF (EQUAL LN 'Y5) 1 
(IF (EQUAL LN 'Y6) 3 
(IF (EQUAL LN 'Y7) 4 
(IF (EQUAL LN 'YT) 5 
(IF (EQUAL LN 'YDONE) 0 
(IF (EQUAL LN 'Y8) 1 
(IF (EQUAL LN 'Y9) 1 
(IF (EQUAL LN 'Y0) 1 
(IF (EQUAL LN 'Y10) 2 
(IF (EQUAL LN 'Y11) 4 
(IF (EQUAL LN 'YOUT) 0 
(IF (EQUAL LN 'Y12) 3 
0)))))))))))))))))

;Parameter found: 0 in: (Y0 S CONST 0 XX)
(DEFN SY-MULTADD (LN XX XY) 
(IF (EQUAL LN 'Y1) (S-MUX (SY-MULTADD 'YDONE XX XY) XX
                          (SY-MULTADD 'Y3 XX XY)) 
(IF (EQUAL LN 'YN) (IF (EMPTY XX) (E)
                       (I 0 (SY-MULTADD 'Y1 (P XX) (P XY)))) 
(IF (EQUAL LN 'Y3) (S-DEC (SY-MULTADD 'YN XX XY)) 
(IF (EQUAL LN 'Y4) (S-DEC (SY-MULTADD 'Y3 XX XY)) 
(IF (EQUAL LN 'Y5) (S-DEC XX) 
(IF (EQUAL LN 'Y6) (S-MUX (SY-MULTADD 'YDONE XX XY)
                          (SY-MULTADD 'Y5 XX XY)
                          (SY-MULTADD 'Y4 XX XY)) 
(IF (EQUAL LN 'Y7) (S-EQ0 (SY-MULTADD 'Y6 XX XY)) 
(IF (EQUAL LN 'YT) (S-OR (SY-MULTADD 'Y7 XX XY) (SY-MULTADD 'Y8 XX XY)) 
(IF (EQUAL LN 'YDONE) (IF (EMPTY XX) (E)
                          (I T (SY-MULTADD 'YT (P XX) (P XY)))) 
(IF (EQUAL LN 'Y8) (S-EQ0 XY) 
(IF (EQUAL LN 'Y9) (S-EQ0 XX) 
(IF (EQUAL LN 'Y0) (S-CONST 0 XX) 
(IF (EQUAL LN 'Y10) (S-MUX (SY-MULTADD 'Y9 XX XY)
                           (SY-MULTADD 'Y0 XX XY) XY) 
(IF (EQUAL LN 'Y11) (S-MUX (SY-MULTADD 'YDONE XX XY)
                           (SY-MULTADD 'Y10 XX XY)
                           (SY-MULTADD 'Y12 XX XY)) 
(IF (EQUAL LN 'YOUT) (IF (EMPTY XX) (E)
                         (I 0 (SY-MULTADD 'Y11 (P XX) (P XY)))) 
(IF (EQUAL LN 'Y12) (S-PLUS (SY-MULTADD 'Y10 XX XY)
                            (SY-MULTADD 'YOUT XX XY)) 
(SFIX XX)))))))))))))))))
((LEX2 (LIST (COUNT XX) (TOPOR-SY-MULTADD LN)))) )

;; A2-Begin-SY-MULTADD

(PROVE-LEMMA A2-EMPTY-SY-MULTADD (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY))
             (EQUAL (EMPTY (SY-MULTADD LN XX XY)) (EMPTY XX)))
    ((DISABLE LEN S-DEC S-OR S-EQ0 S-CONST S-MUX S-PLUS)
     (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-E-SY-MULTADD (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY))
             (EQUAL (EQUAL (SY-MULTADD LN XX XY) (E)) (EMPTY XX)))
    ((DISABLE LEN SY-MULTADD A2-EMPTY-SY-MULTADD) (ENABLE EMPTY)
     (USE (A2-EMPTY-SY-MULTADD))))

(PROVE-LEMMA A2-LP-SY-MULTADD (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY))
             (EQUAL (LEN (SY-MULTADD LN XX XY)) (LEN XX)))
    ((DISABLE LEN S-DEC S-OR S-EQ0 S-CONST S-MUX S-PLUS)
     (ENABLE STR-ADD1-LEN-P STR-LEN-E)))

(PROVE-LEMMA A2-LPE-SY-MULTADD (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY))
             (EQLEN (SY-MULTADD LN XX XY) XX))
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-MULTADD)))

(PROVE-LEMMA A2-PC-SY-MULTADD (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY))
             (EQUAL (P (SY-MULTADD LN XX XY))
                    (SY-MULTADD LN (P XX) (P XY))))
    ((DISABLE LEN S-DEC S-OR S-EQ0 S-CONST S-MUX S-PLUS A2-IC-S-DEC
              A2-IC-S-OR A2-IC-S-EQ0 A2-IC-S-CONST A2-IC-S-MUX
              A2-IC-S-PLUS)
     (ENABLE STR-ADD1-LEN-P)))

;; A2-End-SY-MULTADD

;;; Circuit CORRECTNESS /Paillet:

; first we get the simplified (generalized) sysd:

(defn SY-M2 (ln Xx Xy)
(IF (EQUAL LN 'YN) (IF (EMPTY XX) (E)
  (I 0 (S-MUX (SY-M2 'YDONE (P XX) (P XY))
	      (P XX)
	      (S-DEC (SY-M2 'YN (P XX) (P XY))))))
(IF (EQUAL LN 'Ydone) (IF (EMPTY XX) (E)
  (I T (S-OR (S-EQ0 (S-MUX (SY-M2 'YDONE (P XX) (P XY))
			   (S-DEC (P XX))
			   (S-DEC (S-DEC (SY-M2 'YN (P XX) (P XY))))))
	     (S-EQ0 (P XY)))))
(IF (EQUAL LN 'Yout) (IF (EMPTY XX) (E)
  (I 0 (S-MUX (SY-M2 'YDONE (P XX) (P XY))
	      (S-MUX (S-EQ0 (P XX))
		     (S-CONST 0 (P XX))
		     (P XY))
	      (S-PLUS (S-MUX (S-EQ0 (P XX))
			     (S-CONST 0 (P XX))
			     (P XY))
		      (SY-M2 'YOUT (P XX) (P XY))))))
(sfix Xx))))
)

; M2 is just a GENERALIZED sysd, and our A2 lemmas should still be 
; true. The following were (Sugar) generated by:
; (vp (bma2sysd-aux 'sy-M2 'sy-M2 '(Xx Xy) 
;                   '(DEC OR EQ0 CONST MUX PLUS)))
; and then A2-PC was taken out by hand, preemptively.

;; A2-Begin-SY-M2

(PROVE-LEMMA A2-EMPTY-SY-M2 (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY))
             (EQUAL (EMPTY (SY-M2 LN XX XY)) (EMPTY XX)))
    ((DISABLE LEN S-DEC S-OR S-EQ0 S-CONST S-MUX S-PLUS)
     (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-E-SY-M2 (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY))
             (EQUAL (EQUAL (SY-M2 LN XX XY) (E)) (EMPTY XX)))
    ((DISABLE LEN SY-M2 A2-EMPTY-SY-M2) (ENABLE EMPTY)
     (USE (A2-EMPTY-SY-M2))))

(PROVE-LEMMA A2-LP-SY-M2 (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY))
             (EQUAL (LEN (SY-M2 LN XX XY)) (LEN XX)))
    ((DISABLE LEN S-DEC S-OR S-EQ0 S-CONST S-MUX S-PLUS)
     (ENABLE STR-ADD1-LEN-P STR-LEN-E)))

(PROVE-LEMMA A2-LPE-SY-M2 (REWRITE)
    (IMPLIES (EQUAL (LEN XX) (LEN XY)) (EQLEN (SY-M2 LN XX XY) XX))
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-M2)))

;(PROVE-LEMMA A2-PC-SY-M2 (REWRITE)
;    (IMPLIES (EQUAL (LEN XX) (LEN XY))
;             (EQUAL (P (SY-M2 LN XX XY)) (SY-M2 LN (P XX) (P XY))))
;    ((DISABLE LEN S-DEC S-OR S-EQ0 S-CONST S-MUX S-PLUS A2-IC-S-DEC
;              A2-IC-S-OR A2-IC-S-EQ0 A2-IC-S-CONST A2-IC-S-MUX
;              A2-IC-S-PLUS)
;     (ENABLE STR-ADD1-LEN-P)))

;; A2-End-SY-M2

; This KEY equality lemma is proved immediately, 2 cases
; on empty Xx:

(prove-lemma MULTADD-IS-M2 (rewrite)
(and (equal (sy-multadd 'Yout Xx Xy) (sy-m2 'Yout Xx Xy))
     (equal (sy-multadd 'Ydone Xx Xy) (sy-m2 'Ydone Xx Xy))
     (equal (sy-multadd 'YN Xx Xy) (sy-m2 'YN Xx Xy))
     )
((DISABLE S-DEC S-OR S-EQ0 S-CONST S-MUX S-PLUS)
 (induct (induct-P2 Xx Xy))
 (expand (sy-multadd 'Ydone Xx Xy)
	 (sy-multadd 'YN Xx Xy)
	 (sy-multadd 'Yout Xx Xy)
         (sy-multadd 'Y11 (P Xx) (P Xy))
	 (sy-multadd 'Y10 (P Xx) (P Xy))
	 (sy-multadd 'Y12 (P Xx) (P Xy))
	 (sy-multadd 'Y9 (P Xx) (P Xy))
	 (sy-multadd 'Y0 (P Xx) (P Xy))
	 (sy-multadd 'Y8 (P Xx) (P Xy))
	 (sy-multadd 'Yt (P Xx) (P Xy))
	 (sy-multadd 'Y7 (P Xx) (P Xy))
	 (sy-multadd 'Y6 (P Xx) (P Xy))
	 (sy-multadd 'Y5 (P Xx) (P Xy))
	 (sy-multadd 'Y1 (P Xx) (P Xy))
	 (sy-multadd 'Y3 (P Xx) (P Xy))
	 (sy-multadd 'Y4 (P Xx) (P Xy))
	 )
 )
)

; Note: simplified sysd was obtained w/ same hint as above minus 
; induction and M2 expansions, and replacing sy-multadd by sy-m2 
; by hand, IN:
;(dcl dummy ())
;(prove-lemma d1 ()
;(implies (not (empty Xx))
;	 (equal (sy-multadd 'Ydone Xx Xy) (dummy)))
;)


; The FUNDAMENTAL invariant property for the circuit is:

(prove-lemma multadd-correct-m2-inv ()
(implies (and (numberp Xa) (numberp Xb) (numberp k)
	      (lessp k (add1 (add1 Xa))) (lessp 1 k)
	      (not (zerop Xa)) (not (zerop Xb))
	      )
 (and (equal (L (sy-m2 'Yout (S-constL Xa k) (S-constL Xb k)))
	     (times Xb (sub1 k)))
      (equal (L (sy-m2 'Ydone (S-constL Xa k) (S-constL Xb k)))
	     (equal Xa (sub1 k)))
      (equal (L (sy-m2 'YN (S-constL Xa k) (S-constL Xb k)))
	     (difference Xa (sub1 (sub1 k))))
      ))
((disable S-DEC S-OR S-EQ0 S-CONST S-MUX S-PLUS)
 (induct (ARI-add1-induct k))
 (enable STR-L-I2)  ; necessary
 )
)

; Now it's just a matter of instantiating it to the right 
; Deroulement, and moving to MULTADD.

; NOTE: in a first draft of this proof, we first went to the 
; identical theorem in terms of M2, and then passed over trivially.
; Attempting direct results about SY-MULTADD during experimentation
; is asking for trouble...

; NOTE: factoring out below Xx and Xy in the hyps as is done below
; yields a true,provable, but UNUSABLE rewrite thm because Xa and 
; Xb are FREE. It looks cuter though, so we may want it that way
; in FINAL thms.


(prove-lemma MULTADD-CORRECT (rewrite)
(implies (and (numberp Xa) (numberp Xb)
	      (not (zerop Xa)) (not (zerop Xb))
	      (equal Xx (S-constL Xa (add1 Xa)))
	      (equal Xy (S-constL Xb (add1 Xa)))
	      )
	 (and (equal (L (sy-multadd 'Yout Xx Xy)) (times Xb Xa))
	      (equal (L (sy-multadd 'Ydone Xx Xy)) T)
	      ))
((use (multadd-correct-m2-inv (Xx Xx) (Xy Xy) (k (add1 Xa)) (Xa Xa) (Xb Xb)))
 (disable sy-multadd sy-m2 times ari-times-commute)
 )
)

; And of treating the case where either input is 0 separately:

(prove-lemma MULTADD-CORRECT-CASE-0 (rewrite)
(implies (and (numberp Xa) (numberp Xb)
	      (or (zerop Xa) (zerop Xb))
	      (equal Xx (S-constL Xa 2))
	      (equal Xy (S-constL Xb 2))
	      )
	 (and (equal (L (sy-multadd 'Yout Xx Xy)) (times Xb Xa))
	      (equal (L (sy-multadd 'Ydone Xx Xy)) T)
	      ))
((disable sy-multadd)
 (expand  (SY-M2 'YOUT (S-CONSTL XA 2) (S-CONSTL XB 2))
	  (SY-M2 'YDONE (S-CONSTL XA 2) (S-CONSTL XB 2))
	  (SY-M2 'YOUT (S-CONSTL XA 2) (A (A (E) 0) 0))
	  (SY-M2 'YDONE (S-CONSTL XA 2) (A (A (E) 0) 0))
	  )
 )
)

; eof: multadd.bm
;))

