#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)

; macc.bm
; 	Circuit is similar to acc, but uses multiplication instead of
; addition, i.e. it's a multiplying accumulator.  It's expressed in CSXA form,
; which is the form we've currently settled on.
; NOTE that it has to be initialized with 1 in order to function right! See
; prod0 for what happens with 0-initialization...
;
;;; DEFINITION OF CIRCUIT:
#|
(setq sysd '(sy-macc ( x)
(Ymacc S Times x Ymacc2)
(Ymacc2 R 1 Ymacc)
))

(setq macc '(
; BM DEFINITIONS and A2 LEMMAS, generated by BMSYSD:
|#
; comb_times.bm: Times combinational element.
; U7-DONE

; no character function def since BM already knows about Times..

; Everything below generated by:     (bmcomb 'times '() '(x y))

(DEFN S-TIMES (X Y)
      (IF (EMPTY X) (E) (A (S-TIMES (P X) (P Y)) (TIMES (L X) (L Y)))))

;; A2-Begin-S-TIMES

(PROVE-LEMMA A2-EMPTY-S-TIMES (REWRITE)
    (EQUAL (EMPTY (S-TIMES X Y)) (EMPTY X)) ((DISABLE TIMES)))

(PROVE-LEMMA A2-E-S-TIMES (REWRITE)
    (EQUAL (EQUAL (S-TIMES X Y) (E)) (EMPTY X))
    ((DISABLE S-TIMES A2-EMPTY-S-TIMES) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-TIMES))))

(PROVE-LEMMA A2-LP-S-TIMES (REWRITE)
    (EQUAL (LEN (S-TIMES X Y)) (LEN X)) ((DISABLE TIMES) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-TIMES (REWRITE) (EQLEN (S-TIMES X Y) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-TIMES)))

(PROVE-LEMMA A2-IC-S-TIMES (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (S-TIMES (I C_X X) (I C_Y Y))
                    (I (TIMES C_X C_Y) (S-TIMES X Y))))
    ((ENABLE I LEN) (DISABLE STR-A-I TIMES)))

(PROVE-LEMMA A2-LC-S-TIMES (REWRITE)
    (IMPLIES (NOT (EMPTY X))
             (EQUAL (L (S-TIMES X Y)) (TIMES (L X) (L Y))))
    ((DISABLE TIMES) (EXPAND (S-TIMES X Y))))

(PROVE-LEMMA A2-PC-S-TIMES (REWRITE)
    (EQUAL (P (S-TIMES X Y)) (S-TIMES (P X) (P Y))) ((DISABLE TIMES)))

(PROVE-LEMMA A2-HC-S-TIMES (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X)) (EQUAL (LEN X) (LEN Y)))
             (EQUAL (H (S-TIMES X Y)) (TIMES (H X) (H Y))))
    ((DISABLE TIMES S-TIMES) (ENABLE H LEN) (INDUCT (S-TIMES X Y))))

(PROVE-LEMMA A2-BC-S-TIMES (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (B (S-TIMES X Y)) (S-TIMES (B X) (B Y))))
    ((DISABLE TIMES) (ENABLE B LEN) (INDUCT (S-TIMES X Y))))

(PROVE-LEMMA A2-BNC-S-TIMES (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (BN N (S-TIMES X Y)) (S-TIMES (BN N X) (BN N Y))))
    ((DISABLE TIMES S-TIMES)))

;; A2-End-S-TIMES

; eof:comb_times.bm


(DEFN TOPOR-SY-MACC (LN) 
(IF (EQUAL LN 'YMACC) 1 
(IF (EQUAL LN 'YMACC2) 0 
0)))

(DEFN SY-MACC (LN X) 
(IF (EQUAL LN 'YMACC) (S-TIMES X (SY-MACC 'YMACC2 X)) 
(IF (EQUAL LN 'YMACC2) (IF (EMPTY X) (E) (I 1 (SY-MACC 'YMACC (P X)))) 
(SFIX X)))
((LEX2 (LIST (COUNT X) (TOPOR-SY-MACC LN)))) )

;; A2-Begin-SY-MACC

(PROVE-LEMMA A2-EMPTY-SY-MACC (REWRITE)
    (EQUAL (EMPTY (SY-MACC LN X)) (EMPTY X)) ((DISABLE S-TIMES)))

(PROVE-LEMMA A2-E-SY-MACC (REWRITE)
    (EQUAL (EQUAL (SY-MACC LN X) (E)) (EMPTY X))
    ((DISABLE SY-MACC A2-EMPTY-SY-MACC) (ENABLE EMPTY)
     (USE (A2-EMPTY-SY-MACC))))

(PROVE-LEMMA A2-LP-SY-MACC (REWRITE)
    (EQUAL (LEN (SY-MACC LN X)) (LEN X))
    ((DISABLE LEN S-TIMES) (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-MACC (REWRITE) (EQLEN (SY-MACC LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-MACC)))

(PROVE-LEMMA A2-PC-SY-MACC (REWRITE)
    (EQUAL (P (SY-MACC LN X)) (SY-MACC LN (P X)))
    ((DISABLE S-TIMES A2-IC-S-TIMES)))

;; A2-End-SY-MACC

;;; SPEC definition:

(defn numer-macc (x)
  (if (empty x)
      1
      (times (numer-macc (p x)) (l x))))

; this is the standard extension from last-char-fun to MLP-string-fun.
(defn spec-macc (x)
  (if (empty x)
      (e)
      (A (spec-macc (p x))
	   (numer-macc x))))

;;; Circuit CORRECTNESS:

; Macc-correct-ax is a "predicative correctness statement", i.e. what we would
; do if we didn't have functional equality as a specification method, but 
; instead used a purely axiomatic approach.

(prove-lemma macc-correct-ax (rewrite)
(implies (not (empty x))
	 (equal (l (sy-macc 'Ymacc x))
		(numer-macc x)))
((expand (sy-macc 'Ymacc x))
 (enable STR-l-I2 ; NECESSARY here because we want to introduce a case
                  ; disjunction BEFORE the equality hypothesis is used..
	 ARI-times-commute ; because args are backward.
	 )
 (disable TIMES) ; not necessary, but simplifies proof slightly, insight
                 ; was obtained from looking at the 2ndorder proof (funacc)
)
)

; to go to a functional equality once we have the "last" (ax) statement is
; a trivial induction, if we start out with an P-L split which is unnatural
; for BM, so we force it w/ a USE hint of A-p-l-split
; We really would like to use it as a one-time rewrite, but it's a looping
; rule, so we can't.  Instead we have to use it in USE hints, which in case
; of induction, makes things more complex than they should.

(prove-lemma A-p-l-split () ; USE hints only.
(implies (not (empty x))
	 (equal (sy-macc 'Ymacc x)
		(A (p (sy-macc 'Ymacc x))
		     (l (sy-macc 'Ymacc x)) )))
((disable macc-correct-ax a2-pc-sy-macc)
 )
)

(prove-lemma macc-correct (rewrite)
(equal (sy-macc 'Ymacc x)
       (spec-macc x))
((induct (induct-P x))
 (use (A-p-l-split))
 (disable A-P-L numer-macc sy-macc EMPTY) ; note: EMPTY is a big win! reduces case explosion
 )
)

; eof: macc.bm

