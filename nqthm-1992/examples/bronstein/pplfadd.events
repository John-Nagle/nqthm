#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)
; pplfadd.bm: first realistic PPL: Ripple Adder vs. PPL Adder
; 
; RIGHT NOW: Fadd is defined (made sysd animation/debugging/corking
; easier).
; 
; NOTE w/ bad chip: A2-PC-A fails because BM gets hopelessly lost
; in the EQ-LEN hyps...
; Now we bypass all SYSD A2's and get the expansion directly...
;
; We test both the Corked and Uncorked (B-P) thms.

;;; (Sugared) Circuits:
#|
(setq sy-A '(SY-A (Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
(Yf S Const F Xx2)
(Yo0 S fa-S Xx0 Xy0 Yf)
(Y00 S fa-C Xx0 Xy0 Yf)
(Yo1 S fa-S Xx1 Xy1 Y00)
(Y01 S fa-C Xx1 Xy1 Y00)
(Yo2 S fa-S Xx2 Xy2 Y01)
(Yo3 S fa-C Xx2 Xy2 Y01)

; and the corks (one for each output line), here it's easy: all F
(Yo0c2 R F Yo0)
(Yo0c1 R F Yo0c2)
(Yo0c R F Yo0c1)

(Yo1c2 R F Yo1)
(Yo1c1 R F Yo1c2)
(Yo1c R F Yo1c1)

(Yo2c2 R F Yo2)
(Yo2c1 R F Yo2c2)
(Yo2c R F Yo2c1)

(Yo3c2 R F Yo3)
(Yo3c1 R F Yo3c2)
(Yo3c R F Yo3c1)
))

(setq sy-B '(SY-B (Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
; 1st stage:
(Zf S Const F Xx2)
(Z00P S fa-S Xx0 Xy0 Zf)
(Z00 R F Z00P)
(Z01P S fa-C Xx0 Xy0 Zf)
(Z01 R F Z01P)
(Z02 R F Xx1)
(Z03 R F Xy1)
(Z04 R F Xx2)
(Z05 R F Xy2)
; 2nd stage:
(Z10 R F Z00)
(Z11P S fa-S Z02 Z03 Z01)
(Z11 R F Z11P)
(Z12P S fa-C Z02 Z03 Z01)
(Z12 R F Z12P)
(Z13 R F Z04)
(Z14 R F Z05)
; 3rd stage:
(Zo0 R F Z10)
(Zo1 R F Z11)
(Zo2P S fa-S Z13 Z14 Z12)
(Zo2 R F Zo2P)
(Zo3P S fa-C Z13 Z14 Z12)
(Zo3 R F Zo3P)
))

; Note: we can animate the sysds in r-loop with:
; for fadd: x = 3 0 0 0 , y = 4 0 0 0 
; (result should be: 7 0 0 0 or 0 0 0 7)
; FUNDAMENTALLY: note that this simulation did NOT fail even with
; our first -- buggy -- circuit...
;(setq xx0 (A (A (A (A (e) T) F) F) F))
;(setq xx1 (A (A (A (A (e) T) F) F) F))
;(setq xx2 (A (A (A (A (e) F) F) F) F))
;(setq xy0 (A (A (A (A (e) F) F) F) F))
;(setq xy1 (A (A (A (A (e) F) F) F) F))
;(setq xy2 (A (A (A (A (e) T) F) F) F))
;
;(sy-a 'Yo0 XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-a 'Yo1 XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-a 'Yo2 XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-a 'Yo3 XX2 XX1 XX0 XY2 XY1 XY0) 
;
;(sy-a 'Yo0c XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-a 'Yo1c XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-a 'Yo2c XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-a 'Yo3c XX2 XX1 XX0 XY2 XY1 XY0) 
;
;(sy-b 'Zo0 XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-b 'Zo1 XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-b 'Zo2 XX2 XX1 XX0 XY2 XY1 XY0) 
;(sy-b 'Zo3 XX2 XX1 XX0 XY2 XY1 XY0) 
;
; end r-loop data

(setq pplfadd '( |#
; BM DEFINITIONS and A2 LEMMAS, generated by BMSYSD:
; comb_fa-S.bm: Fa-S , Full Adder, Sum output.
; currently: char function defined
; U7-DONE

(defn Fa-S (u v w)
  (or (and (not u) (not v) w)
      (and (not u) v (not w))
      (and u (not v) (not w))
      (and u v w)))

; Everything below generated by: (bmcomb 'Fa-S '() '(x y z))

(DEFN S-FA-S (X Y Z)
      (IF (EMPTY X) (E)
          (A (S-FA-S (P X) (P Y) (P Z)) (FA-S (L X) (L Y) (L Z)))))

;; A2-Begin-S-FA-S

(PROVE-LEMMA A2-EMPTY-S-FA-S (REWRITE)
    (EQUAL (EMPTY (S-FA-S X Y Z)) (EMPTY X)) ((DISABLE FA-S)))

(PROVE-LEMMA A2-E-S-FA-S (REWRITE)
    (EQUAL (EQUAL (S-FA-S X Y Z) (E)) (EMPTY X))
    ((DISABLE S-FA-S A2-EMPTY-S-FA-S) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-FA-S))))

(PROVE-LEMMA A2-LP-S-FA-S (REWRITE)
    (EQUAL (LEN (S-FA-S X Y Z)) (LEN X)) ((DISABLE FA-S) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-FA-S (REWRITE) (EQLEN (S-FA-S X Y Z) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-FA-S)))

(PROVE-LEMMA A2-IC-S-FA-S (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X) (LEN Y)) (EQUAL (LEN Y) (LEN Z)))
             (EQUAL (S-FA-S (I C_X X) (I C_Y Y) (I C_Z Z))
                    (I (FA-S C_X C_Y C_Z) (S-FA-S X Y Z))))
    ((ENABLE I LEN) (DISABLE STR-A-I FA-S) (INDUCT (S-FA-S X Y Z))))

(PROVE-LEMMA A2-LC-S-FA-S (REWRITE)
    (IMPLIES (NOT (EMPTY X))
             (EQUAL (L (S-FA-S X Y Z)) (FA-S (L X) (L Y) (L Z))))
    ((DISABLE FA-S) (EXPAND (S-FA-S X Y Z))))

(PROVE-LEMMA A2-PC-S-FA-S (REWRITE)
    (EQUAL (P (S-FA-S X Y Z)) (S-FA-S (P X) (P Y) (P Z)))
    ((DISABLE FA-S)))

(PROVE-LEMMA A2-HC-S-FA-S (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X))
                  (AND (EQUAL (LEN X) (LEN Y)) (EQUAL (LEN Y) (LEN Z))))
             (EQUAL (H (S-FA-S X Y Z)) (FA-S (H X) (H Y) (H Z))))
    ((DISABLE FA-S S-FA-S) (ENABLE H LEN) (INDUCT (S-FA-S X Y Z))))

(PROVE-LEMMA A2-BC-S-FA-S (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X) (LEN Y)) (EQUAL (LEN Y) (LEN Z)))
             (EQUAL (B (S-FA-S X Y Z)) (S-FA-S (B X) (B Y) (B Z))))
    ((DISABLE FA-S) (ENABLE B LEN) (INDUCT (S-FA-S X Y Z))))

(PROVE-LEMMA A2-BNC-S-FA-S (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X) (LEN Y)) (EQUAL (LEN Y) (LEN Z)))
             (EQUAL (BN N (S-FA-S X Y Z))
                    (S-FA-S (BN N X) (BN N Y) (BN N Z))))
    ((DISABLE FA-S S-FA-S)))

;; A2-End-S-FA-S

; eof:comb_fa-S.bm

; comb_fa-C.bm: fa-C , Full Adder, Carry output.
; currently: character function is defined 
; U7-DONE

(defn fa-C (u v w)
  (or (and u v)
      (and v w)
      (and w u)))

; Everything below generated by: (bmcomb 'fa-C '() '(x y z))

(DEFN S-FA-C (X Y Z)
      (IF (EMPTY X) (E)
          (A (S-FA-C (P X) (P Y) (P Z)) (FA-C (L X) (L Y) (L Z)))))

;; A2-Begin-S-FA-C

(PROVE-LEMMA A2-EMPTY-S-FA-C (REWRITE)
    (EQUAL (EMPTY (S-FA-C X Y Z)) (EMPTY X)) ((DISABLE FA-C)))

(PROVE-LEMMA A2-E-S-FA-C (REWRITE)
    (EQUAL (EQUAL (S-FA-C X Y Z) (E)) (EMPTY X))
    ((DISABLE S-FA-C A2-EMPTY-S-FA-C) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-FA-C))))

(PROVE-LEMMA A2-LP-S-FA-C (REWRITE)
    (EQUAL (LEN (S-FA-C X Y Z)) (LEN X)) ((DISABLE FA-C) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-FA-C (REWRITE) (EQLEN (S-FA-C X Y Z) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-FA-C)))

(PROVE-LEMMA A2-IC-S-FA-C (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X) (LEN Y)) (EQUAL (LEN Y) (LEN Z)))
             (EQUAL (S-FA-C (I C_X X) (I C_Y Y) (I C_Z Z))
                    (I (FA-C C_X C_Y C_Z) (S-FA-C X Y Z))))
    ((ENABLE I LEN) (DISABLE STR-A-I FA-C) (INDUCT (S-FA-C X Y Z))))

(PROVE-LEMMA A2-LC-S-FA-C (REWRITE)
    (IMPLIES (NOT (EMPTY X))
             (EQUAL (L (S-FA-C X Y Z)) (FA-C (L X) (L Y) (L Z))))
    ((DISABLE FA-C) (EXPAND (S-FA-C X Y Z))))

(PROVE-LEMMA A2-PC-S-FA-C (REWRITE)
    (EQUAL (P (S-FA-C X Y Z)) (S-FA-C (P X) (P Y) (P Z)))
    ((DISABLE FA-C)))

(PROVE-LEMMA A2-HC-S-FA-C (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X))
                  (AND (EQUAL (LEN X) (LEN Y)) (EQUAL (LEN Y) (LEN Z))))
             (EQUAL (H (S-FA-C X Y Z)) (FA-C (H X) (H Y) (H Z))))
    ((DISABLE FA-C S-FA-C) (ENABLE H LEN) (INDUCT (S-FA-C X Y Z))))

(PROVE-LEMMA A2-BC-S-FA-C (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X) (LEN Y)) (EQUAL (LEN Y) (LEN Z)))
             (EQUAL (B (S-FA-C X Y Z)) (S-FA-C (B X) (B Y) (B Z))))
    ((DISABLE FA-C) (ENABLE B LEN) (INDUCT (S-FA-C X Y Z))))

(PROVE-LEMMA A2-BNC-S-FA-C (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X) (LEN Y)) (EQUAL (LEN Y) (LEN Z)))
             (EQUAL (BN N (S-FA-C X Y Z))
                    (S-FA-C (BN N X) (BN N Y) (BN N Z))))
    ((DISABLE FA-C S-FA-C)))

;; A2-End-S-FA-C

; eof:comb_fa-C.bm


(DEFN TOPOR-SY-A (LN) 
(IF (EQUAL LN 'YF) 1 
(IF (EQUAL LN 'YO0) 2 
(IF (EQUAL LN 'Y00) 2 
(IF (EQUAL LN 'YO1) 3 
(IF (EQUAL LN 'Y01) 3 
(IF (EQUAL LN 'YO2) 4 
(IF (EQUAL LN 'YO3) 4 
(IF (EQUAL LN 'YO0C2) 0 
(IF (EQUAL LN 'YO0C1) 0 
(IF (EQUAL LN 'YO0C) 0 
(IF (EQUAL LN 'YO1C2) 0 
(IF (EQUAL LN 'YO1C1) 0 
(IF (EQUAL LN 'YO1C) 0 
(IF (EQUAL LN 'YO2C2) 0 
(IF (EQUAL LN 'YO2C1) 0 
(IF (EQUAL LN 'YO2C) 0 
(IF (EQUAL LN 'YO3C2) 0 
(IF (EQUAL LN 'YO3C1) 0 
(IF (EQUAL LN 'YO3C) 0 
0))))))))))))))))))))

;Parameter found: F in: (YF S CONST F XX2)
(DEFN SY-A (LN XX2 XX1 XX0 XY2 XY1 XY0) 
(IF (EQUAL LN 'YF) (S-CONST F XX2) 
(IF (EQUAL LN 'YO0) (S-FA-S XX0 XY0 (SY-A 'YF XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'Y00) (S-FA-C XX0 XY0 (SY-A 'YF XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'YO1) (S-FA-S XX1 XY1
                            (SY-A 'Y00 XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'Y01) (S-FA-C XX1 XY1
                            (SY-A 'Y00 XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'YO2) (S-FA-S XX2 XY2
                            (SY-A 'Y01 XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'YO3) (S-FA-C XX2 XY2
                            (SY-A 'Y01 XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'YO0C2) (IF (EMPTY XX2) (E)
                          (I F
                             (SY-A 'YO0 (P XX2) (P XX1) (P XX0) (P XY2)
                                   (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO0C1) (IF (EMPTY XX2) (E)
                          (I F
                             (SY-A 'YO0C2 (P XX2) (P XX1) (P XX0)
                                   (P XY2) (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO0C) (IF (EMPTY XX2) (E)
                         (I F
                            (SY-A 'YO0C1 (P XX2) (P XX1) (P XX0)
                                  (P XY2) (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO1C2) (IF (EMPTY XX2) (E)
                          (I F
                             (SY-A 'YO1 (P XX2) (P XX1) (P XX0) (P XY2)
                                   (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO1C1) (IF (EMPTY XX2) (E)
                          (I F
                             (SY-A 'YO1C2 (P XX2) (P XX1) (P XX0)
                                   (P XY2) (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO1C) (IF (EMPTY XX2) (E)
                         (I F
                            (SY-A 'YO1C1 (P XX2) (P XX1) (P XX0)
                                  (P XY2) (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO2C2) (IF (EMPTY XX2) (E)
                          (I F
                             (SY-A 'YO2 (P XX2) (P XX1) (P XX0) (P XY2)
                                   (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO2C1) (IF (EMPTY XX2) (E)
                          (I F
                             (SY-A 'YO2C2 (P XX2) (P XX1) (P XX0)
                                   (P XY2) (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO2C) (IF (EMPTY XX2) (E)
                         (I F
                            (SY-A 'YO2C1 (P XX2) (P XX1) (P XX0)
                                  (P XY2) (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO3C2) (IF (EMPTY XX2) (E)
                          (I F
                             (SY-A 'YO3 (P XX2) (P XX1) (P XX0) (P XY2)
                                   (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO3C1) (IF (EMPTY XX2) (E)
                          (I F
                             (SY-A 'YO3C2 (P XX2) (P XX1) (P XX0)
                                   (P XY2) (P XY1) (P XY0)))) 
(IF (EQUAL LN 'YO3C) (IF (EMPTY XX2) (E)
                         (I F
                            (SY-A 'YO3C1 (P XX2) (P XX1) (P XX0)
                                  (P XY2) (P XY1) (P XY0)))) 
(SFIX XX2))))))))))))))))))))
((LEX2 (LIST (COUNT XX2) (TOPOR-SY-A LN)))) )


(DEFN TOPOR-SY-B (LN) 
(IF (EQUAL LN 'ZF) 1 
(IF (EQUAL LN 'Z00P) 2 
(IF (EQUAL LN 'Z00) 0 
(IF (EQUAL LN 'Z01P) 2 
(IF (EQUAL LN 'Z01) 0 
(IF (EQUAL LN 'Z02) 0 
(IF (EQUAL LN 'Z03) 0 
(IF (EQUAL LN 'Z04) 0 
(IF (EQUAL LN 'Z05) 0 
(IF (EQUAL LN 'Z10) 0 
(IF (EQUAL LN 'Z11P) 1 
(IF (EQUAL LN 'Z11) 0 
(IF (EQUAL LN 'Z12P) 1 
(IF (EQUAL LN 'Z12) 0 
(IF (EQUAL LN 'Z13) 0 
(IF (EQUAL LN 'Z14) 0 
(IF (EQUAL LN 'ZO0) 0 
(IF (EQUAL LN 'ZO1) 0 
(IF (EQUAL LN 'ZO2P) 1 
(IF (EQUAL LN 'ZO2) 0 
(IF (EQUAL LN 'ZO3P) 1 
(IF (EQUAL LN 'ZO3) 0 
0)))))))))))))))))))))))

;Parameter found: F in: (ZF S CONST F XX2)
(DEFN SY-B (LN XX2 XX1 XX0 XY2 XY1 XY0) 
(IF (EQUAL LN 'ZF) (S-CONST F XX2) 
(IF (EQUAL LN 'Z00P) (S-FA-S XX0 XY0
                             (SY-B 'ZF XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'Z00) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z00P (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'Z01P) (S-FA-C XX0 XY0
                             (SY-B 'ZF XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'Z01) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z01P (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'Z02) (IF (EMPTY XX2) (E) (I F (P XX1))) 
(IF (EQUAL LN 'Z03) (IF (EMPTY XX2) (E) (I F (P XY1))) 
(IF (EQUAL LN 'Z04) (IF (EMPTY XX2) (E) (I F (P XX2))) 
(IF (EQUAL LN 'Z05) (IF (EMPTY XX2) (E) (I F (P XY2))) 
(IF (EQUAL LN 'Z10) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z00 (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'Z11P) (S-FA-S (SY-B 'Z02 XX2 XX1 XX0 XY2 XY1 XY0)
                             (SY-B 'Z03 XX2 XX1 XX0 XY2 XY1 XY0)
                             (SY-B 'Z01 XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'Z11) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z11P (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'Z12P) (S-FA-C (SY-B 'Z02 XX2 XX1 XX0 XY2 XY1 XY0)
                             (SY-B 'Z03 XX2 XX1 XX0 XY2 XY1 XY0)
                             (SY-B 'Z01 XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'Z12) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z12P (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'Z13) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z04 (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'Z14) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z05 (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'ZO0) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z10 (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'ZO1) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'Z11 (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'ZO2P) (S-FA-S (SY-B 'Z13 XX2 XX1 XX0 XY2 XY1 XY0)
                             (SY-B 'Z14 XX2 XX1 XX0 XY2 XY1 XY0)
                             (SY-B 'Z12 XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'ZO2) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'ZO2P (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(IF (EQUAL LN 'ZO3P) (S-FA-C (SY-B 'Z13 XX2 XX1 XX0 XY2 XY1 XY0)
                             (SY-B 'Z14 XX2 XX1 XX0 XY2 XY1 XY0)
                             (SY-B 'Z12 XX2 XX1 XX0 XY2 XY1 XY0)) 
(IF (EQUAL LN 'ZO3) (IF (EMPTY XX2) (E)
                        (I F
                           (SY-B 'ZO3P (P XX2) (P XX1) (P XX0) (P XY2)
                                 (P XY1) (P XY0)))) 
(SFIX XX2)))))))))))))))))))))))
((LEX2 (LIST (COUNT XX2) (TOPOR-SY-B LN)))) )

; Note: One way to get the EXPAND-ALWAYS effect is to get a rewrite 
; lemma for each def.  (suggestion from Boyer):
;
;(prove-lemma SY-A-lemma (rewrite) 
; (equal (SY-A LN XX2 XX1 XX0 XY2 XY1 XY0)
;(IF (EQUAL LN 'YF) (S-CONST F XX2) 
;...
;(SFIX XX2)))))))))))))))))))))
;)
;
;(prove-lemma SY-B-lemma (rewrite)
; (equal (SY-B LN XX2 XX1 XX0 XY2 XY1 XY0) 
;(IF (EQUAL LN 'ZF) (S-CONST F XX2) 
;...(SFIX XX2))))))))))))))))))))))))
;)
;
; Tested: works.


;;; CORRECTNESS PROOF, hand generated, although full expansion is 
;;; obvious:

; EQ-A-B:  Corked thms:


; let's try it first one pair at a time:  EQ-A-B-0:
; with Boyer's patch, we can do:
; (push 'sy-a always-open-up) (push 'sy-b always-open-up)
; and skip the expand hint, and it WORKS (no hint at all)!
; (pop always-open-up) (pop always-open-up)

(prove-lemma EQ-A-B-0 ()  
	     (equal (sy-b 'Zo0 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
		    (sy-a 'Yo0c Xx2 Xx1 Xx0 Xy2 Xy1 Xy0))
(; expand hint prepared by-hand but mechanically by unfolding circuit
(expand (sy-a 'Yo0c Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-a 'Yo0c1 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-a 'Yo0c2 (P (P Xx2)) (P (P Xx1)) (P (P Xx0)) (P (P Xy2)) (P (P Xy1)) (P (P Xy0)))
	(sy-a 'Yo0 (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))
	(sy-a 'Yf (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))

	(sy-b 'Zo0 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-b 'Z10 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z00 (P (P Xx2)) (P (P Xx1)) (P (P Xx0)) (P (P Xy2)) (P (P Xy1)) (P (P Xy0)))
	(sy-b 'Z00P (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))
	(sy-b 'Zf (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))
	)
 )
)

; EQ-A-B-1 now succeeds!
; seems to require some EQ-LEN hyps so IC's can trigger on inputs 
; different from Xx2.  We try to put just the ones we need to
; minimize confusion:
; (and (equal (len Xx1) (len Xy1))
;      (equal (len Xy1) (len Xx0))
;      (equal (len Xx0) (len Xy0))
;      (equal (len Xy0) (len Xx2))
;      )
; IT WORKS!!!  A bit ad-hoc, but it works!!!
; And with the Sugar generated EQ-LEN hyp:
;(AND (EQUAL (LEN XX2) (LEN XX1))
;     (EQUAL (LEN XX1) (LEN XX0))
;     (EQUAL (LEN XX0) (LEN XY2))
;     (EQUAL (LEN XY2) (LEN XY1))
;     (EQUAL (LEN XY1) (LEN XY0)))
; it works too!  (a couple seconds more but who cares...)
; and with new&improved systemized EQ-LEN hyp, it works too! (Same
; time, but no need to call linear arithmetic.)
;
; W/ Boyer's patch, replacing the expand hint by above PUSHs works 
; fine!
 
(prove-lemma EQ-A-B-1 ()  
(implies (AND (EQUAL (LEN XX1) (LEN XX0))
	      (EQUAL (LEN XX2) (LEN XX0))
	      (EQUAL (LEN XY0) (LEN XX0))
	      (EQUAL (LEN XY1) (LEN XX0))
	      (EQUAL (LEN XY2) (LEN XX0))
	      )
	 (equal (sy-b 'Zo1 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
		(sy-a 'Yo1c Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)))
(; expand hint prepared by-hand but mechanically by unfolding circuit
(expand (sy-a 'Yo1c Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-a 'Yo1c1 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-a 'Yo1c2 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-a 'Yo1 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y00 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Yf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))

	(sy-b 'Zo1 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-b 'Z11 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z11P (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z02 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z03 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01P (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-b 'Zf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	)
 )
)

; EQ-A-B-2:
; BM fails to get some LEN equalities at the right time in EQ-A-B-2
; hence failing the firings of A2-IC-S-FA-S which would complete 
; the proof.  So we prove these facts separately:
; Again, this is a symptom that we have not succeeeded in making BM
; use the fundamental EQ-LEN hyp right...
;
; W/ Boyer's patch, replacing the expand hint by above PUSHs works
; fine!

(prove-lemma EQ-A-B-2-Bridge1 (rewrite)
(implies (AND 
	   (NOT (EMPTY (P (P XX2))))
	   (NOT (EMPTY (P XX2)))
	   (NOT (EMPTY XX2))
	   (EQUAL (LEN XY2) (LEN XX0))
	   (EQUAL (LEN XY1) (LEN XX0))
	   (EQUAL (LEN XY0) (LEN XX0))
	   (EQUAL (LEN XX2) (LEN XX0))
	   (EQUAL (LEN XX1) (LEN XX0))
	   )
	 (EQUAL (LEN (P (P XX2)))
		(ADD1 (LEN (P (P (P XY2))))))
	 )
((enable LEN))
)

(prove-lemma EQ-A-B-2-Bridge2 (rewrite)
(implies (AND 
	   (NOT (EMPTY (P (P XX2))))
	   (NOT (EMPTY (P XX2)))
	   (NOT (EMPTY XX2))
	   (EQUAL (LEN XY2) (LEN XX0))
	   (EQUAL (LEN XY1) (LEN XX0))
	   (EQUAL (LEN XY0) (LEN XX0))
	   (EQUAL (LEN XX2) (LEN XX0))
	   (EQUAL (LEN XX1) (LEN XX0))
	   )
	 (EQUAL (LEN (P (P (P XX2))))
		(LEN (P (P (P XY2)))))
	 )
((enable LEN) (disable EQ-A-B-2-BRIDGE1)) ; bridges are independent
)
 
(prove-lemma EQ-A-B-2 ()  
(implies (AND (EQUAL (LEN XX1) (LEN XX0))
	      (EQUAL (LEN XX2) (LEN XX0))
	      (EQUAL (LEN XY0) (LEN XX0))
	      (EQUAL (LEN XY1) (LEN XX0))
	      (EQUAL (LEN XY2) (LEN XX0))
	      )
	 (equal (sy-b 'Zo2 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
		(sy-a 'Yo2c Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)))
(; expand hint prepared by-hand but mechanically by unfolding circuit
(expand (sy-a 'Yo2c Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-a 'Yo2c1 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-a 'Yo2c2 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-a 'Yo2 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y10 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y00 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Yf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))

	(sy-b 'Zo2 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-b 'Zo2P (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z12 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z13 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z14 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z12P (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z02 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z03 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z04 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z05 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01P (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-b 'Zf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	)
 )
)

; EQ-A-B-3:
; W/ Boyer's patch, replacing the expand hint by above PUSHs works 
; fine!

(prove-lemma EQ-A-B-3 ()  
(implies (AND (EQUAL (LEN XX1) (LEN XX0))
	      (EQUAL (LEN XX2) (LEN XX0))
	      (EQUAL (LEN XY0) (LEN XX0))
	      (EQUAL (LEN XY1) (LEN XX0))
	      (EQUAL (LEN XY2) (LEN XX0))
	      )
	 (equal (sy-b 'Zo3 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
		(sy-a 'Yo3c Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)))
(; expand hint prepared by-hand but mechanically by unfolding circuit
(expand (sy-a 'Yo3c Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-a 'Yo3c1 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-a 'Yo3c2 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-a 'Yo3 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y10 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y00 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Yf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))

	(sy-b 'Zo3 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-b 'Zo3P (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z12 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z13 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z14 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z12P (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z02 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z03 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z04 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z05 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01P (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-b 'Zf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	)
 )
)

; EQ2-A-B:  UNCorked thms:
; Boyer's always-open-up patch does wonders here too...

; interestingly enough, EQ-A-B-0 did not require EQ-LEN hyp, but 
; EQ2 does not go through without it.. and the 3 bridges:  This is
; GRUESOMELY AD-HOC...

; Note about the bridge: the first hyp in the AND clause is the one 
; used during the existential instantiation...  Also, additional 
; eq-len clauses confuse the application even more.

(prove-lemma EQ2-A-B-0-bridge1 (rewrite)
(IMPLIES (AND (EMPTY (P XX2))
	      (EQUAL (LEN XX2) (LEN XX0))
	      )
	 (EMPTY (P (P (P XX0)))))
((use (STR-len-eq-empty (x (P xx2)) (y (P xx0)))))
)

(prove-lemma EQ2-A-B-0-bridge2 (rewrite)
(IMPLIES (AND (EMPTY (P (P XX2)))
	      (EQUAL (LEN XX2) (LEN XX0))
	      )
	 (EMPTY (P (P (P XX0)))))
((use (STR-len-eq-empty (x (P (P xx2))) (y (P (P xx0))))))
)

(prove-lemma EQ2-A-B-0-bridge3 (rewrite)
(IMPLIES (AND (EMPTY XX2)
	      (EQUAL (LEN XX2) (LEN XX0))
	      )
	 (EMPTY (P (P (P XX0)))))
((use (STR-len-eq-empty (x xx2) (y xx0))))
)

(prove-lemma EQ2-A-B-0 ()  
(implies (AND (EQUAL (LEN XX1) (LEN XX0))
	      (EQUAL (LEN XX2) (LEN XX0))
	      (EQUAL (LEN XY0) (LEN XX0))
	      (EQUAL (LEN XY1) (LEN XX0))
	      (EQUAL (LEN XY2) (LEN XX0))
	      )
(equal 
 (B (B (B (sy-b 'Zo0 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0))))
 (sy-a 'Yo0 (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))
 )
)
(; expand hint prepared by-hand but mechanically by unfolding circuit
(expand	(sy-a 'Yo0 (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))
	(sy-a 'Yf (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))

	(sy-b 'Zo0 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-b 'Z10 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z00 (P (P Xx2)) (P (P Xx1)) (P (P Xx0)) (P (P Xy2)) (P (P Xy1)) (P (P Xy0)))
	(sy-b 'Z00P (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))
	(sy-b 'Zf (P (P (P Xx2))) (P (P (P Xx1))) (P (P (P Xx0))) (P (P (P Xy2))) (P (P (P Xy1))) (P (P (P Xy0))))
	)
 )
)

; EQ2-A-B-1 ALSO uses the bridges...

(prove-lemma EQ2-A-B-1 ()  
(implies (AND (EQUAL (LEN XX1) (LEN XX0))
	      (EQUAL (LEN XX2) (LEN XX0))
	      (EQUAL (LEN XY0) (LEN XX0))
	      (EQUAL (LEN XY1) (LEN XX0))
	      (EQUAL (LEN XY2) (LEN XX0))
	      )
(equal (B (B (B (sy-b 'Zo1 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0))))
       (sy-a 'Yo1 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
       ))
(; expand hint prepared by-hand but mechanically by unfolding circuit
(expand	(sy-a 'Yo1 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y00 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Yf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))

	(sy-b 'Zo1 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-b 'Z11 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z11P (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z02 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z03 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01P (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-b 'Zf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	)
 )
)

; uses both the old and new bridges...

(prove-lemma EQ2-A-B-2 ()  
(implies (AND (EQUAL (LEN XX1) (LEN XX0))
	      (EQUAL (LEN XX2) (LEN XX0))
	      (EQUAL (LEN XY0) (LEN XX0))
	      (EQUAL (LEN XY1) (LEN XX0))
	      (EQUAL (LEN XY2) (LEN XX0))
	      )
(equal (B (B (B (sy-b 'Zo2 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0))))
       (sy-a 'Yo2 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
       ))
(; expand hint prepared by-hand but mechanically by unfolding circuit
(expand	(sy-a 'Yo2 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y10 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y00 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Yf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))

	(sy-b 'Zo2 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-b 'Zo2P (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z12 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z13 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z14 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z12P (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z02 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z03 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z04 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z05 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01P (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-b 'Zf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	)
 )
)

(prove-lemma EQ2-A-B-3 ()  
(implies (AND (EQUAL (LEN XX1) (LEN XX0))
	      (EQUAL (LEN XX2) (LEN XX0))
	      (EQUAL (LEN XY0) (LEN XX0))
	      (EQUAL (LEN XY1) (LEN XX0))
	      (EQUAL (LEN XY2) (LEN XX0))
	      )
(equal (B (B (B (sy-b 'Zo3 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0))))
       (sy-a 'Yo3 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
       ))
(; expand hint prepared by-hand but mechanically by unfolding circuit
(expand (sy-a 'Yo3 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y10 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Y00 (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-a 'Yf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))

	(sy-b 'Zo3 Xx2 Xx1 Xx0 Xy2 Xy1 Xy0)
	(sy-b 'Zo3P (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z12 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z13 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z14 (P Xx2) (P Xx1) (P Xx0) (P Xy2) (P Xy1) (P Xy0))
	(sy-b 'Z12P (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z02 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z03 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z04 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z05 (P(P Xx2)) (P(P Xx1)) (P(P Xx0)) (P(P Xy2)) (P(P Xy1)) (P(P Xy0)))
	(sy-b 'Z01P (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	(sy-b 'Zf (P(P(P Xx2))) (P(P(P Xx1))) (P(P(P Xx0))) (P(P(P Xy2))) (P(P(P Xy1))) (P(P(P Xy0))))
	)
 )
)

; eof: pplfadd.bm
;))
