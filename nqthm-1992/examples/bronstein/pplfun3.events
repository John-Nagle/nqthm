#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)

; pplfun3.bm is our 2nd PIPELINE proof: it generalizes Inc to FUN1.
; 
; Note: we run into trouble w/ R-loop corking, because of the DCL'd function.
; A partial kludge is to:
; (LOAD "Comb/comb_fun1_s.bm") , i.e. with the _s extension, getting an actual
; symbolic value (a list).  But we really need full BY NAME evaluation..

;;; (Sugared) Circuits:
#|
(setq A '(SY-A (x)
(Y1 S Fun1 x)
(Y2 S Fun1 Y1)
(Y3 S Fun1 Y2)
; and the cork:
(Yc2 R (FUN1 (FUN1 0)) Y3)
(Yc1 R (FUN1 0) Yc2)
(Yout R 0 Yc1)
))

(setq B '(SY-B (x)
(Z1 S Fun1 x)
(Z2 R 0 Z1)
(Z3 S Fun1 Z2)
(Z4 R 0 Z3)
(Z5 S Fun1 Z4)
(Zout R 0 Z5)
))

(setq pplfun3 '( |#
; BM DEFINITIONS and A2 LEMMAS, generated by BMSYSD:
; comb_fun1.bm: Fun1 combinational element
; U7-DONE

; arbitrary Char-Fun of arity 1:
(dcl Fun1 (u))

; Everything below generated by: (bmcomb 'Fun1 '() '(x))

(DEFN S-FUN1 (X) (IF (EMPTY X) (E) (A (S-FUN1 (P X)) (FUN1 (L X)))))

;; A2-Begin-S-FUN1

(PROVE-LEMMA A2-EMPTY-S-FUN1 (REWRITE)
    (EQUAL (EMPTY (S-FUN1 X)) (EMPTY X)) ((DISABLE FUN1)))

(PROVE-LEMMA A2-E-S-FUN1 (REWRITE)
    (EQUAL (EQUAL (S-FUN1 X) (E)) (EMPTY X))
    ((DISABLE S-FUN1 A2-EMPTY-S-FUN1) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-FUN1))))

(PROVE-LEMMA A2-LP-S-FUN1 (REWRITE) (EQUAL (LEN (S-FUN1 X)) (LEN X))
    ((DISABLE FUN1) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-FUN1 (REWRITE) (EQLEN (S-FUN1 X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-FUN1)))

(PROVE-LEMMA A2-IC-S-FUN1 (REWRITE)
    (EQUAL (S-FUN1 (I C_X X)) (I (FUN1 C_X) (S-FUN1 X)))
    ((ENABLE I) (DISABLE STR-A-I FUN1)))

(PROVE-LEMMA A2-LC-S-FUN1 (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-FUN1 X)) (FUN1 (L X))))
    ((DISABLE FUN1) (EXPAND (S-FUN1 X))))

(PROVE-LEMMA A2-PC-S-FUN1 (REWRITE)
    (EQUAL (P (S-FUN1 X)) (S-FUN1 (P X))) ((DISABLE FUN1)))

(PROVE-LEMMA A2-HC-S-FUN1 (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-FUN1 X)) (FUN1 (H X))))
    ((DISABLE FUN1 S-FUN1) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-FUN1 (REWRITE)
    (EQUAL (B (S-FUN1 X)) (S-FUN1 (B X))) ((DISABLE FUN1) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-FUN1 (REWRITE)
    (EQUAL (BN N (S-FUN1 X)) (S-FUN1 (BN N X)))
    ((DISABLE FUN1 S-FUN1)))

;; A2-End-S-FUN1

; eof:comb_fun1.bm
 

(DEFN TOPOR-SY-A (LN) 
(IF (EQUAL LN 'Y1) 1 
(IF (EQUAL LN 'Y2) 2 
(IF (EQUAL LN 'Y3) 3 
(IF (EQUAL LN 'YC2) 0 
(IF (EQUAL LN 'YC1) 0 
(IF (EQUAL LN 'YOUT) 0 
0)))))))

(DEFN SY-A (LN X) 
(IF (EQUAL LN 'Y1) (S-FUN1 X) 
(IF (EQUAL LN 'Y2) (S-FUN1 (SY-A 'Y1 X)) 
(IF (EQUAL LN 'Y3) (S-FUN1 (SY-A 'Y2 X)) 
(IF (EQUAL LN 'YC2) (IF (EMPTY X) (E)
                        (I (FUN1 (FUN1 0)) (SY-A 'Y3 (P X)))) 
(IF (EQUAL LN 'YC1) (IF (EMPTY X) (E) (I (FUN1 0) (SY-A 'YC2 (P X)))) 
(IF (EQUAL LN 'YOUT) (IF (EMPTY X) (E) (I 0 (SY-A 'YC1 (P X)))) 
(SFIX X)))))))
((LEX2 (LIST (COUNT X) (TOPOR-SY-A LN)))) )

;; A2-Begin-SY-A

(PROVE-LEMMA A2-EMPTY-SY-A (REWRITE)
    (EQUAL (EMPTY (SY-A LN X)) (EMPTY X)) ((DISABLE S-FUN1)))

(PROVE-LEMMA A2-E-SY-A (REWRITE)
    (EQUAL (EQUAL (SY-A LN X) (E)) (EMPTY X))
    ((DISABLE SY-A A2-EMPTY-SY-A) (ENABLE EMPTY) (USE (A2-EMPTY-SY-A))))

(PROVE-LEMMA A2-LP-SY-A (REWRITE) (EQUAL (LEN (SY-A LN X)) (LEN X))
    ((DISABLE LEN S-FUN1) (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-A (REWRITE) (EQLEN (SY-A LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-A)))

(PROVE-LEMMA A2-PC-SY-A (REWRITE)
    (EQUAL (P (SY-A LN X)) (SY-A LN (P X)))
    ((DISABLE S-FUN1 A2-IC-S-FUN1)))

;; A2-End-SY-A

(DEFN TOPOR-SY-B (LN) 
(IF (EQUAL LN 'Z1) 1 
(IF (EQUAL LN 'Z2) 0 
(IF (EQUAL LN 'Z3) 1 
(IF (EQUAL LN 'Z4) 0 
(IF (EQUAL LN 'Z5) 1 
(IF (EQUAL LN 'ZOUT) 0 
0)))))))

(DEFN SY-B (LN X) 
(IF (EQUAL LN 'Z1) (S-FUN1 X) 
(IF (EQUAL LN 'Z2) (IF (EMPTY X) (E) (I 0 (SY-B 'Z1 (P X)))) 
(IF (EQUAL LN 'Z3) (S-FUN1 (SY-B 'Z2 X)) 
(IF (EQUAL LN 'Z4) (IF (EMPTY X) (E) (I 0 (SY-B 'Z3 (P X)))) 
(IF (EQUAL LN 'Z5) (S-FUN1 (SY-B 'Z4 X)) 
(IF (EQUAL LN 'ZOUT) (IF (EMPTY X) (E) (I 0 (SY-B 'Z5 (P X)))) 
(SFIX X)))))))
((LEX2 (LIST (COUNT X) (TOPOR-SY-B LN)))) )

;; A2-Begin-SY-B

(PROVE-LEMMA A2-EMPTY-SY-B (REWRITE)
    (EQUAL (EMPTY (SY-B LN X)) (EMPTY X)) ((DISABLE S-FUN1)))

(PROVE-LEMMA A2-E-SY-B (REWRITE)
    (EQUAL (EQUAL (SY-B LN X) (E)) (EMPTY X))
    ((DISABLE SY-B A2-EMPTY-SY-B) (ENABLE EMPTY) (USE (A2-EMPTY-SY-B))))

(PROVE-LEMMA A2-LP-SY-B (REWRITE) (EQUAL (LEN (SY-B LN X)) (LEN X))
    ((DISABLE LEN S-FUN1) (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-B (REWRITE) (EQLEN (SY-B LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-B)))

(PROVE-LEMMA A2-PC-SY-B (REWRITE)
    (EQUAL (P (SY-B LN X)) (SY-B LN (P X)))
    ((DISABLE S-FUN1 A2-IC-S-FUN1)))

;; A2-End-SY-B

;;; CORRECTNESS PROOF (hand generated, dreamer!):


; EQ-A-B: 
;   We start out directly with the expansion list form pplinc3.

(prove-lemma EQ-A-B ()
(equal (sy-b 'Zout x)
       (sy-a 'Yout x))
((disable LEN) (enable STR-add1-len-P2)
 (expand (sy-b 'Zout x)
	 (SY-B 'Z5 (P X))
	 (SY-B 'Z4 (P X))
	 (SY-B 'Z3 (P (P X)))
	 (SY-B 'Z2 (P (P X)))
	 (sy-a 'Yout x)
	 (SY-A 'YC1 (P X))
	 (SY-A 'YC2 (P (P X)))
	 (SY-A 'Y3 (P (P (P X))))
	 (SY-A 'Y2 (P (P (P X))))
	 )
 )
)


; eof: pplfun3.bm
;))
