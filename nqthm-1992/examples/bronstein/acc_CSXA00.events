#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)

; acc_CSXA00.bm
;   . definition of circuit (only 1 here) [assumes stringadd.bm] : 
;	- no hint: FAIL
;	- w/ TOPOR:  OK!
;   . proof of equivalence w/ Spec(s): OK!
; NOTE: the above comments date back to the hand-generation time, when we
;       were still trying to FIND a way to feed things to BM.  They are kept
;       here for historical purposes only...

;;; DEFINITION OF CIRCUIT:
#|
(setq sysd '(SY-ACC (x)
(Yacc S Plus x Yacc2)
(Yacc2 R 0 Yacc)
))

(setq acc_CSXA00 '(
-rsb |#
; BM DEFINITIONS and A2 LEMMAS, generated by BMSYSD:
; comb_plus.bm: Plus combinational element.
; U7-DONE

;   no character function definition since BM already knows about Plus..

; Everything below generated by:     (bmcomb 'plus '() '(x y))

(DEFN S-PLUS (X Y)
      (IF (EMPTY X) (E) (A (S-PLUS (P X) (P Y)) (PLUS (L X) (L Y)))))

;; A2-Begin-S-PLUS

(PROVE-LEMMA A2-EMPTY-S-PLUS (REWRITE)
    (EQUAL (EMPTY (S-PLUS X Y)) (EMPTY X)) ((DISABLE PLUS)))

(PROVE-LEMMA A2-E-S-PLUS (REWRITE)
    (EQUAL (EQUAL (S-PLUS X Y) (E)) (EMPTY X))
    ((DISABLE S-PLUS A2-EMPTY-S-PLUS) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-PLUS))))

(PROVE-LEMMA A2-LP-S-PLUS (REWRITE) (EQUAL (LEN (S-PLUS X Y)) (LEN X))
    ((DISABLE PLUS) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-PLUS (REWRITE) (EQLEN (S-PLUS X Y) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-PLUS)))

(PROVE-LEMMA A2-IC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (S-PLUS (I C_X X) (I C_Y Y))
                    (I (PLUS C_X C_Y) (S-PLUS X Y))))
    ((ENABLE I LEN) (DISABLE STR-A-I PLUS)))

(PROVE-LEMMA A2-LC-S-PLUS (REWRITE)
    (IMPLIES (NOT (EMPTY X))
             (EQUAL (L (S-PLUS X Y)) (PLUS (L X) (L Y))))
    ((DISABLE PLUS) (EXPAND (S-PLUS X Y))))

(PROVE-LEMMA A2-PC-S-PLUS (REWRITE)
    (EQUAL (P (S-PLUS X Y)) (S-PLUS (P X) (P Y))) ((DISABLE PLUS)))

(PROVE-LEMMA A2-HC-S-PLUS (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X)) (EQUAL (LEN X) (LEN Y)))
             (EQUAL (H (S-PLUS X Y)) (PLUS (H X) (H Y))))
    ((DISABLE PLUS S-PLUS) (ENABLE H LEN) (INDUCT (S-PLUS X Y))))

(PROVE-LEMMA A2-BC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (B (S-PLUS X Y)) (S-PLUS (B X) (B Y))))
    ((DISABLE PLUS) (ENABLE B LEN) (INDUCT (S-PLUS X Y))))

(PROVE-LEMMA A2-BNC-S-PLUS (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (BN N (S-PLUS X Y)) (S-PLUS (BN N X) (BN N Y))))
    ((DISABLE PLUS S-PLUS)))

;; A2-End-S-PLUS

; eof:comb_plus.bm


(DEFN TOPOR-SY-ACC (LN) 
(IF (EQUAL LN 'YACC) 1 
(IF (EQUAL LN 'YACC2) 0 
0)))

(DEFN SY-ACC (LN X) 
(IF (EQUAL LN 'YACC) (S-PLUS X (SY-ACC 'YACC2 X)) 
(IF (EQUAL LN 'YACC2) (IF (EMPTY X) (E) (I 0 (SY-ACC 'YACC (P X)))) 
(SFIX X)))
((LEX2 (LIST (COUNT X) (TOPOR-SY-ACC LN)))) )

;; A2-Begin-SY-ACC

(PROVE-LEMMA A2-EMPTY-SY-ACC (REWRITE)
    (EQUAL (EMPTY (SY-ACC LN X)) (EMPTY X)) ((DISABLE S-PLUS)))

(PROVE-LEMMA A2-E-SY-ACC (REWRITE)
    (EQUAL (EQUAL (SY-ACC LN X) (E)) (EMPTY X))
    ((DISABLE SY-ACC A2-EMPTY-SY-ACC) (ENABLE EMPTY)
     (USE (A2-EMPTY-SY-ACC))))

(PROVE-LEMMA A2-LP-SY-ACC (REWRITE) (EQUAL (LEN (SY-ACC LN X)) (LEN X))
    ((DISABLE LEN S-PLUS) (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-ACC (REWRITE) (EQLEN (SY-ACC LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-ACC)))

(PROVE-LEMMA A2-PC-SY-ACC (REWRITE)
    (EQUAL (P (SY-ACC LN X)) (SY-ACC LN (P X)))
    ((DISABLE S-PLUS A2-IC-S-PLUS)))

;; A2-End-SY-ACC

;;; SPEC definition (hand, of course):

(defn numer-acc (x)
  (if (empty x)
      0
      (plus (numer-acc (P x)) (L x))))

; this is the standard extension from last-char-fun to MLP-string-fun.
(defn spec-acc (x)
  (if (empty x)
      (e)
      (A (spec-acc (P x))
	 (numer-acc x))))

;;; Circuit CORRECTNESS:

; Acc-correct-ax-help makes the proof of acc_correct_ax much easier, but is
; not necessary.
;
;(prove-lemma acc-correct-ax-help (rewrite)
;(implies (not (empty x))
;	 (equal (L (sy-acc 'yacc x))
;		(plus (numer-acc (P x)) (L x))))
;((induct (induct-P x))
; (expand (sy-acc 'yacc x))
;)
;)

; Acc-correct-ax is a "predicative correctness statement", i.e. what we would
; do if we didn't have functional equality as a specification method, but 
; instead used a purely axiomatic approach.
; BM finds the proof on its own, but still needs quite a few generalizations...

(prove-lemma acc-correct-ax (rewrite)
(implies (not (empty x))
	 (equal (L (sy-acc 'Yacc x))
		(numer-acc x)))
((expand (sy-acc 'Yacc x))
 )
)

; to go to a functional equality once we have the "last" (ax) statement is
; a trivial induction, if we start out with an P-L split which is unnatural
; for BM, so we force it w/ a USE hint of A-p-l-split

(prove-lemma A-P-L-split () ; USE hints only.
(implies (not (empty x))
	 (equal (sy-acc 'Yacc x)
		(A (P (sy-acc 'Yacc x))
		   (L (sy-acc 'Yacc x)) )))
((disable acc-correct-ax a2-pc-sy-acc)
 )
)

(prove-lemma acc-correct (rewrite)
(equal (sy-acc 'Yacc x)
       (spec-acc x))
((induct (induct-P x))
 (use (A-P-L-split))
 (disable A-P-L numer-acc sy-acc EMPTY) ; EMPTY hint was discovered in macc.
 )
)

; eof: acc_CSXA00.bm
; -rsb ))
