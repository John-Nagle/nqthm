#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)

; counter.bm: a simple clock counter, x is the clock.
;     similar to acc when we take our output from the combinational elt.
;
; RESULTS:
; if we look at the combinational output (Ycomb)
;   with initial value of reg: 0 , OK can prove Ycomb = len . [log: counter]
;   with initial value of reg: 1 , fails (expectedly) in COUNT-CORRECT-AX
;        in case p x = e, [log: counter2] 
; if we look at Yreg (i.e. register output) then:
;   with initial value of reg: 0 , fails (expectedly) in COUNT-CORRECT-AX
;        in case p x = e, [log: counter4] 
;   with initial value of reg: 1 , OK can prove Yreg = len . [log: counter3]
; ANALYSIS:
;   The issue is a confusion of the intent of the SPEC: if we are counting the
; number of "pulses" then indeed we can look at the Reg-output, and initialize
; it with zero, because #pulse = len(clk) - 1 = len(any input string) - 1 .
; In other words, the issue is with NUMER-COUNT x =LEN x.  If we want to count
; the number of pulses, then we should have number-count x = len x -1, and
; then initialize w/ 0 and look at Reg-out. Check: OK!
; CONCLUSION:
;   The model (essentially Mealy) is fine even for looking at Reg-outs, but
; be careful of translating specs involving number of "clock ticks".  My tics
; are really "periods", and the engineer's tick are "pulses" of which there are
; always one less when based on an operational semantics looking at things 
; "at the end of clock periods".
;
; COMPARISON w/ PAILLET, and PAILLET inferred spec:

;;; DEFINITION OF CIRCUIT:
#|
(setq sysd '(sy-count (x)
(Ycomb S Inc Yreg)
(Yreg R 0 Ycomb)
))

(setq counter '( |#
; BM DEFINITIONS and A2 LEMMAS, generated by BMSYSD:
; comb_inc.bm: INCrement combinational element
; U7-DONE

(defn Inc (u) (add1 u))

; Everything below generated by: (bmcomb 'inc '() '(x))

(DEFN S-INC (X) (IF (EMPTY X) (E) (A (S-INC (P X)) (INC (L X)))))

;; A2-Begin-S-INC

(PROVE-LEMMA A2-EMPTY-S-INC (REWRITE)
    (EQUAL (EMPTY (S-INC X)) (EMPTY X)) ((DISABLE INC)))

(PROVE-LEMMA A2-E-S-INC (REWRITE)
    (EQUAL (EQUAL (S-INC X) (E)) (EMPTY X))
    ((DISABLE S-INC A2-EMPTY-S-INC) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-INC))))

(PROVE-LEMMA A2-LP-S-INC (REWRITE) (EQUAL (LEN (S-INC X)) (LEN X))
    ((DISABLE INC) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-INC (REWRITE) (EQLEN (S-INC X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-INC)))

(PROVE-LEMMA A2-IC-S-INC (REWRITE)
    (EQUAL (S-INC (I C_X X)) (I (INC C_X) (S-INC X)))
    ((ENABLE I) (DISABLE STR-A-I INC)))

(PROVE-LEMMA A2-LC-S-INC (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-INC X)) (INC (L X))))
    ((DISABLE INC) (EXPAND (S-INC X))))

(PROVE-LEMMA A2-PC-S-INC (REWRITE) (EQUAL (P (S-INC X)) (S-INC (P X)))
    ((DISABLE INC)))

(PROVE-LEMMA A2-HC-S-INC (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-INC X)) (INC (H X))))
    ((DISABLE INC S-INC) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-INC (REWRITE) (EQUAL (B (S-INC X)) (S-INC (B X)))
    ((DISABLE INC) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-INC (REWRITE)
    (EQUAL (BN N (S-INC X)) (S-INC (BN N X))) ((DISABLE INC S-INC)))

;; A2-End-S-INC

; eof:comb_inc.bm


(DEFN TOPOR-SY-COUNT (LN) 
(IF (EQUAL LN 'YCOMB) 1 
(IF (EQUAL LN 'YREG) 0 
0)))

(DEFN SY-COUNT (LN X) 
(IF (EQUAL LN 'YCOMB) (S-INC (SY-COUNT 'YREG X)) 
(IF (EQUAL LN 'YREG) (IF (EMPTY X) (E) (I 0 (SY-COUNT 'YCOMB (P X)))) 
(SFIX X)))
((LEX2 (LIST (COUNT X) (TOPOR-SY-COUNT LN)))) )

;; A2-Begin-SY-COUNT

(PROVE-LEMMA A2-EMPTY-SY-COUNT (REWRITE)
    (EQUAL (EMPTY (SY-COUNT LN X)) (EMPTY X)) ((DISABLE S-INC)))

(PROVE-LEMMA A2-E-SY-COUNT (REWRITE)
    (EQUAL (EQUAL (SY-COUNT LN X) (E)) (EMPTY X))
    ((DISABLE SY-COUNT A2-EMPTY-SY-COUNT) (ENABLE EMPTY)
     (USE (A2-EMPTY-SY-COUNT))))

(PROVE-LEMMA A2-LP-SY-COUNT (REWRITE)
    (EQUAL (LEN (SY-COUNT LN X)) (LEN X))
    ((DISABLE LEN S-INC) (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-COUNT (REWRITE) (EQLEN (SY-COUNT LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-COUNT)))

(PROVE-LEMMA A2-PC-SY-COUNT (REWRITE)
    (EQUAL (P (SY-COUNT LN X)) (SY-COUNT LN (P X)))
    ((DISABLE S-INC A2-IC-S-INC)))

;; A2-End-SY-COUNT

;;; SPEC definition:
; FIRST (misunderstood) spec:
; note: written when looking at the combinational output..
;
;(defn numer-count (x)
;  (if (empty x)
;      0
;      (inc (numer-count (p x)) )))
;
; intent verification: should have numer-count = len; prove but don't use.
;(prove-lemma numer-count-len ()
;(equal (numer-count x) (len x))
;)

(defn numer-count (x)
  (if (empty x)
      0
      (sub1 (len x))))   ;a cheap way: (len (p x))

; this is the standard extension from last-char-fun to MLP-string-fun, 
; see theta.bm .
(defn spec-count (x)
  (if (empty x)
      (e)
      (A (spec-count (p x))
	   (numer-count x))))

; Paillet's spec do not define an additional function, just a relation
; that must be verified by the circuit output. See below.

;;; Circuit CORRECTNESS:
; THIS is where it matters which line we take as output!

; Count-correct-ax is a "predicative correctness statement", i.e. what we would
; do if we didn't have functional equality as a specification method, but 
; instead used a purely axiomatic approach.

(prove-lemma count-correct-ax (rewrite)
(implies (not (empty x))
	 (equal (l (sy-count 'Yreg x))
		(numer-count x)))
((induct (induct-P x))
 (enable len) ; of course since numer-count is defined from it.
; note: these hints necessary w/ old spec, i.e. =len x
; (expand (sy-count 'Yreg x))
; (enable STR-l-I2) ; NECESSARY here because we want to introduce a case
                     ; disjunction BEFORE the equality hypothesis is used..
)
)

; to go to a functional equality once we have the "last" (ax) statement is
; a trivial induction, if we start out with an P-L split which is unnatural
; for BM, so we force it w/ a USE hint of A-p-l-split

(prove-lemma A-p-l-split () ; USE hints only.
(implies (not (empty x))
	 (equal (sy-count 'Yreg x)
		(A (p (sy-count 'Yreg x))
		   (l (sy-count 'Yreg x)) )))
((disable count-correct-ax a2-pc-sy-count)
 )
)

(prove-lemma count-correct (rewrite)
(equal (sy-count 'Yreg x)
       (spec-count x))
((induct (induct-P x))
 (use (A-p-l-split))
 (disable A-P-L numer-count sy-count empty)
 )
)

; PAILLET CORRECTNESS:
(disable count-correct)
(disable count-correct-ax)

; count-paillet-correct obtained trivially (without recursion) as expected.
(prove-lemma count-paillet-correct ()
(implies (not (empty x))
	 (equal (sy-count 'Yreg x)
		(I 0 (S-Inc (P (sy-count 'Yreg x))))))
)

; my (more intuitive) version of "simple" (no recursion req'd) correctness:
(prove-lemma count-correct-simple ()
(implies (and (not (empty x)) (not (empty (P x))))
	 (equal (L (sy-count 'Yreg x))
		(inc (L (P (sy-count 'Yreg x))))))
)

; eof: counter.bm
;))
