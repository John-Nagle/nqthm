#|

 Copyright (C) 1994 by Alex Bronstein and Carolyn Talcott.  All Rights
 Reserved.

 You may copy and distribute verbatim copies of this Nqthm-1992 event script as
 you receive it, in any medium, including embedding it verbatim in derivative
 works, provided that you conspicuously and appropriately publish on each copy
 a valid copyright notice "Copyright (C) 1994 by Alex Bronstein and Carolyn
 Talcott.  All Rights Reserved."

 NO WARRANTY

 Alex Bronstein and Carolyn Talcott PROVIDE ABSOLUTELY NO WARRANTY.  THE EVENT
 SCRIPT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
 IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 THE QUALITY AND PERFORMANCE OF THE SCRIPT IS WITH YOU.  SHOULD THE SCRIPT
 PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 CORRECTION.

 IN NO EVENT WILL Alex Bronstein or Carolyn Talcott BE LIABLE TO YOU FOR ANY
 DAMAGES, ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THIS SCRIPT
 (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
 OR LOSSES SUSTAINED BY THIRD PARTIES), EVEN IF YOU HAVE ADVISED US OF THE
 POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mlp" t)
; bcdSbi.bm: = bcdS, but with integer bits instead of booleans on the wires.
;   LESSONS:
;    - the quality of the proofs is not degraded, we usually get the same
;      case splits, except sometime with one or two more cases.
;    - the timing is degraded by 50% on average, with a range of 20% to 300%
; So in general we should stick (or start) with a boolean model of 0 and 1,
; but if for some crucial reason we have to go numerical, it's no major
; disaster.
;

;;; CIRCUIT in SUGARED form:
#|
(setq sysd '(sy-BCDSBI (x)
(Y01 S bnot x)
(Y02 S bnot x)
(Y03 S bnot YR3)
(Y04 S bnot YR1)
(Y05 S bnot YR2)
(Y06 S bnot YR3)
(Y07 S bnot YR1)
(Y08 S bnot YR3)
(Y11 S band3 Y01 YR1 YR3)
(Y12 S band3 Y02 YR2 Y03)
(Y13 S band3 Y04 Y05 Y06)
(Y14 S band3 x Y07 Y08)
(Y15 S band3 x YR1 YR3)
(Y21 S bor Y11 Y12)
(Y22 S bor Y13 Y14)
(Y23 S bor YR2 Y15)
(YR1 R 0 Y21)
(YR2 R 0 Y22)
(YR3 R 0 Y23)
(Y31 S bnot YR1)
(Y32 S bnot YR2)
(Y41 S band4 x Y31 Y32 YR3)
(Yout S bnot Y41)
))

(setq bcdSbi '( |#
; this load entered by hand, because needed in the SPEC
; comb_band.bm: Binary And combinational element
; U7-DONE

(defn band (u v)
  (if (or (equal u 0) (equal v 0))
      0
      1))
	   
; Everything below generated by: (bmcomb 'band '() '(x y))

(DEFN S-BAND (X Y)
      (IF (EMPTY X) (E) (A (S-BAND (P X) (P Y)) (BAND (L X) (L Y)))))

;; A2-Begin-S-BAND

(PROVE-LEMMA A2-EMPTY-S-BAND (REWRITE)
    (EQUAL (EMPTY (S-BAND X Y)) (EMPTY X)) ((DISABLE BAND)))

(PROVE-LEMMA A2-E-S-BAND (REWRITE)
    (EQUAL (EQUAL (S-BAND X Y) (E)) (EMPTY X))
    ((DISABLE S-BAND A2-EMPTY-S-BAND) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-BAND))))

(PROVE-LEMMA A2-LP-S-BAND (REWRITE) (EQUAL (LEN (S-BAND X Y)) (LEN X))
    ((DISABLE BAND) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-BAND (REWRITE) (EQLEN (S-BAND X Y) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-BAND)))

(PROVE-LEMMA A2-IC-S-BAND (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (S-BAND (I C_X X) (I C_Y Y))
                    (I (BAND C_X C_Y) (S-BAND X Y))))
    ((ENABLE I LEN) (DISABLE STR-A-I BAND)))

(PROVE-LEMMA A2-LC-S-BAND (REWRITE)
    (IMPLIES (NOT (EMPTY X))
             (EQUAL (L (S-BAND X Y)) (BAND (L X) (L Y))))
    ((DISABLE BAND) (EXPAND (S-BAND X Y))))

(PROVE-LEMMA A2-PC-S-BAND (REWRITE)
    (EQUAL (P (S-BAND X Y)) (S-BAND (P X) (P Y))) ((DISABLE BAND)))

(PROVE-LEMMA A2-HC-S-BAND (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X)) (EQUAL (LEN X) (LEN Y)))
             (EQUAL (H (S-BAND X Y)) (BAND (H X) (H Y))))
    ((DISABLE BAND S-BAND) (ENABLE H LEN) (INDUCT (S-BAND X Y))))

(PROVE-LEMMA A2-BC-S-BAND (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (B (S-BAND X Y)) (S-BAND (B X) (B Y))))
    ((DISABLE BAND) (ENABLE B LEN) (INDUCT (S-BAND X Y))))

(PROVE-LEMMA A2-BNC-S-BAND (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (BN N (S-BAND X Y)) (S-BAND (BN N X) (BN N Y))))
    ((DISABLE BAND S-BAND)))

;; A2-End-S-BAND

; eof:comb_band.bm


; BM DEFINITIONS and A2 LEMMAS, generated by BMSYSD:
; comb_band3.bm: Binary And3 combinational element
; U7-DONE

(defn band3 (u1 u2 u3)
  (if (or (equal u1 0) (equal u2 0) (equal u3 0))
      0
      1))
	   
; Everything below generated by: (bmcomb 'band3 '() '(x1 x2 x3))

(DEFN S-BAND3 (X1 X2 X3)
      (IF (EMPTY X1) (E)
          (A (S-BAND3 (P X1) (P X2) (P X3))
             (BAND3 (L X1) (L X2) (L X3)))))

;; A2-Begin-S-BAND3

(PROVE-LEMMA A2-EMPTY-S-BAND3 (REWRITE)
    (EQUAL (EMPTY (S-BAND3 X1 X2 X3)) (EMPTY X1)) ((DISABLE BAND3)))

(PROVE-LEMMA A2-E-S-BAND3 (REWRITE)
    (EQUAL (EQUAL (S-BAND3 X1 X2 X3) (E)) (EMPTY X1))
    ((DISABLE S-BAND3 A2-EMPTY-S-BAND3) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-BAND3))))

(PROVE-LEMMA A2-LP-S-BAND3 (REWRITE)
    (EQUAL (LEN (S-BAND3 X1 X2 X3)) (LEN X1))
    ((DISABLE BAND3) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-BAND3 (REWRITE) (EQLEN (S-BAND3 X1 X2 X3) X1)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-BAND3)))

(PROVE-LEMMA A2-IC-S-BAND3 (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3)))
             (EQUAL (S-BAND3 (I C_X1 X1) (I C_X2 X2) (I C_X3 X3))
                    (I (BAND3 C_X1 C_X2 C_X3) (S-BAND3 X1 X2 X3))))
    ((ENABLE I LEN) (DISABLE STR-A-I BAND3)
     (INDUCT (S-BAND3 X1 X2 X3))))

(PROVE-LEMMA A2-LC-S-BAND3 (REWRITE)
    (IMPLIES (NOT (EMPTY X1))
             (EQUAL (L (S-BAND3 X1 X2 X3))
                    (BAND3 (L X1) (L X2) (L X3))))
    ((DISABLE BAND3) (EXPAND (S-BAND3 X1 X2 X3))))

(PROVE-LEMMA A2-PC-S-BAND3 (REWRITE)
    (EQUAL (P (S-BAND3 X1 X2 X3)) (S-BAND3 (P X1) (P X2) (P X3)))
    ((DISABLE BAND3)))

(PROVE-LEMMA A2-HC-S-BAND3 (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X1))
                  (AND (EQUAL (LEN X1) (LEN X2))
                       (EQUAL (LEN X2) (LEN X3))))
             (EQUAL (H (S-BAND3 X1 X2 X3))
                    (BAND3 (H X1) (H X2) (H X3))))
    ((DISABLE BAND3 S-BAND3) (ENABLE H LEN)
     (INDUCT (S-BAND3 X1 X2 X3))))

(PROVE-LEMMA A2-BC-S-BAND3 (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3)))
             (EQUAL (B (S-BAND3 X1 X2 X3))
                    (S-BAND3 (B X1) (B X2) (B X3))))
    ((DISABLE BAND3) (ENABLE B LEN) (INDUCT (S-BAND3 X1 X2 X3))))

(PROVE-LEMMA A2-BNC-S-BAND3 (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3)))
             (EQUAL (BN N (S-BAND3 X1 X2 X3))
                    (S-BAND3 (BN N X1) (BN N X2) (BN N X3))))
    ((DISABLE BAND3 S-BAND3)))

;; A2-End-S-BAND3

; eof:comb_band3.bm

; comb_bor.bm: Binary Or combinational element
; U7-DONE

(defn bor (u v)
  (if (and (equal u 0) (equal v 0))
      0
      1))
	   
; Everything below generated by: (bmcomb 'bor '() '(x y))

(DEFN S-BOR (X Y)
      (IF (EMPTY X) (E) (A (S-BOR (P X) (P Y)) (BOR (L X) (L Y)))))

;; A2-Begin-S-BOR

(PROVE-LEMMA A2-EMPTY-S-BOR (REWRITE)
    (EQUAL (EMPTY (S-BOR X Y)) (EMPTY X)) ((DISABLE BOR)))

(PROVE-LEMMA A2-E-S-BOR (REWRITE)
    (EQUAL (EQUAL (S-BOR X Y) (E)) (EMPTY X))
    ((DISABLE S-BOR A2-EMPTY-S-BOR) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-BOR))))

(PROVE-LEMMA A2-LP-S-BOR (REWRITE) (EQUAL (LEN (S-BOR X Y)) (LEN X))
    ((DISABLE BOR) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-BOR (REWRITE) (EQLEN (S-BOR X Y) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-BOR)))

(PROVE-LEMMA A2-IC-S-BOR (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (S-BOR (I C_X X) (I C_Y Y))
                    (I (BOR C_X C_Y) (S-BOR X Y))))
    ((ENABLE I LEN) (DISABLE STR-A-I BOR)))

(PROVE-LEMMA A2-LC-S-BOR (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-BOR X Y)) (BOR (L X) (L Y))))
    ((DISABLE BOR) (EXPAND (S-BOR X Y))))

(PROVE-LEMMA A2-PC-S-BOR (REWRITE)
    (EQUAL (P (S-BOR X Y)) (S-BOR (P X) (P Y))) ((DISABLE BOR)))

(PROVE-LEMMA A2-HC-S-BOR (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X)) (EQUAL (LEN X) (LEN Y)))
             (EQUAL (H (S-BOR X Y)) (BOR (H X) (H Y))))
    ((DISABLE BOR S-BOR) (ENABLE H LEN) (INDUCT (S-BOR X Y))))

(PROVE-LEMMA A2-BC-S-BOR (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (B (S-BOR X Y)) (S-BOR (B X) (B Y))))
    ((DISABLE BOR) (ENABLE B LEN) (INDUCT (S-BOR X Y))))

(PROVE-LEMMA A2-BNC-S-BOR (REWRITE)
    (IMPLIES (EQUAL (LEN X) (LEN Y))
             (EQUAL (BN N (S-BOR X Y)) (S-BOR (BN N X) (BN N Y))))
    ((DISABLE BOR S-BOR)))

;; A2-End-S-BOR

; eof:comb_bor.bm

; comb_band4.bm: Binary And4 combinational element
; U7-DONE

(defn band4 (u1 u2 u3 u4)
  (if (or (equal u1 0) (equal u2 0) (equal u3 0) (equal u4 0))
      0
      1))
	   
; Everything below generated by: (bmcomb 'band4 '() '(x1 x2 x3 x4))

(DEFN S-BAND4 (X1 X2 X3 X4)
      (IF (EMPTY X1) (E)
          (A (S-BAND4 (P X1) (P X2) (P X3) (P X4))
             (BAND4 (L X1) (L X2) (L X3) (L X4)))))

;; A2-Begin-S-BAND4

(PROVE-LEMMA A2-EMPTY-S-BAND4 (REWRITE)
    (EQUAL (EMPTY (S-BAND4 X1 X2 X3 X4)) (EMPTY X1)) ((DISABLE BAND4)))

(PROVE-LEMMA A2-E-S-BAND4 (REWRITE)
    (EQUAL (EQUAL (S-BAND4 X1 X2 X3 X4) (E)) (EMPTY X1))
    ((DISABLE S-BAND4 A2-EMPTY-S-BAND4) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-BAND4))))

(PROVE-LEMMA A2-LP-S-BAND4 (REWRITE)
    (EQUAL (LEN (S-BAND4 X1 X2 X3 X4)) (LEN X1))
    ((DISABLE BAND4) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-BAND4 (REWRITE) (EQLEN (S-BAND4 X1 X2 X3 X4) X1)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-BAND4)))

(PROVE-LEMMA A2-IC-S-BAND4 (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3))
                  (EQUAL (LEN X3) (LEN X4)))
             (EQUAL (S-BAND4 (I C_X1 X1) (I C_X2 X2) (I C_X3 X3)
                             (I C_X4 X4))
                    (I (BAND4 C_X1 C_X2 C_X3 C_X4)
                       (S-BAND4 X1 X2 X3 X4))))
    ((ENABLE I LEN) (DISABLE STR-A-I BAND4)
     (INDUCT (S-BAND4 X1 X2 X3 X4))))

(PROVE-LEMMA A2-LC-S-BAND4 (REWRITE)
    (IMPLIES (NOT (EMPTY X1))
             (EQUAL (L (S-BAND4 X1 X2 X3 X4))
                    (BAND4 (L X1) (L X2) (L X3) (L X4))))
    ((DISABLE BAND4) (EXPAND (S-BAND4 X1 X2 X3 X4))))

(PROVE-LEMMA A2-PC-S-BAND4 (REWRITE)
    (EQUAL (P (S-BAND4 X1 X2 X3 X4))
           (S-BAND4 (P X1) (P X2) (P X3) (P X4)))
    ((DISABLE BAND4)))

(PROVE-LEMMA A2-HC-S-BAND4 (REWRITE)
    (IMPLIES (AND (NOT (EMPTY X1))
                  (AND (EQUAL (LEN X1) (LEN X2))
                       (EQUAL (LEN X2) (LEN X3))
                       (EQUAL (LEN X3) (LEN X4))))
             (EQUAL (H (S-BAND4 X1 X2 X3 X4))
                    (BAND4 (H X1) (H X2) (H X3) (H X4))))
    ((DISABLE BAND4 S-BAND4) (ENABLE H LEN)
     (INDUCT (S-BAND4 X1 X2 X3 X4))))

(PROVE-LEMMA A2-BC-S-BAND4 (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3))
                  (EQUAL (LEN X3) (LEN X4)))
             (EQUAL (B (S-BAND4 X1 X2 X3 X4))
                    (S-BAND4 (B X1) (B X2) (B X3) (B X4))))
    ((DISABLE BAND4) (ENABLE B LEN) (INDUCT (S-BAND4 X1 X2 X3 X4))))

(PROVE-LEMMA A2-BNC-S-BAND4 (REWRITE)
    (IMPLIES (AND (EQUAL (LEN X1) (LEN X2)) (EQUAL (LEN X2) (LEN X3))
                  (EQUAL (LEN X3) (LEN X4)))
             (EQUAL (BN N (S-BAND4 X1 X2 X3 X4))
                    (S-BAND4 (BN N X1) (BN N X2) (BN N X3) (BN N X4))))
    ((DISABLE BAND4 S-BAND4)))

;; A2-End-S-BAND4

; eof:comb_band4.bm

; comb_bnot.bm: Binary Not combinational element
; U7-DONE

(defn bnot (u)
  (if (equal u 0)
      1
      0))
	   
; Everything below generated by: (bmcomb 'bnot '() '(x))

(DEFN S-BNOT (X) (IF (EMPTY X) (E) (A (S-BNOT (P X)) (BNOT (L X)))))

;; A2-Begin-S-BNOT

(PROVE-LEMMA A2-EMPTY-S-BNOT (REWRITE)
    (EQUAL (EMPTY (S-BNOT X)) (EMPTY X)) ((DISABLE BNOT)))

(PROVE-LEMMA A2-E-S-BNOT (REWRITE)
    (EQUAL (EQUAL (S-BNOT X) (E)) (EMPTY X))
    ((DISABLE S-BNOT A2-EMPTY-S-BNOT) (ENABLE EMPTY)
     (USE (A2-EMPTY-S-BNOT))))

(PROVE-LEMMA A2-LP-S-BNOT (REWRITE) (EQUAL (LEN (S-BNOT X)) (LEN X))
    ((DISABLE BNOT) (ENABLE LEN)))

(PROVE-LEMMA A2-LPE-S-BNOT (REWRITE) (EQLEN (S-BNOT X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN S-BNOT)))

(PROVE-LEMMA A2-IC-S-BNOT (REWRITE)
    (EQUAL (S-BNOT (I C_X X)) (I (BNOT C_X) (S-BNOT X)))
    ((ENABLE I) (DISABLE STR-A-I BNOT)))

(PROVE-LEMMA A2-LC-S-BNOT (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (L (S-BNOT X)) (BNOT (L X))))
    ((DISABLE BNOT) (EXPAND (S-BNOT X))))

(PROVE-LEMMA A2-PC-S-BNOT (REWRITE)
    (EQUAL (P (S-BNOT X)) (S-BNOT (P X))) ((DISABLE BNOT)))

(PROVE-LEMMA A2-HC-S-BNOT (REWRITE)
    (IMPLIES (NOT (EMPTY X)) (EQUAL (H (S-BNOT X)) (BNOT (H X))))
    ((DISABLE BNOT S-BNOT) (ENABLE H)))

(PROVE-LEMMA A2-BC-S-BNOT (REWRITE)
    (EQUAL (B (S-BNOT X)) (S-BNOT (B X))) ((DISABLE BNOT) (ENABLE B)))

(PROVE-LEMMA A2-BNC-S-BNOT (REWRITE)
    (EQUAL (BN N (S-BNOT X)) (S-BNOT (BN N X)))
    ((DISABLE BNOT S-BNOT)))

;; A2-End-S-BNOT

; eof:comb_bnot.bm


(DEFN TOPOR-SY-BCDSBI (LN) 
(IF (EQUAL LN 'Y01) 1 
(IF (EQUAL LN 'Y02) 1 
(IF (EQUAL LN 'Y03) 1 
(IF (EQUAL LN 'Y04) 1 
(IF (EQUAL LN 'Y05) 1 
(IF (EQUAL LN 'Y06) 1 
(IF (EQUAL LN 'Y07) 1 
(IF (EQUAL LN 'Y08) 1 
(IF (EQUAL LN 'Y11) 2 
(IF (EQUAL LN 'Y12) 2 
(IF (EQUAL LN 'Y13) 2 
(IF (EQUAL LN 'Y14) 2 
(IF (EQUAL LN 'Y15) 1 
(IF (EQUAL LN 'Y21) 3 
(IF (EQUAL LN 'Y22) 3 
(IF (EQUAL LN 'Y23) 2 
(IF (EQUAL LN 'YR1) 0 
(IF (EQUAL LN 'YR2) 0 
(IF (EQUAL LN 'YR3) 0 
(IF (EQUAL LN 'Y31) 1 
(IF (EQUAL LN 'Y32) 1 
(IF (EQUAL LN 'Y41) 2 
(IF (EQUAL LN 'YOUT) 3 
0))))))))))))))))))))))))

(DEFN SY-BCDSBI (LN X) 
(IF (EQUAL LN 'Y01) (S-BNOT X) 
(IF (EQUAL LN 'Y02) (S-BNOT X) 
(IF (EQUAL LN 'Y03) (S-BNOT (SY-BCDSBI 'YR3 X)) 
(IF (EQUAL LN 'Y04) (S-BNOT (SY-BCDSBI 'YR1 X)) 
(IF (EQUAL LN 'Y05) (S-BNOT (SY-BCDSBI 'YR2 X)) 
(IF (EQUAL LN 'Y06) (S-BNOT (SY-BCDSBI 'YR3 X)) 
(IF (EQUAL LN 'Y07) (S-BNOT (SY-BCDSBI 'YR1 X)) 
(IF (EQUAL LN 'Y08) (S-BNOT (SY-BCDSBI 'YR3 X)) 
(IF (EQUAL LN 'Y11) (S-BAND3 (SY-BCDSBI 'Y01 X) (SY-BCDSBI 'YR1 X)
                             (SY-BCDSBI 'YR3 X)) 
(IF (EQUAL LN 'Y12) (S-BAND3 (SY-BCDSBI 'Y02 X) (SY-BCDSBI 'YR2 X)
                             (SY-BCDSBI 'Y03 X)) 
(IF (EQUAL LN 'Y13) (S-BAND3 (SY-BCDSBI 'Y04 X) (SY-BCDSBI 'Y05 X)
                             (SY-BCDSBI 'Y06 X)) 
(IF (EQUAL LN 'Y14) (S-BAND3 X (SY-BCDSBI 'Y07 X) (SY-BCDSBI 'Y08 X)) 
(IF (EQUAL LN 'Y15) (S-BAND3 X (SY-BCDSBI 'YR1 X) (SY-BCDSBI 'YR3 X)) 
(IF (EQUAL LN 'Y21) (S-BOR (SY-BCDSBI 'Y11 X) (SY-BCDSBI 'Y12 X)) 
(IF (EQUAL LN 'Y22) (S-BOR (SY-BCDSBI 'Y13 X) (SY-BCDSBI 'Y14 X)) 
(IF (EQUAL LN 'Y23) (S-BOR (SY-BCDSBI 'YR2 X) (SY-BCDSBI 'Y15 X)) 
(IF (EQUAL LN 'YR1) (IF (EMPTY X) (E) (I 0 (SY-BCDSBI 'Y21 (P X)))) 
(IF (EQUAL LN 'YR2) (IF (EMPTY X) (E) (I 0 (SY-BCDSBI 'Y22 (P X)))) 
(IF (EQUAL LN 'YR3) (IF (EMPTY X) (E) (I 0 (SY-BCDSBI 'Y23 (P X)))) 
(IF (EQUAL LN 'Y31) (S-BNOT (SY-BCDSBI 'YR1 X)) 
(IF (EQUAL LN 'Y32) (S-BNOT (SY-BCDSBI 'YR2 X)) 
(IF (EQUAL LN 'Y41) (S-BAND4 X (SY-BCDSBI 'Y31 X) (SY-BCDSBI 'Y32 X)
                             (SY-BCDSBI 'YR3 X)) 
(IF (EQUAL LN 'YOUT) (S-BNOT (SY-BCDSBI 'Y41 X)) 
(SFIX X))))))))))))))))))))))))
((LEX2 (LIST (COUNT X) (TOPOR-SY-BCDSBI LN)))) )

;; A2-Begin-SY-BCDSBI

(PROVE-LEMMA A2-EMPTY-SY-BCDSBI (REWRITE)
    (EQUAL (EMPTY (SY-BCDSBI LN X)) (EMPTY X))
    ((DISABLE S-BAND3 S-BOR S-BAND4 S-BNOT)))

(PROVE-LEMMA A2-E-SY-BCDSBI (REWRITE)
    (EQUAL (EQUAL (SY-BCDSBI LN X) (E)) (EMPTY X))
    ((DISABLE SY-BCDSBI A2-EMPTY-SY-BCDSBI) (ENABLE EMPTY)
     (USE (A2-EMPTY-SY-BCDSBI))))

(PROVE-LEMMA A2-LP-SY-BCDSBI (REWRITE)
    (EQUAL (LEN (SY-BCDSBI LN X)) (LEN X))
    ((DISABLE LEN S-BAND3 S-BOR S-BAND4 S-BNOT)
     (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-BCDSBI (REWRITE) (EQLEN (SY-BCDSBI LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-BCDSBI)))

(PROVE-LEMMA A2-PC-SY-BCDSBI (REWRITE)
    (EQUAL (P (SY-BCDSBI LN X)) (SY-BCDSBI LN (P X)))
    ((DISABLE S-BAND3 S-BOR S-BAND4 S-BNOT A2-IC-S-BAND3 A2-IC-S-BOR
              A2-IC-S-BAND4 A2-IC-S-BNOT)))

;; A2-End-SY-BCDSBI

;;; Circuit CORRECTNESS /Paillet:

; BCD-bits defines a correct binary coded decimal, b0 is most-significant.
(defn BCD-bits (b0 b1 b2 b3)
  (or (equal b0 0)
      (and (equal b1 0) (equal b2 0))))

; CORRECTNESS:

;;; WHAT PAILLET ACTUALLY PROVES: 

(defn SY-B2I (ln x)
(IF (EQUAL LN 'YR1) (IF (EMPTY X) (E)
 (I 0 (S-BOR (S-BAND3 (S-BNOT (P x)) (SY-B2I 'YR1 (P x)) (SY-B2I 'YR3 (P x)))
	     (S-BAND3 (S-BNOT (P x)) (SY-B2I 'YR2 (P x)) (S-BNOT (SY-B2I 'YR3 (
P x))))))
  )
(IF (EQUAL LN 'YR2) (IF (EMPTY X) (E)
 (I 0 (S-BOR (S-BAND3 (S-BNOT (SY-B2I 'YR1 (P x))) (S-BNOT (SY-B2I 'YR2 (P x))) (S-BNOT (SY-B2I 'YR3 (P x))))
	     (S-BAND3 (P x) (S-BNOT (SY-B2I 'YR1 (P x))) (S-BNOT (SY-B2I 'YR3 (P x))))))
 )
(IF (EQUAL LN 'YR3) (IF (EMPTY X) (E)
 (I 0 (S-BOR (SY-B2I 'YR2 (P x))
	     (S-BAND3 (P x) (SY-B2I 'YR1 (P x)) (SY-B2I 'YR3 (P x)))))
 )
(SFIX X))))
; note: no need for any topo-induction hint since x decreases.
)

; B2 is just a GENERALIZED sysd, and our A2 lemmas should still be true: 
; The following were generated by:
; (vp (bma2sysd-aux 'sy-b2i 'sy-b2i '(x) '(band3 bor band4 bnot)))
; with A2-PC preemptively disabled.

;; A2-Begin-SY-B2I

(PROVE-LEMMA A2-EMPTY-SY-B2I (REWRITE)
    (EQUAL (EMPTY (SY-B2I LN X)) (EMPTY X))
    ((DISABLE S-BAND3 S-BOR S-BAND4 S-BNOT)))

(PROVE-LEMMA A2-E-SY-B2I (REWRITE)
    (EQUAL (EQUAL (SY-B2I LN X) (E)) (EMPTY X))
    ((DISABLE SY-B2I A2-EMPTY-SY-B2I) (ENABLE EMPTY)
     (USE (A2-EMPTY-SY-B2I))))

(PROVE-LEMMA A2-LP-SY-B2I (REWRITE) (EQUAL (LEN (SY-B2I LN X)) (LEN X))
    ((DISABLE LEN S-BAND3 S-BOR S-BAND4 S-BNOT)
     (ENABLE STR-ADD1-LEN-P)))

(PROVE-LEMMA A2-LPE-SY-B2I (REWRITE) (EQLEN (SY-B2I LN X) X)
    ((ENABLE EQLEN-IS-EQUAL-LEN) (DISABLE LEN SY-B2I)))

;(PROVE-LEMMA A2-PC-SY-B2I (REWRITE)
;    (EQUAL (P (SY-B2I LN X)) (SY-B2I LN (P X)))
;    ((DISABLE S-BAND3 S-BOR S-BAND4 S-BNOT A2-IC-S-BAND3 A2-IC-S-BOR
;              A2-IC-S-BAND4 A2-IC-S-BNOT)))

;; A2-End-SY-B2I

; BCDS-is-B2i is the essence of this simplification.  

(prove-lemma bcdsbi-is-B2i (rewrite)
(and (equal (SY-bcdsbi 'YR1 x) (SY-B2I 'YR1 x))
     (equal (SY-bcdsbi 'YR2 x) (SY-B2I 'YR2 x))
     (equal (SY-bcdsbi 'YR3 x) (SY-B2I 'YR3 x))
     )
((disable S-BAND3 S-BOR S-BAND4 S-BNOT)
 (induct (induct-P x))
 (expand (SY-BCDSBI 'YR1 x)
	 (SY-BCDSBI 'YR2 x)
	 (SY-BCDSBI 'YR3 x)
	 (SY-BCDSBI 'Y21 (P x))
	 (SY-BCDSBI 'Y22 (P x))
	 (SY-BCDSBI 'Y23 (P x))
	 (SY-BCDSBI 'Y11 (P x))
	 (SY-BCDSBI 'Y12 (P x))
	 (SY-BCDSBI 'Y13 (P x))
	 (SY-BCDSBI 'Y14 (P x))
	 (SY-BCDSBI 'Y15 (P x))
	 (SY-BCDSBI 'Y01 (P x))
	 (SY-BCDSBI 'Y02 (P x))
	 (SY-BCDSBI 'Y03 (P x))
	 (SY-BCDSBI 'Y04 (P x))
	 (SY-BCDSBI 'Y05 (P x))
	 (SY-BCDSBI 'Y06 (P x))
	 (SY-BCDSBI 'Y07 (P x))
	 (SY-BCDSBI 'Y08 (P x))
	 )
 )
)

; at this point we should never need SY-BCDSBI anymore:
(disable SY-BCDSBI)

; and also he does the expansion for Yout once and for all:
; Note: A-POSTERIORI analysis indicates that this lemma is not really useful
; to BM, which is usual, since it's just a non-recursive rewrite, and we might
; as well give the expand hint at the right place.

(prove-lemma BCDSBI-eq-Yout (rewrite)
(equal (SY-BCDSBI 'Yout x)
       (S-BNOT (S-BAND4 x
		      (S-BNOT (SY-B2I 'YR1 x))
		      (S-BNOT (SY-B2I 'YR2 x))
		      (SY-B2I 'YR3 x))))
((expand (SY-BCDSBI 'Yout x)
	 (SY-BCDSBI 'Y41 x)
	 (SY-BCDSBI 'Y31 x)
	 (SY-BCDSBI 'Y32 x)
	 )
 (disable S-BNOT S-BAND4) ; speeds things up
 )
)

;; SECOND, he proves things about his DEROULEMENTS:
; note: all thms below are "one-shot", i.e. disabled and enabled explicitely
; NOTE: at this point we express everything in terms of B2; obviously
;       with BCDSBI-IS-B2i we can carry everything over.  This follows Paillet.

(prove-lemma BCDSBI-Paillet-1 (rewrite)
(implies (equal (len x) 1)
	 (and (equal (L (SY-B2I 'YR1 x)) 0)
	      (equal (L (SY-B2I 'YR2 x)) 0)
	      (equal (L (SY-B2I 'YR3 x)) 0)
	      ))
((disable S-BOR S-BAND3 S-BNOT SY-B2I)
 (enable LEN) ; required; Note: STR-not-empty-len makes proof clearer (3x3) but longer..
 (expand (SY-B2I 'YR1 X)
	 (SY-B2I 'YR2 X)
	 (SY-B2I 'YR3 X)
	 )
 )
)
(disable BCDSBI-Paillet-1)


(prove-lemma BCDSBI-Paillet-1out (rewrite)
(implies (equal (len x) 1)
	 (equal (L (SY-BCDSBI 'Yout x)) 1)
	 )
((enable STR-not-empty-len BCDSBI-paillet-1)
 (disable S-BAND4 S-BNOT ; so LC can trigger
	  len SY-B2I ; helps
	  )
 )
)
(disable BCDSBI-Paillet-1out)


(prove-lemma BCDSBI-Paillet-2 (rewrite)
(implies (equal (len x) 2)
	 (and (equal (L (SY-B2I 'YR1 x)) 0)
	      (equal (L (SY-B2I 'YR2 x)) 1)
	      (equal (L (SY-B2I 'YR3 x)) 0)
	      ))
((disable SY-B2I  ; significant speed gain - weird..
	  S-BAND3 S-BOR S-BNOT ; so LC can trigger for them instead.
	  )
 (enable STR-not-empty-len  ; required for L-I to trigger
	 BCDSBI-Paillet-1
	 LEN  ; required
	 )
 (expand (SY-B2I 'YR1 X)
	 (SY-B2I 'YR2 X)
	 (SY-B2I 'YR3 X)
	 )
 )
)
(disable BCDSBI-Paillet-2)

(prove-lemma BCDSBI-Paillet-2out (rewrite)
(implies (equal (len x) 2)
	 (equal (L (SY-BCDSBI 'Yout x)) 1)
	 )
((enable STR-not-empty-len BCDSBI-Paillet-2) ; also required here, as in 1out.
 (disable S-BAND4 S-BNOT ; so LC can trigger
	  len SY-B2I ; helps
	  )
 )
)
(disable BCDSBI-Paillet-2out)

; Note that the "bitp" hyp is not explicit in Paillet...  

(prove-lemma BCDSBI-Paillet-3 (rewrite)
(implies (and (equal (len x) 3)
	      (S-bitp x))
	 (and (equal (L (SY-B2I 'YR1 x)) (bnot (L (P x))))
	      (equal (L (SY-B2I 'YR2 x)) (L (P x)))
	      (equal (L (SY-B2I 'YR3 x)) 1)
	      ))
((disable SY-B2I ; for speed
	  len  ; len must be disabled for STR-len-P
	  S-BAND3 S-BOR S-BNOT ; so LC can trigger for them instead, otherwise 
	                    ; we get extra (P ...) which wreak havoc.
	  )
 (enable STR-not-empty-len  ; required for L-I to trigger
	 STR-len-P          ; required for Paillet-2 to trigger
	 BCDSBI-Paillet-2
	 )
 (expand (SY-B2I 'YR1 X)
	 (SY-B2I 'YR2 X)
	 (SY-B2I 'YR3 X)
	 )
 )
)
(disable BCDSBI-Paillet-3)

(prove-lemma BCDSBI-Paillet-3out (rewrite)
(implies (and (equal (len x) 3)
	      (S-bitp x))
	 (equal (L (SY-BCDSBI 'Yout x)) 1)
	 )
((enable STR-not-empty-len BCDSBI-Paillet-3) ; also required here, as in 1out.
 (disable S-BAND4 S-BNOT ; so LC can trigger
	  len SY-B2I; helps tremendously!
	  )
 )
)
(disable BCDSBI-Paillet-3out)

(prove-lemma BCDSBI-Paillet-4 (rewrite)
(implies (and (equal (len x) 4)
	      (S-bitp x))
	 (and (equal (L (SY-B2I 'YR1 x)) (band (bnot (L (P x))) (bnot (L (P (P x)
)))))
	      (equal (L (SY-B2I 'YR2 x)) 0)
	      (equal (L (SY-B2I 'YR3 x)) (bor (L (P (P x))) (band (L (P x)) (bnot (L (P (P x)))))))
	      ))
((disable SY-B2I ; for speed
	  len  ; len must be disabled for STR-len-P
	  S-BAND3 S-BOR S-BNOT ; so LC can trigger for them instead, otherwise 
	                    ; we get extra (P ...) which wreak havoc.
	  )
 (enable STR-not-empty-len  ; required for L-I to trigger
	 STR-len-P          ; required for Paillet-3 to trigger
	 BCDSBI-Paillet-3
	 )
 (expand (SY-B2I 'YR1 X)
	 (SY-B2I 'YR2 X)
	 (SY-B2I 'YR3 X)
	 )
 )
)
(disable BCDSBI-Paillet-4)

; and his conclusion:

(prove-lemma BCDSBI-Paillet-4out (rewrite)
(implies (and (equal (len x) 4)
	      (S-bitp x))
	 (equal (L (SY-BCDSBI 'Yout x))
		(bor (bnot (L X)) (band (bnot (L (P X))) (bnot (L (P (P X))))))
		))
((enable STR-not-empty-len BCDSBI-Paillet-4) ; also required here, as in 1out.
 (disable S-BAND4 S-BNOT ; so LC can trigger
	  len SY-B2I ; should help
	  )
 )
)
(disable BCDSBI-Paillet-4out)

; from which he leaves to the reader the real conclusion:

(prove-lemma BCDSBI-Paillet-4out-correct (rewrite)
(implies (and (equal (len x) 4)
	      (S-bitp x))
	 (equal (L (SY-BCDSBI 'Yout x))
		(bobi (BCD-bits (L x)  ; most recent bit interpreted as most-significant
				(L (P x))
				(L (P (P x)))
				(L (P (P (P x))))))
		))
((disable BCDSBI-eq-Yout SY-B2I)
 (enable BCDSBI-Paillet-4out)
 )
)
(disable BCDSBI-Paillet-4out-correct)

; and the last "re-initialization" condition:

(prove-lemma BCDSBI-Paillet-5 (rewrite)
(implies (and (equal (len x) 5)
	      (S-bitp x))
	 (and (equal (L (SY-B2I 'YR1 x)) 0)
	      (equal (L (SY-B2I 'YR2 x)) 0)
	      (equal (L (SY-B2I 'YR3 x)) 0)
	      ))
((disable SY-B2I ; for speed
	  len  ; len must be disabled for STR-len-P
	  S-BAND3 S-BOR S-BNOT ; so LC can trigger for them instead, otherwise 
	                    ; we get extra (P ...) which wreak havoc.
	  )
 (enable STR-not-empty-len  ; required for L-I to trigger
	 STR-len-P          ; required for Paillet-4 to trigger
	 BCDSBI-Paillet-4
	 )
 (expand (SY-B2I 'YR1 X)
	 (SY-B2I 'YR2 X)
	 (SY-B2I 'YR3 X)
	 (S-bitp x) ; why this is needed here and not before is a mystery ???
	 )
 )
)
(disable BCDSBI-Paillet-5)

;;; WHAT I CAN PROVE! :

(prove-lemma BCDSBI-Paillet-R-correct (rewrite)
(implies (and (not (empty x)) (S-bitp x))
	 (and (equal (L (SY-B2I 'YR1 x))
		     (if (equal (remainder (len x) 4) 1) 0
		     (if (equal (remainder (len x) 4) 2) 0
		     (if (equal (remainder (len x) 4) 3) (bnot (L (P x)))
		       (band (bnot (L (P x))) (bnot (L (P (P x)))))
		       ))))
	      (equal (L (SY-B2I 'YR2 x))
		     (if (equal (remainder (len x) 4) 1) 0
		     (if (equal (remainder (len x) 4) 2) 1
		     (if (equal (remainder (len x) 4) 3) (L (P x))
		       0
		       ))))
	      (equal (L (SY-B2I 'YR3 x))
		     (if (equal (remainder (len x) 4) 1) 0
		     (if (equal (remainder (len x) 4) 2) 0
		     (if (equal (remainder (len x) 4) 3) 1
		       (bor (L (P (P x))) (band (L (P x)) (bnot (L (P (P x))))))
		       ))))
	      ))
((disable S-BOR S-BAND3 S-BNOT REMAINDER) 
 (enable LEN STR-L-I2) ; to induce case disjunction on empty P x 
 )     ; note that (the correct) induction hint makes it blow up...
)

; and finally, the true, general correctness of Paillet#5 :

(prove-lemma BCDSBI-Paillet-Yout-correct (rewrite)
(implies (and (not (empty x)) (S-bitp x))
	 (equal (L (SY-BCDSBI 'Yout x))
		(if (equal (remainder (len x) 4) 0)
		    (bobi (BCD-bits (L x)  ; most recent bit interpreted as most-significant
				    (L (P x))
				    (L (P (P x)))
				    (L (P (P (P x))))))
		    1)
		))
((disable SY-B2I SY-BCDSBI S-BAND4 S-BNOT len remainder S-bitp)
 )
)

; eof: bcdsbi.bm
;))
