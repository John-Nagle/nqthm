;;;  Copyright (C) 1990-1994 Computational Logic, Inc.  All Rights
;;;  Reserved.  See the file LICENSE in this directory for the
;;;  complete license agreement.

;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;;
;;;    POST-ALU.EVENTS
;;;
;;;   CARRY and OVERFLOW help, and TV-SHIFT-OR-BUF.
;;;
;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;;;  CARRY-OUT-HELP

(defn carry-out-help (a0 result zero op0 op1 op2 op3)
  (let ((result- (b-not result))
        (zero-   (b-not zero))
        (op0-    (b-not op0))
        (op1-    (b-not op1))
        (op2-    (b-not op2))
        (op3-    (b-not op3)))
    (let ((op0    (b-not op0-))
          (op1    (b-not op1-))
          (op2    (b-not op2-))
          (op3    (b-not op3-)))
      
      (b-and (b-nand3 (b-nand4 op3- (b-nand op0- op1-) op2- result)
                      (b-nand3 op3- op2 result-)
                      (b-nand4 op3 op2- (b-nand op0 op1) a0))
             zero-))))

(defn-to-module carry-out-help)

(prove-lemma carry-out-help-congruence (rewrite)
  (implies
   x
   (equal (equal (carry-out-help x a zero op0 op1 op2 op3)
                 (carry-out-help t a zero op0 op1 op2 op3))
          t)))

(prove-lemma carry-out-help$value-zero (rewrite)
  (implies
   (carry-out-help& netlist)
   (equal (dual-eval 0 'carry-out-help
                     (list a0 result t op0 op1 op2 op3)
                     state netlist)
          (list f)))
  ;;Hint
  ((enable carry-out-help& b-not$value b-and$value b-not f-and-rewrite)
   (disable-theory f-gates b-gates)))

(disable carry-out-help$value-zero)

;;;   OVERFLOW-HELP
;;;
;;;   This logic is optimized for speed on the basis that RN will arrive last. 

(defn overflow-help (rn an bn zero op0 op1 op2 op3)
  (let ((an-   (b-not an))
        (zero- (b-not zero))
        (op1-  (b-not op1))
        (op2-  (b-not op2))
        (op3-  (b-not op3)))
    (let ((an   (b-not an-))
          (zero (b-not zero-))
          (op2  (b-not op2-)))
      (b-if rn
            (b-nor (b-nand (b-nor (b-nand3 op3-
                                           (b-or3 op1- op2- (b-xor an bn))
                                           (b-nand3 op1- op2 an-))
                                  (b-nand (b-nand3 op1 op2- (b-xor an bn))
                                          (b-nand3 op1- op2- an)))
                           zero-)
                   (b-nand3 (b-nand op2 an-)
                            (b-nand3 op0 op1- an)
                            (b-nand op2- an)))
            (b-nor (b-nand (b-nor (b-nand3 op3-
                                           (b-or3 op1- op2- (b-xor an bn))
                                           (b-nand3 op1- op2 an-))
                                  (b-nand (b-nand3 op1 op2- (b-xor an bn))
                                          (b-nand3 op1- op2- an)))
                           zero-)
                   (b-not (b-nand3 (b-nand op2 an-)
                                   (b-nand3 op0 op1- an)
                                   (b-nand op2- an)))))

      )))

(defn-to-module overflow-help)
  
(prove-lemma overflow-help$value-zero (rewrite)
  (implies
   (and (overflow-help& netlist)
        (boolp rn))
   (equal (dual-eval 0 'overflow-help
                     (list rn an bn t op0 op1 op2 op3)
                     state netlist)
          (list f)))
  ;;Hint
  ((enable overflow-help& b-nand$value b-not$value b-nor$value f-nand
           f-nor b-if$value b-not f-and3 f-and-rewrite boolp b-if)
   (disable-theory f-gates b-gates)))

(disable overflow-help$value-zero)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;   THE SHIFT UNIT
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;  V-SHIFT-RIGHT-NAMES  -- Like V-SHIFT-RIGHT, but doesn't BOOLFIX the
;;;  vector.  Used to create a "shifted" list of names to be used as the
;;;  shifted input to the shift mutiplexor.

(defn v-shift-right-names (a si)
  (if (nlistp a)
      nil
    (append (cdr a) (list si))))

(prove-lemma length-v-shift-right-names (rewrite)
  (equal (length (v-shift-right-names a si))
         (length a))
  ;;Hint
  ((enable length)))

(prove-lemma properp-shift-right-names (rewrite)
  (properp (v-shift-right-names a si))
  ;;Hint
  ((enable properp)))

(prove-lemma collect-value-v-shift-right (rewrite)
  (equal (v-threefix (collect-value (v-shift-right-names a si) alist))
         (fv-shift-right (collect-value a alist) (value si alist)))
  ;;Hint
  ((enable collect-value append fv-shift-right v-threefix)))

;;;   SHIFT-OR-BUF-CNTL

(defn shift-or-buf-cntl (c an zero op0 op1 op2 op3)
  (let ((op0- (b-not op0))
        (op1- (b-not op1))
        (op2- (b-not op2)))
    (let ((decode-ror (b-and op0- op1-))
          (decode-asr op0))
      (let ((ror-si (b-and decode-ror c))
            (asr-si (b-and decode-asr an)))
        (let ((si (b-or asr-si ror-si))
              (t1 (b-nand op2- op3))
              (t2 (b-and op0 op1)))
          (list (b-or3 t2 t1 zero)
                si))))))

(defn-to-module shift-or-buf-cntl)

(prove-lemma shift-or-buf-cntl$value-zero (rewrite)
  (implies
   (shift-or-buf-cntl& netlist)
   (equal (car (dual-eval 0 'shift-or-buf-cntl
                          (list c an t op0 op1 op2 op3)
                          state netlist))
          t))
   ;;Hint
  ((enable shift-or-buf-cntl& b-or3$value f-or3 f-or-rewrite)
   (disable-theory f-gates b-gates)))

(defn f$shift-or-buf (c a an zero op0 op1 op2 op3)
  (let ((pass (car (f$shift-or-buf-cntl c an zero op0 op1 op2 op3)))
        (si   (cadr (f$shift-or-buf-cntl c an zero op0 op1 op2 op3))))
    (fv-if pass a (fv-shift-right a si))))

(disable f$shift-or-buf)

(defn shift-or-buf (c a an zero op0 op1 op2 op3)
  (let ((pass (car (shift-or-buf-cntl c an zero op0 op1 op2 op3)))
        (si   (cadr (shift-or-buf-cntl c an zero op0 op1 op2 op3))))
    (v-if pass a (v-shift-right a si))))

(disable shift-or-buf)

(prove-lemma properp-length-f$shift-or-buf (rewrite)
  (and (properp (f$shift-or-buf c a an zero op0 op1 op2 op3))
       (equal (length (f$shift-or-buf c a an zero op0 op1 op2 op3))
              (length a)))
  ;;Hint
  ((enable f$shift-or-buf)))

(prove-lemma length-shift-or-buf (rewrite)
   (equal (length (shift-or-buf c a an zero op1 op2 op3 op4))
          (length a))
   ;;Hint
   ((expand (shift-or-buf c a an zero op1 op2 op3 op4))))

(prove-lemma bvp-shift-or-buf (rewrite)
  (bvp (shift-or-buf c a an zero op1 op2 op3 op4))
  ;;Hint
  ((expand (shift-or-buf c a an zero op1 op2 op3 op4))))

(prove-lemma f$shift-or-buf=shift-or-buf (rewrite)
  (implies
   (and (boolp c)
        (boolp an)
        (boolp zero)
        (boolp op1)
        (boolp op2)
        (boolp op3)
        (boolp op4)
        (bvp a))
   (equal (f$shift-or-buf c a an zero op1 op2 op3 op4)
          (shift-or-buf c a an zero op1 op2 op3 op4)))
  ;;Hint
  ((enable f$shift-or-buf shift-or-buf)
   (disable-theory f-gates)))

;;;  Lemmas about the shift unit.

(prove-lemma shift-or-buf-is-buf (rewrite)
  (implies (and (bvp a)
                (or (and op0 op1)
                    op2
                    (not op3)
                    zero))
           (equal (shift-or-buf c a an zero op0 op1 op2 op3)
                  a))
  ;;Hint
  ((enable shift-or-buf)
   (disable v-shift-right)))
 
(prove-lemma shift-or-buf-is-asr (rewrite)
  (implies (and (bvp a)
                (equal an (nth (sub1 (length a)) a))
                op0
                (not op1)
                (not op2)
                op3
                (not zero))
           (equal (shift-or-buf c a an zero op0 op1 op2 op3)
                  (v-asr a)))
  ;;Hint
  ((enable shift-or-buf v-shift-right)))

(prove-lemma shift-or-buf-is-ror (rewrite)
  (implies (and (bvp a)
                (boolp c)
                (not op0)
                (not op1)
                (not op2)
                op3
                (not zero))
           (equal (shift-or-buf c a an zero op0 op1 op2 op3)
                  (v-ror a c)))
  ;;Hint
  ((enable shift-or-buf v-shift-right)))

(prove-lemma shift-or-buf-is-lsr (rewrite)
  (implies (and (bvp a)
                (not op0)
                op1
                (not op2)
                op3
                (not zero))
           (equal (shift-or-buf c a an zero op0 op1 op2 op3)
                  (v-lsr a)))
  ;;Hint
  ((enable shift-or-buf)))

;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;;;
;;;    TV-SHIFT-OR-BUF*
;;;
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;;  TV-SHIFT-OR-BUF* -- Hardware implementation of SHIFT-OR-BUF, using TV-IF
;;;  for the selector.

(defn tv-shift-or-buf* (tree)
  (let ((a-names (indices 'a 0 (tree-size tree)))
        (out-names (indices 'out 0 (tree-size tree))))
  (list
   ;;  Name
   (index 'tv-shift-or-buf (tree-number tree))
   ;;  Inputs
   (cons 'c (append a-names '(an zero op0 op1 op2 op3)))
   ;;  Outputs
   out-names
   ;;  Body
   (list
    '(cntl (ctl si) shift-or-buf-cntl (c an zero op0 op1 op2 op3))
    (list 'mux
          out-names
          (index 'tv-if (tree-number tree))
          (cons 'ctl (append a-names
                             (v-shift-right-names a-names 'si)))))
  ;;  States
  nil)))

(destructuring-lemma tv-shift-or-buf*)

(defn tv-shift-or-buf& (netlist tree)
  (and (equal (lookup-module (index 'tv-shift-or-buf (tree-number tree))
                             netlist)
              (tv-shift-or-buf* tree))
       
       (shift-or-buf-cntl& (delete-module
                            (index 'tv-shift-or-buf (tree-number tree))
                            netlist))
       (tv-if& (delete-module (index 'tv-shift-or-buf (tree-number tree))
                              netlist)
               tree)))

(disable tv-shift-or-buf&)

(defn tv-shift-or-buf$netlist (tree)
  (cons (tv-shift-or-buf* tree)
        (union (tv-if$netlist tree)
               (shift-or-buf-cntl$netlist))))

(prove-lemma tv-shift-or-buf$value (rewrite)
  (implies
   (and (tv-shift-or-buf& netlist tree)
        (equal (length a) (tree-size tree))
        (properp a))
   (equal (dual-eval 0 (index 'tv-shift-or-buf (tree-number tree))
                     (cons c (append a (list an zero op0 op1 op2 op3)))
                     state netlist)
          (f$shift-or-buf c a an zero op0 op1 op2 op3)))
  ;;Hint
  ((enable f$shift-or-buf tv-shift-or-buf&
           shift-or-buf-cntl$value tv-if$value
           tv-shift-or-buf*$destructure fv-if-rewrite)
   (disable-theory f-gates)
   (disable fv-shift-right v-shift-right-names)))

(disable tv-shift-or-buf$value)

(prove-lemma tv-shift-or-buf$value-zero (rewrite)
  (implies
   (and (tv-shift-or-buf& netlist tree)
        (equal (length a) (tree-size tree))
        (bvp a))
   (equal (dual-eval 0 (index 'tv-shift-or-buf (tree-number tree))
                     (cons c (append a (list an t op0 op1 op2 op3)))
                     state netlist)
          a))
  ;;Hint
  ((enable tv-shift-or-buf& 
           tv-if$value tv-shift-or-buf*$destructure
           shift-or-buf-cntl$value-zero)
   (disable-theory f-gates b-gates)
   (disable v-shift-right v-shift-right-names)))

(disable tv-shift-or-buf$value-zero)
