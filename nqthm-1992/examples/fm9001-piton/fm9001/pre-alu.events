;;;  Copyright (C) 1990-1994 Computational Logic, Inc.  All Rights
;;;  Reserved.  See the file LICENSE in this directory for the
;;;  complete license agreement.

;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;;
;;;   PRE-ALU.EVENTS
;;;
;;;   The ALU decoders, and CARRY-IN-HELP
;;;
;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#|

  This table shows the settings of the mode, propagate, and generate lines for
each op-code that are computed by DECODE-MODE, DECODE-PROP, and DECODE-GEN
respectively.  Further, it shows carry-in, carry-out, and overflow requirements
that are implemented by CARRY-IN-HELP, CARRY-OUT-HELP, and OVERFLOW-HELP
respectively.   This table is valid assuming that the SWAP input to
DECODE-MODE and DECODE-GEN is true only when the op-code is either ALU-INC-OP
or ALU-DEC-OP.  (The SWAP input is normally F; it is set to T only in the cases
where the B operand is incremented or decremented.)  Also note that the control
logic must set the op-code to ALU-INC-OP whenever the ZERO flag is T.


 FM9001   Mode  Prop  Gen C-in  C-out  Ovfl  Comment
 opcode         aab   aab
 3210            n     nn
                         
 0000     f     tff   ttf   x   f      f     Move
 0001     t     -f+   ttf   t   co     *     Increment
 0010     t     tft   ftt   c   co     *     AddC
 0011     t     tft   ftt   f   co     *     Add
 0100     t     ftf   ttf   t   ~co    *     Negation
 0101     t     ttf   f-+   f   ~co    *     Decrement
 0110     t     ftt   tft   ~c  ~co    *     SubB
 0111     t     ftt   tft   t   ~co    *     Sub
 1000     f     tff   ttf   c   c|a0   f     Move (ROR)
 1001     f     tff   ttf   x   a0     f     Move (ASR)
 1010     f     tff   ttf   x   a0     f     Move (LSR)
 1011     f     tff   fft   x   f      f     XOR
 1100     f     tft   ttf   x   f      f     Or
 1101     f     fff   ftt   x   f      f     And 
 1110     f     ftf   ttf   x   f      f     Not 
 1111     f     tff   ttf   x   f      f     Move

 ZERO     t     fff   fff   t   f      f     ZERO

+/- = swap/~swap

* -- Overflow equations.  a = A(n), b = B(n), out = out(n)

x110.a.~b.out + x110.~a.b.~out     Sub,Subb
1010.a.~out                        Dec
0010.a.out                         Neg
x100.a.b.~out + x100.~a.~b.out     Add,Addc
1000.~a.out                        Inc

|#

;;;  DECODE-MODE
;;;
;;;  Mode = T for arithmetic operations, and ZEROing.

(defn decode-mode (op0 op1 op2 op3)
  (b-nor (b-nor3 op0 op1 op2)
         op3))

(defn-to-module decode-mode)

(prove-lemma decode-mode$value-zero (rewrite)
  (implies
   (decode-mode& netlist)
   (equal (dual-eval 0 'decode-mode (alu-inc-op) state netlist)
          #v1))
  ;;Hint
  ((enable decode-mode& b-nor$value b-nor3$value alu-inc-op)
   (disable f-and)))

(disable decode-mode$value-zero)

;;;  DECODE-PROP == (LIST PB PAN PA)

(defn decode-prop (zero swap op0 op1 op2 op3)
  (let ((zero- (b-not zero))
        (swap- (b-not swap))
        (op0-  (b-not op0))
        (op1-  (b-not op1))
        (op2-  (b-not op2))
        (op3-  (b-not op3)))
    (let ((zerop (b-not zero-))
          (swap  (b-not swap-))
          (op0   (b-not op0-))
          (op1   (b-not op1-))
          (op2   (b-not op2-))
          (op3   (b-not op3-)))

      (list (b-nand3 (b-nand4 op0- op1- op2 op3) 
                     (b-nand op1 op3-)
                     (b-nand3 op2- op3- swap))
            (b-nor op2- (b-nor op3- (b-nor op0 op1-)))
            (b-and (b-nand3 (b-nand op3 (b-equv op0 op1))
                            (b-nand op2- (b-nand swap op3-))
                            (b-nand4 op0 op1- op2 op3-))
                   zero-)))))

(defn-to-module decode-prop)

(prove-lemma decode-prop$value-zero (rewrite)
  (implies
   (decode-prop& netlist)
   (equal (dual-eval 0 'decode-prop (list* t f (alu-inc-op)) state
                     netlist)
          #v000))
  ;;Hint
  ((enable decode-prop& b-and$value b-not$value b-nand$value b-nand3$value
           b-nand4$value b-nor$value b-equv$value alu-inc-op
           f-and-rewrite f-not-rewrite)
   (disable-theory f-gates)))

(disable decode-prop$value-zero)

;;;  DECODE-GEN = (LIST GBN GAN GA)

(defn decode-gen (zero swap op0 op1 op2 op3)
  (let ((zero- (b-not zero))
        (swap- (b-not swap))
        (op0-  (b-not op0))
        (op1-  (b-not op1))
        (op2-  (b-not op2))
        (op3-  (b-not op3)))
    (let ((zero (b-not zero-))
          (swap (b-not swap-))
          (op0  (b-not op0-))
          (op1  (b-not op1-))
          (op2  (b-not op2-))
          (op3  (b-not op3-)))
      (list (b-nand3 (b-nand3 op0 op3 (b-xor op1 op2))
                     (b-nand3 op2 op3- (b-nand op1- swap-))
                     (b-nand3 op1 op2- op3-))
            (b-nor (b-nand (b-nand4 op0 op1 op2- op3)
                           (b-nand3 op2 op3- (b-nand op1- swap-)))
                   zero)
            (b-nor (b-nand3 (b-nand3 op0 op3 (b-xor op1 op2))
                            (b-nand3 op0 op1- op2)
                            (b-nand3 op1 op2- op3-))
                   zero)))))

(defn-to-module decode-gen)

(prove-lemma decode-gen$value-zero (rewrite)
  (implies
   (decode-gen& netlist)
   (equal (dual-eval 0 'decode-gen (list* t f (alu-inc-op)) state netlist)
          #v000))
  ;;Hint
  ((enable decode-gen& b-and$value b-not$value b-nor$value
           b-nand3$value b-nand$value b-xor$value
           f-and-rewrite f-not-rewrite f-nor f-or alu-inc-op)
   (disable-theory f-gates)))

(disable decode-gen$value-zero)

;;;  MPG == (LIST GBN GAN GA PB PAN PA M)

(defn f$mpg (zsop)
  (let ((zero (car zsop))
        (swap (cadr zsop))
        (op0 (caddr zsop))
        (op1 (cadddr zsop))
        (op2 (caddddr zsop))
        (op3 (cadddddr zsop)))
    (append (f$decode-gen zero swap op0 op1 op2 op3)
            (append (f$decode-prop zero swap op0 op1 op2 op3)
                    (list (f$decode-mode op0 op1 op2 op3))))))

(disable f$mpg)

(defn mpg (zsop)
  (let ((zero (car zsop))
        (swap (cadr zsop))
        (op0 (caddr zsop))
        (op1 (cadddr zsop))
        (op2 (caddddr zsop))
        (op3 (cadddddr zsop)))
    (append (decode-gen zero swap op0 op1 op2 op3)
            (append (decode-prop zero swap op0 op1 op2 op3)
                    (list (decode-mode op0 op1 op2 op3))))))

(disable mpg)

(prove-lemma f$mpg=mpg (rewrite)
  (implies
   (and (bvp zsop)
        (equal (length zsop) 6))
   (equal (f$mpg zsop)
          (mpg zsop)))
  ;;Hint
  ((enable f$mpg mpg bvp-length)))

(prove-lemma properp-length-f$mpg (rewrite)
  (and (properp (f$mpg zsop))
       (equal (length (f$mpg zsop)) 7))
  ;;Hint
  ((enable f$mpg f$decode-gen f$decode-prop f$decode-mode)
   (disable-theory f-gates)))

(prove-lemma length-mpg (rewrite)
  (equal (length (mpg zsop)) 7)
  ;;Hint
  ((enable mpg)))

(prove-lemma bvp-mpg (rewrite)
  (bvp (mpg zsop))
  ;;Hint
  ((enable mpg)))

(prove-lemma properp-mpg (rewrite)
  (properp (mpg zsop))
  ;;Hint
  ((enable mpg)))

(prove-lemma mpg-if-op-code (rewrite)
  (equal (mpg (cons a (cons b (if c d e))))
         (if c
             (mpg (cons a (cons b d)))
           (mpg (cons a (cons b e))))))

(prove-lemma mpg-zero (rewrite)
  (equal (mpg (cons t (cons f (alu-inc-op))))
         #v1000000)
  ;;Hint
  ((enable mpg alu-inc-op)))

(disable mpg-zero)

(defn mpg* ()
  '(mpg (zero swap op0 op1 op2 op3) (gbn gan ga pb pan pa mode)
        ((m (mode)       decode-mode (op0 op1 op2 op3))
         (p (pb pan pa)  decode-prop (zero swap op0 op1 op2 op3))
         (g (gbn gan ga) decode-gen  (zero swap op0 op1 op2 op3)))
        nil))

(module-predicate mpg*)

(module-netlist mpg*)

(prove-lemma mpg$value (rewrite)
  (implies
   (and (mpg& netlist)
        (properp zsop)
        (equal (length zsop) 6))
   (equal (dual-eval 0 'mpg zsop state netlist)
          (f$mpg zsop)))
  ;;Hint
  ((enable f$mpg mpg& 
           decode-mode$value decode-prop$value decode-gen$value
           f$decode-mode f$decode-gen f$decode-prop)
   (disable-theory f-gates)))

(disable mpg$value)

(prove-lemma mpg$value-zero (rewrite)
  (implies
   (and (mpg& netlist)
        (equal zsop (list* t f (alu-inc-op))))
   (equal (dual-eval 0 'mpg zsop state netlist)
          #v1000000))
  ;;Hint
  ((enable mpg  mpg& decode-mode$value decode-prop$value
           decode-gen$value alu-inc-op)))

(disable mpg$value-zero)

;;;  CARRY-IN-HELP

(defn carry-in-help (czop)
  (let ((c   (car czop))
        (z   (cadr czop))
        (op0 (caddr czop))
        (op1 (cadddr czop))
        (op2 (caddddr czop))
        (op3 (cadddddr czop)))
    (let ((c-   (b-not c))
          (op0- (b-not op0))
          (op1- (b-not op1))
          (op2- (b-not op2))
          (op3- (b-not op3)))
      (let ((c   (b-not c-))
            (op0 (b-not op0-))
            (op1 (b-not op1-))
            (op2 (b-not op2-))
            (op3 (b-not op3-)))

        (b-or (b-nand3 (b-nand3 op1- op2- op3-)
                       (b-nand3 op0- op1- op2)
                       (b-nand3 op0 op1 op2))
              (b-nand3 (b-nand op3 c)
                       (b-nand3 op0- op2- c)
                       (b-nand3 op0- op2 c-)))))))

(disable carry-in-help)

(defn f$carry-in-help (czop)
  (let ((c   (car czop))
        (z   (cadr czop))
        (op0 (caddr czop))
        (op1 (cadddr czop))
        (op2 (caddddr czop))
        (op3 (cadddddr czop)))
    (let ((c-   (f-not c))
          (op0- (f-not op0))
          (op1- (f-not op1))
          (op2- (f-not op2))
          (op3- (f-not op3)))
      (let ((c   (f-not c-))
            (op0 (f-not op0-))
            (op1 (f-not op1-))
            (op2 (f-not op2-))
            (op3 (f-not op3-)))

        (f-or (f-nand3 (f-nand3 op1- op2- op3-)
                       (f-nand3 op0- op1- op2)
                       (f-nand3 op0 op1 op2))
              (f-nand3 (f-nand op3 c)
                       (f-nand3 op0- op2- c)
                       (f-nand3 op0- op2 c-)))))))

(disable f$carry-in-help)

(prove-lemma f$carry-in-help=carry-in-help (rewrite)
  (implies
   (and (bvp czop)
        (equal (length czop) 6))
   (equal (f$carry-in-help czop)
          (carry-in-help czop)))
  ;;Hint
  ((enable carry-in-help f$carry-in-help boolp-b-gates equal-length-add1)
   (disable-theory f-gates b-gates)))

(defn carry-in-help* ()
  '(carry-in-help (cin z op0in op1in op2in op3in) (cout)
                  ((g0  (c- c)     b-nbuf  (cin))
                   (g1  (op0- op0) b-nbuf  (op0in))
                   (g2  (op1- op1) b-nbuf  (op1in))
                   (g3  (op2- op2) b-nbuf  (op2in))
                   (g4  (op3- op3) b-nbuf  (op3in))
                   (g5  (s5)       b-nand3 (op1- op2- op3-))
                   (g6  (s6)       b-nand3 (op0- op1- op2))
                   (g7  (s7)       b-nand3 (op0 op1 op2))
                   (g8  (s8)       b-nand3 (s5 s6 s7))
                   (g9  (s9)       b-nand  (op3 c))
                   (g10 (s10)      b-nand3 (op0- op2- c))
                   (g11 (s11)      b-nand3 (op0- op2 c-))
                   (g12 (s12)      b-nand3 (s9 s10 s11))
                   (g13 (cout)     b-or    (s8 s12)))
                  nil))

(module-predicate carry-in-help*)

(module-netlist carry-in-help*)

(prove-lemma carry-in-help-zero (rewrite)
  (equal (carry-in-help (cons c (cons t (alu-inc-op))))
         t)
  ;;Hint
  ((enable carry-in-help alu-inc-op)))

(disable carry-in-help-zero)

(prove-lemma carry-in-help-if-op-code (rewrite)
  (equal (carry-in-help (cons a (cons b (if c d e))))
         (if c
             (carry-in-help (cons a (cons b d)))
           (carry-in-help (cons a (cons b e))))))

(prove-lemma carry-in-help$value (rewrite)
  (implies
   (carry-in-help& netlist)
   (equal (dual-eval 0 'carry-in-help czop state netlist)
          (list (f$carry-in-help czop))))
  ;;Hint
  ((enable f$carry-in-help carry-in-help& 
           b-nbuf$value b-nand$value b-nand3$value b-nand4$value b-or$value
           equal-length-add1 f-not-f-not=f-buf)
   (disable-theory f-gates)))

(disable carry-in-help$value)

(prove-lemma carry-in-help$value-zero (rewrite)
  (implies
   (and (carry-in-help& netlist)
        (equal czop (list* c t (alu-inc-op))))
   (equal (dual-eval 0 'carry-in-help czop state netlist)
          #v1))
  ;;Hint
  ((enable f$carry-in-help carry-in-help& 
           b-nbuf$value b-nand$value b-nand3$value b-nand4$value b-or$value
           equal-length-add1 f-not-f-not=f-buf alu-inc-op
           boolp-b-gates)
   (disable-theory f-gates)))

(disable carry-in-help$value-zero)   
