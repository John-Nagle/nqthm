;;;  Copyright (C) 1990-1994 Computational Logic, Inc.  All Rights
;;;  Reserved.  See the file LICENSE in this directory for the
;;;  complete license agreement.

;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;;
;;;   CORE-ALU.EVENTS
;;;
;;;   CORE-ALU is the hardware implementation of the high-level specification
;;;   V-ALU.  In addition to the functions provided by V-ALU, CORE-ALU also can
;;;   be forced to 0, and includes INC B and DEC B operations for address
;;;   calculations.  Note that the control lines for the function generators
;;;   (MPG) are supplied by the control logic.
;;;
;;;   Since CORE-ALU is defined in terms of F$FAST-ZERO, only ALU sizes of >= 3
;;;   bits have the desired properties.
;;;
;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(defn f$core-alu (c a b zero mpg op tree)
  (let ((op0 (car op))
        (op1 (cadr op))
        (op2 (caddr op))
        (op3 (cadddr op)))
    (let ((last-bit (sub1 (length a))))
      (let ((alu-help (f$tv-alu-help c a b mpg tree)))
        (let ((alu-p   (car alu-help))
              (alu-g   (cadr alu-help))
              (alu-sum (cddr alu-help)))
          (let ((alu-carry (f$t-carry c alu-p alu-g))
                (out (f$shift-or-buf c alu-sum (nth (sub1 (length a)) a)
                                     zero op0 op1 op2 op3)))
            (cons (f$carry-out-help (nth 0 a) alu-carry zero op0 op1 op2 op3)
                  (cons (f$overflow-help (nth last-bit alu-sum)
                                         (nth last-bit a)
                                         (nth last-bit b)
                                         zero op0 op1 op2 op3)
                        (cons (f$fast-zero out)
                              out)))))))))

(disable f$core-alu)

(defn core-alu (c a b zero mpg op tree)
  (let ((op0 (car op))
        (op1 (cadr op))
        (op2 (caddr op))
        (op3 (cadddr op)))
    (let ((last-bit (sub1 (length a))))
      (let ((alu-help (tv-alu-help c a b mpg tree)))
        (let ((alu-p   (car alu-help))
              (alu-g   (cadr alu-help))
              (alu-sum (cddr alu-help)))
          (let ((alu-carry (t-carry c alu-p alu-g))
                (out (shift-or-buf c alu-sum (nth (sub1 (length a)) a)
                                   zero op0 op1 op2 op3)))
            (cons (carry-out-help (nth 0 a) alu-carry zero op0 op1 op2 op3)
                  (cons (overflow-help (nth last-bit alu-sum)
                                       (nth last-bit a)
                                       (nth last-bit b)
                                       zero op0 op1 op2 op3)
                        (cons (v-zerop out)
                              out)))))))))

(disable core-alu)

(prove-lemma properp-length-f$core-alu (rewrite)
  (and (properp (f$core-alu c a b zero mpg op tree))
       (equal (length (f$core-alu c a b zero mpg op tree))
              (add1 (add1 (add1 (tree-size tree))))))
  ;;Hint
  ((enable f$core-alu)))

(prove-lemma f$core-alu=core-alu (rewrite)
  (implies
   (and (boolp c)
        (bvp a) (equal (length a) (tree-size tree))
        (bvp b) (equal (length b) (tree-size tree))
        (geq (length a) 3)
        (boolp zero)
        (bvp mpg) (equal (length mpg) 7)
        (bvp op) (equal (length op) 4))
   (equal (f$core-alu c a b zero mpg op tree)
          (core-alu c a b zero mpg op tree)))
  ;;Hint
  ((enable core-alu f$core-alu bvp-length)))

(prove-lemma length-core-alu (rewrite)
  (equal (length (core-alu c a b zero mpg op tree))
         (add1 (add1 (add1 (tree-size tree)))))
  ;;Hint
  ((enable core-alu)))

(prove-lemma boolp-bvp-core-alu (rewrite)
  (and (boolp (c (core-alu c a b zero mpg op tree)))
       (boolp (v (core-alu c a b zero mpg op tree)))
       (boolp (zb (core-alu c a b zero mpg op tree)))
       (bvp (bv (core-alu c a b zero mpg op tree)))
       (bvp (core-alu c a b zero mpg op tree)))
  ;;Hint
  ((enable core-alu bvp c v zb bv)
   (disable carry-in-help carry-out-help overflow-help shift-or-buf
            v-zerop)))

(prove-lemma core-alu-works-for-all-normal-cases$crock (rewrite)
  (implies
   (and (bvp a) 
        (equal (length a) (tree-size tree)) 
        (nth 0 a)) 
   (equal (nth 0 a) t))
  ;;hint
  ((enable open-nth bvp)))

(disable core-alu-works-for-all-normal-cases$crock)

(prove-lemma core-alu-works-for-all-normal-cases (rewrite)
  (and

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v0000)
           (core-alu (carry-in-help (cons c (cons f #v0000)))
                     a b f (mpg #v000000) #v0000 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v0001)
           (core-alu (carry-in-help (cons c (cons f #v0001)))
                     a b f (mpg #v000100) #v0001 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v0010)
           (core-alu (carry-in-help (cons c (cons f #v0010)))
                     a b f (mpg #v001000) #v0010 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v0011)
           (core-alu (carry-in-help (cons c (cons f #v0011)))
                     a b f (mpg #v001100) #v0011 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v0100)
           (core-alu (carry-in-help (cons c (cons f #v0100)))
                     a b f (mpg #v010000) #v0100 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v0101)
           (core-alu (carry-in-help (cons c (cons f #v0101)))
                     a b f (mpg #v010100) #v0101 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v0110)
           (core-alu (carry-in-help (cons c (cons f #v0110)))
                     a b f (mpg #v011000) #v0110 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v0111)
           (core-alu (carry-in-help (cons c (cons f #v0111)))
                     a b f (mpg #v011100) #v0111 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v1000)
           (core-alu (carry-in-help (cons c (cons f #v1000)))
                     a b f (mpg #v100000) #v1000 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v1001)
           (core-alu (carry-in-help (cons c (cons f #v1001)))
                     a b f (mpg #v100100) #v1001 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v1010)
           (core-alu (carry-in-help (cons c (cons f #v1010)))
                     a b f (mpg #v101000) #v1010 tree)))

;; The one below breaks with the new CARRY-OUT-HELP.
   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v1011)
           (core-alu (carry-in-help (cons c (cons f #v1011)))
                     a b f (mpg #v101100) #v1011 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v1100)
           (core-alu (carry-in-help (cons c (cons f #v1100)))
                     a b f (mpg #v110000) #v1100 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v1101)
           (core-alu (carry-in-help (cons c (cons f #v1101)))
                     a b f (mpg #v110100) #v1101 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v1110)
           (core-alu (carry-in-help (cons c (cons f #v1110)))
                     a b f (mpg #v111000) #v1110 tree)))

   (implies
    (and (bv2p a b)
         (equal (length a) (tree-size tree))
         (boolp c))
    (equal (v-alu c a b #v1111)
           (core-alu (carry-in-help (cons c (cons f #v1111)))
                     a b f (mpg #v111100) #v1111 tree))))
  ;;Hint
  ((disable t-carry tv-alu-help)
   (enable
    core-alu
    v-alu
    boolp
    mpg
    carry-in-help
    tv-alu-help-tv-neg-works
    tv-alu-help-v-and-works
    tv-alu-help-v-or-works
    tv-alu-help-v-xor-works
    tv-alu-help-v-not-works
    tv-alu-help-v-buf-works
    tv-alu-help-tv-adder-works
    tv-alu-help-tv-subtracter-works
    tv-alu-help-tv-inc-a-works
    tv-alu-help-tv-dec-a-works
    tv-alu-help-tv-neg-works
    tv-adder-as-p-g-sum
    core-alu-works-for-all-normal-cases$crock)))

(disable core-alu-works-for-all-normal-cases)

(prove-lemma cases-on-a-4-bit-bvp ()
  (implies
   (and (bvp op)
        (equal (length op) 4)
        (cond ((equal op #v0000) p)
              ((equal op #v0001) p)
              ((equal op #v0010) p)
              ((equal op #v0011) p)
              ((equal op #v0100) p)
              ((equal op #v0101) p)
              ((equal op #v0110) p)
              ((equal op #v0111) p)
              ((equal op #v1000) p)
              ((equal op #v1001) p)
              ((equal op #v1010) p)
              ((equal op #v1011) p)
              ((equal op #v1100) p)
              ((equal op #v1101) p)
              ((equal op #v1110) p)
              ((equal op #v1111) p)
              (t t)))
   p)
  ;;Hint
  ((enable equal-length-add1)))

(prove-lemma core-alu-is-v-alu (rewrite)
  (implies
   (and (bv2p a b)
        (equal (length a) (tree-size tree))
        (bvp op)
        (equal (length op) 4)
        (not zero)
        (equal mpg (mpg (cons zero (cons f op))))
        (boolp c))
   (equal (core-alu (carry-in-help (cons c (cons f op)))
                    a b zero mpg op tree)
          (v-alu c a b op)))
  ;;Hint
  ((use (cases-on-a-4-bit-bvp
         (p (equal (core-alu (carry-in-help (cons c (cons f op)))
                             a b zero mpg op tree)
                   (v-alu c a b op)))))
   (disable boolp-lemmas bv2p bvp length core-alu v-alu tree-size
            mpg *1*mpg)
   (enable core-alu-works-for-all-normal-cases)))

(prove-lemma core-alu-works-for-zero-case (rewrite)
  (implies
   (and (equal (length a) (tree-size tree))
        zero)
   (equal (core-alu t a b zero #v1000000 op tree)
          (cvzbv f f (make-list (length a) f))))
  ;;Hint
  ((enable core-alu tv-alu-help-zero)))

(prove-lemma core-alu-works-as-inc-b (rewrite)
  (implies
   (and (bv2p a b)
        (equal (length a) (tree-size tree))
        (not zero)
        swap)
   (equal (bv (core-alu (carry-in-help (cons c (cons zero (alu-inc-op))))
                        a b zero
                        (mpg (cons zero (cons swap (alu-inc-op))))
                        (alu-inc-op) tree))
          (v-inc b)))
  ;;Hint
  ((disable tv-alu-help)
   (enable alu-inc-op v-inc bv core-alu mpg carry-in-help
           tv-alu-help-tv-inc-b-works tv-adder-as-p-g-sum)))

(prove-lemma core-alu-works-as-dec-b (rewrite)
  (implies
   (and (bv2p a b)
        (equal (length a) (tree-size tree))
        (not zero)
        swap)
   (equal (bv (core-alu (carry-in-help (cons c (cons zero (alu-dec-op))))
                        a b zero
                        (mpg (cons zero (cons swap (alu-dec-op))))
                        (alu-dec-op) tree))
          (v-dec b)))
  ;;Hint
  ((disable tv-alu-help)
   (enable alu-dec-op v-dec bv core-alu mpg carry-in-help
           tv-alu-help-tv-dec-b-works tv-adder-as-p-g-sum)))

;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;;;
;;;    CORE-ALU*
;;;
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

(defn core-alu* (tree)
  (let ((a-names       (indices 'a 0 (tree-size tree)))
        (b-names       (indices 'b 0 (tree-size tree)))
        (mpg-names     (indices 'mpg 0 7))
        (op-names      (indices 'op 0 4))
        (alu-out-names (indices 'alu-out 0 (tree-size tree)))
        (out-names     (indices 'out 0 (tree-size tree)))
        (last-a        (index 'a (sub1 (tree-size tree))))
        (last-b        (index 'b (sub1 (tree-size tree))))
        (last-alu-out  (index 'alu-out (sub1 (tree-size tree)))))
    (list
     ;;  Name
     (index 'core-alu (tree-number tree))
     ;;  Inputs
     (cons 'c (append a-names (append b-names
                                     (cons 'zero
                                           (append mpg-names op-names)))))
     ;;  Outputs
     (cons 'carry (cons 'overflow (cons 'zerop out-names)))
     ;;  Body
     (list
      (list 'm-alu
            (cons 'p (cons 'g alu-out-names))
            (index 'tv-alu-help (tree-number tree))
            (cons 'c (append a-names (append b-names mpg-names))))
      (list 'm-alu-carry
            '(alu-carry)
            't-carry
            '(c p g))
      (list 'm-carry-out-help
            '(carry)
            'carry-out-help
            (cons (index 'a 0)
                  (list 'alu-carry 'zero
                        #i(op 0) #i(op 1) #i(op 2) #i(op 3))))
      (list 'm-overflow-help
            '(overflow)
            'overflow-help
            (list last-alu-out last-a last-b 'zero
                  #i(op 0) #i(op 1) #i(op 2) #i(op 3)))
      (list 'm-shift
            out-names
            (index 'tv-shift-or-buf (tree-number tree))
            (cons 'c (append alu-out-names
                             (list last-a 'zero
                                   #i(op 0) #i(op 1)
                                   #i(op 2) #i(op 3)))))
      (list 'm-zerop
            '(zerop)
            #i(fast-zero (tree-size tree))
            out-names))
     ;;  States
     nil)))

(destructuring-lemma core-alu*)

(defn core-alu& (netlist tree)
  (and
   (equal (lookup-module (index 'core-alu (tree-number tree)) netlist)
          (core-alu* tree))
   (let ((netlist
          (delete-module (index 'core-alu (tree-number tree)) netlist)))
     (and (tv-alu-help&     netlist tree)
          (t-carry&         netlist)
          (carry-out-help&  netlist)
          (overflow-help&   netlist)
          (tv-shift-or-buf& netlist tree)
          (fast-zero&       netlist (tree-size tree))))))

(disable core-alu&)  

(defn core-alu$netlist (tree)
  (cons
   (core-alu* tree)
   (union
    (tv-alu-help$netlist tree)
    (union (t-carry$netlist)
           (union (carry-out-help$netlist)
                  (union (overflow-help$netlist)
                         (union (tv-shift-or-buf$netlist tree)
                                (fast-zero$netlist (tree-size tree)))))))))

(prove-lemma core-alu$value (rewrite)
  (implies
   (and (core-alu& netlist tree)
        (equal (length a) (tree-size tree))
        (equal (length b) (tree-size tree))
        (geq (length a) 3)
        (properp a) (properp b)
        (properp op) (equal (length op) 4)
        (properp mpg) (equal (length mpg) 7))
   (equal (dual-eval 0 (index 'core-alu (tree-number tree))
                     (cons c (append a (append b (cons zero (append mpg op)))))
                     state netlist)
          (f$core-alu c a b zero mpg op tree)))
  ;;Hint
  ((enable f$core-alu core-alu& tv-shift-or-buf$value
           core-alu*$destructure
           tv-alu-help$value t-carry$value
           carry-out-help$value overflow-help$value fast-zero$value
           open-nth)
   (disable *1*indices open-indices indices)))

(disable core-alu$value)
