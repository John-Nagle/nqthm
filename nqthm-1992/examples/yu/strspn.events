#|

 Copyright (C) 1994 by Yuan Yu.  All Rights Reserved.

 This script is hereby placed in the public domain, and therefore unlimited
 editing and redistribution is permitted.

 NO WARRANTY

 Yuan Yu PROVIDES ABSOLUTELY NO WARRANTY.  THE EVENT SCRIPT IS PROVIDED "AS IS"
 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT
 LIMITED TO, ANY IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
 SCRIPT IS WITH YOU.  SHOULD THE SCRIPT PROVE DEFECTIVE, YOU ASSUME THE COST OF
 ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 IN NO EVENT WILL Yuan Yu BE LIABLE TO YOU FOR ANY DAMAGES, ANY LOST PROFITS,
 LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT
 OF THE USE OR INABILITY TO USE THIS SCRIPT (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THIRD
 PARTIES), EVEN IF YOU HAVE ADVISED US OF THE POSSIBILITY OF SUCH DAMAGES, OR
 FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mc20-2" t)
;          Proof of the Correctness of the STRSPN Function
#|
This is part of our effort to verify the Berkeley C string library.  The 
Berkeley string library is widely used as part of the Berkeley Unix OS.

This is the source code of strspn function in the Berkeley string library.

size_t
strspn(s1, s2)
	const char *s1;
	register const char *s2;
{
	register const char *p = s1, *spanp;
	register char c, sc;

	/*
	 * Skip any characters in s2, excluding the terminating \0.
	 */
cont:
	c = *p++;
	for (spanp = s2; (sc = *spanp++) != 0;)
		if (sc == c)
			goto cont;
	return (p - 1 - s1);
}

The MC68020 assembly code of the C function strspn on SUN-3 is given as 
follows.  This binary is generated by "gcc -O".

0x26e8 <strspn>:        linkw fp,#0
0x26ec <strspn+4>:      movel d2,sp@-
0x26ee <strspn+6>:      movel fp@(8),d2
0x26f2 <strspn+10>:     moveal d2,a1
0x26f4 <strspn+12>:     moveb a1@+,d1
0x26f6 <strspn+14>:     moveal fp@(12),a0
0x26fa <strspn+18>:     bra 0x2700 <strspn+24>
0x26fc <strspn+20>:     cmpb d0,d1
0x26fe <strspn+22>:     beq 0x26f4 <strspn+12>
0x2700 <strspn+24>:     moveb a0@+,d0
0x2702 <strspn+26>:     bne 0x26fc <strspn+20>
0x2704 <strspn+28>:     movel d2,d0
0x2706 <strspn+30>:     addql #1,d0
0x2708 <strspn+32>:     subl a1,d0
0x270a <strspn+34>:     negl d0
0x270c <strspn+36>:     movel fp@(-4),d2
0x2710 <strspn+40>:     unlk fp
0x2712 <strspn+42>:     rts

The machine code of the above program is:

<strspn>:      0x4e56  0x0000  0x2f02  0x242e  0x0008  0x2242  0x1219  0x206e
<strspn+16>:   0x000c  0x6004  0xb200  0x67f4  0x1018  0x66f8  0x2002  0x5280
<strspn+32>:   0x9089  0x4480  0x242e  0xfffc  0x4e5e  0x4e75

'(78      86      0       0       47      2       36      46
  0       8       34      66      18      25      32      110
  0       12      96      4       178     0       103     244
  16      24      102     248     32      2       82      128
  144     137     68      128     36      46      255     252
  78      94      78      117)
|#

; in the logic, the above program is defined by (strspn-code). 
(defn strspn-code ()
  '(78      86      0       0       47      2       36      46
    0       8       34      66      18      25      32      110
    0       12      96      4       178     0       103     244
    16      24      102     248     32      2       82      128
    144     137     68      128     36      46      255     252
    78      94      78      117))

; the computation time of the program.
(defn strspn-t0 (i2 n2 lst2 ch)
  (if (lessp i2 n2)
      (if (equal (get-nth i2 lst2) 0)
	  9
	(if (equal (get-nth i2 lst2) ch)
	    4
	  (splus 4 (strspn-t0 (add1 i2) n2 lst2 ch))))
    0)
  ((lessp (difference n2 i2))))

(defn strspn-t1 (n2 lst2 ch)
  (splus 3 (strspn-t0 0 n2 lst2 ch)))

(defn strspn-t2 (i1 n1 lst1 n2 lst2)
  (if (lessp i1 n1)
      (if (strchr1 0 n2 lst2 (get-nth i1 lst1))
	  (splus (strspn-t1 n2 lst2 (get-nth i1 lst1))
		 (strspn-t2 (add1 i1) n1 lst1 n2 lst2))
	(strspn-t1 n2 lst2 (get-nth i1 lst1)))
    0)
  ((lessp (difference n1 i1))))

(defn strspn-t (n1 lst1 n2 lst2)
  (splus 4 (strspn-t2 0 n1 lst1 n2 lst2)))

; two induction hints.
(defn strspn-induct0 (s i2* i2 n2 lst2 ch)
  (if (lessp i2 n2)
      (if (equal (get-nth i2 lst2) 0)
	  t
	(if (equal (get-nth i2 lst2) ch)
	    t
	  (strspn-induct0 (stepn s 4) (add 32 i2* 1) (add1 i2) n2 lst2 ch)))
    t)
  ((lessp (difference n2 i2))))

(defn strspn-induct1 (s i1* i1 n1 lst1 n2 lst2)
  (if (lessp i1 n1)
      (if (strchr1 0 n2 lst2 (get-nth i1 lst1))
	  (strspn-induct1 (stepn s (strspn-t1 n2 lst2 (get-nth i1 lst1)))
			  (add 32 i1* 1) (add1 i1) n1 lst1 n2 lst2)
	t)
    t)
  ((lessp (difference n1 i1))))

; the preconditions of the initial state.
(defn strspn-statep (s str1 n1 lst1 str2 n2 lst2)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (mc-pc s) (mc-mem s) 44)
       (mcode-addrp (mc-pc s) (mc-mem s) (strspn-code))
       (ram-addrp (sub 32 8 (read-sp s)) (mc-mem s) 20)
       (ram-addrp str1 (mc-mem s) n1)
       (mem-lst 1 str1 (mc-mem s) n1 lst1)
       (ram-addrp str2 (mc-mem s) n2)
       (mem-lst 1 str2 (mc-mem s) n2 lst2)
       (disjoint (sub 32 8 (read-sp s)) 20 str1 n1)
       (disjoint (sub 32 8 (read-sp s)) 20 str2 n2)
       (equal str1 (read-mem (add 32 (read-sp s) 4) (mc-mem s) 4))
       (equal str2 (read-mem (add 32 (read-sp s) 8) (mc-mem s) 4))
       (lessp (slen 0 n1 lst1) n1)
       (lessp (slen 0 n2 lst2) n2)
       (numberp n1)
       (numberp n2)
       (uint-rangep n1 32)
       (uint-rangep n2 32)))

(defn strspn-s0p (s i1* i1 str1 n1 lst1 str2 n2 lst2)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (sub 32 12 (mc-pc s)) (mc-mem s) 44)
       (mcode-addrp (sub 32 12 (mc-pc s)) (mc-mem s) (strspn-code))
       (ram-addrp (sub 32 4 (read-an 32 6 s)) (mc-mem s) 20)
       (ram-addrp str1 (mc-mem s) n1)
       (mem-lst 1 str1 (mc-mem s) n1 lst1)
       (ram-addrp str2 (mc-mem s) n2)
       (mem-lst 1 str2 (mc-mem s) n2 lst2)
       (disjoint (sub 32 4 (read-an 32 6 s)) 20 str1 n1)
       (disjoint (sub 32 4 (read-an 32 6 s)) 20 str2 n2)
       (equal* (read-an 32 1 s) (add 32 str1 i1*))
       (equal str2 (read-mem (add 32 (read-an 32 6 s) 12) (mc-mem s) 4))
       (equal str1 (read-dn 32 2 s))
       (numberp i1*)
       (nat-rangep i1* 32)
       (equal i1 (nat-to-uint i1*))
       (lessp (slen i1 n1 lst1) n1)
       (lessp (slen 0 n2 lst2) n2)
       (numberp n1)
       (numberp n2)
       (uint-rangep n1 32)
       (uint-rangep n2 32)))

(defn strspn-s1-1p (s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (sub 32 24 (mc-pc s)) (mc-mem s) 44)
       (mcode-addrp (sub 32 24 (mc-pc s)) (mc-mem s) (strspn-code))
       (ram-addrp (sub 32 4 (read-an 32 6 s)) (mc-mem s) 20)
       (ram-addrp str2 (mc-mem s) n2)
       (mem-lst 1 str2 (mc-mem s) n2 lst2)
       (disjoint (sub 32 4 (read-an 32 6 s)) 20 str2 n2)
       (equal str1 (read-dn 32 2 s))
       (equal str2 (read-mem (add 32 (read-an 32 6 s) 12) (mc-mem s) 4))
       (equal ch (uread-dn 8 1 s))
       (equal* (read-an 32 1 s) (add 32 str1 i1*))
       (equal* (read-an 32 0 s) (add 32 str2 i2*))
       (numberp i1*)
       (nat-rangep i1* 32)
       (equal i1 (nat-to-uint i1*))
       (numberp i2*)
       (nat-rangep i2* 32)
       (equal i2 (nat-to-uint i2*))
       (lessp (slen i2 n2 lst2) n2)
       (numberp n2)
       (uint-rangep n2 32)))       

(defn strspn-s1p (s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
  (and (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
       (ram-addrp str1 (mc-mem s) n1)
       (mem-lst 1 str1 (mc-mem s) n1 lst1)
       (disjoint (sub 32 4 (read-an 32 6 s)) 20 str1 n1)
       (lessp (slen i1 n1 lst1) n1)
       (lessp (slen 0 n2 lst2) n2)
       (numberp n1)
       (uint-rangep n1 32)))

; from the initial state s to s0: s --> s0.
(prove-lemma strspn-s-s0 ()
     (implies (strspn-statep s str1 n1 lst1 str2 n2 lst2)
              (strspn-s0p (stepn s 4) 0 0 str1 n1 lst1 str2 n2 lst2)))

(prove-lemma strspn-s-s0-else (rewrite)
     (implies (strspn-statep s str1 n1 lst1 str2 n2 lst2)
              (and (equal (linked-rts-addr (stepn s 4)) (rts-addr s))
                   (equal (linked-a6 (stepn s 4)) (read-an 32 6 s))
                   (equal (read-rn 32 14 (mc-rfile (stepn s 4)))
                          (sub 32 4 (read-sp s)))
		   (equal (rn-saved (stepn s 4)) 
			  (read-rn 32 2 (mc-rfile s))))))

(prove-lemma strspn-s-s0-rfile (rewrite)
     (implies (and (strspn-statep s str1 n1 lst1 str2 n2 lst2)
		   (d3-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 4)))
		     (read-rn oplen rn (mc-rfile s)))))

(prove-lemma strspn-s-s0-mem (rewrite)
     (implies (and (strspn-statep s str1 n1 lst1 str2 n2 lst2)
		   (disjoint x k (sub 32 8 (read-sp s)) 20))
	      (equal (read-mem x (mc-mem (stepn s 4)) k)
		     (read-mem x (mc-mem s) k))))

; loop 0.
; from s0 to s1: s0 --> s1.
(prove-lemma strspn-s0-s1-1 ()
     (implies (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
	      (strspn-s1-1p (stepn s 3) (add 32 i1* 1) (add1 i1) str1 n1 
			    lst1 0 0 str2 n2 lst2 (get-nth i1 lst1))))

(prove-lemma strchr1-la ()
     (implies (strchr1 i2 n2 lst2 ch)
	      (not (equal ch 0))))

(prove-lemma strspn-s0-s1 ()
     (implies (and (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
		   (strchr1 0 n2 lst2 (get-nth i1 lst1)))
	      (strspn-s1p (stepn s 3) (add 32 i1* 1) (add1 i1) str1 n1 
			  lst1 0 0 str2 n2 lst2 (get-nth i1 lst1)))
     ((use (strchr1-la (i2 0) (ch (get-nth i1 lst1))))))

(prove-lemma strspn-s0-s1-else (rewrite)
     (let ((s1 (stepn s 3)))
       (implies (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
		(and (equal (read-rn 32 14 (mc-rfile s1))
			    (read-rn 32 14 (mc-rfile s)))
                   (equal (linked-a6 s1) (linked-a6 s))
                   (equal (linked-rts-addr s1) (linked-rts-addr s))
                   (equal (rn-saved s1) (rn-saved s))
		   (equal (read-mem x (mc-mem s1) k)
			  (read-mem x (mc-mem s) k))))))

(prove-lemma strspn-s0-s1-rfile (rewrite)
     (implies (and (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
		   (d3-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 3)))
		     (read-rn oplen rn (mc-rfile s)))))

; loop 1.
; base case 1. from s1 to exit: s1 --> sn, when lst1[i] == 0.
(prove-lemma strspn-s1-sn-base (rewrite)
     (implies (and (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
		   (equal (get-nth i2 lst2) 0))
	      (and (equal (mc-status (stepn s 9)) 'running)
		   (equal (mc-pc (stepn s 9)) (linked-rts-addr s))
		   (equal (read-dn 32 0 (stepn s 9)) (sub 32 1 i1*))
		   (equal (read-rn 32 14 (mc-rfile (stepn s 9)))
			  (linked-a6 s))
		   (equal (read-rn 32 15 (mc-rfile (stepn s 9)))
			  (add 32 (read-an 32 6 s) 8))
		   (equal (read-mem x (mc-mem (stepn s 9)) k)
			  (read-mem x (mc-mem s) k)))))			  

(prove-lemma strspn-s1-sn-rfile-base (rewrite)
     (implies (and (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
		   (equal (get-nth i2 lst2) 0)
		   (leq oplen 32)
		   (d2-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 9)))
		     (if (d3-7a2-5p rn)
			 (read-rn oplen rn (mc-rfile s))
		       (head (rn-saved s) oplen)))))

; base case 2.  s1 --> s0, when lst1[i] =\= 0  and lst2[j] = ch.
(prove-lemma strspn-s1-s0-base (rewrite)
     (implies (and (strspn-s1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
		   (not (equal (get-nth i2 lst2) 0))
		   (equal (get-nth i2 lst2) ch))
	      (and (strspn-s0p (stepn s 4) i1* i1 str1 n1 lst1 str2 n2 lst2)
		   (equal (read-rn 32 14 (mc-rfile (stepn s 4)))
                          (read-rn 32 14 (mc-rfile s)))
		   (equal (linked-a6 (stepn s 4)) (linked-a6 s))
		   (equal (linked-rts-addr (stepn s 4)) 
			  (linked-rts-addr s))
		   (equal (read-mem x (mc-mem (stepn s 4)) k)
			  (read-mem x (mc-mem s) k)))))

(prove-lemma strspn-s1-s0-rfile-base (rewrite)
     (implies (and (strspn-s1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
		   (not (equal (get-nth i2 lst2) 0))
                   (equal (get-nth i2 lst2) ch)
		   (d3-7a2-5p rn))
              (equal (read-rn oplen rn (mc-rfile (stepn s 4)))
                     (read-rn oplen rn (mc-rfile s)))))

; induction case. s1 --> s1, when lst1[i] =\= 0 and lst2[j] =\= ch.
(prove-lemma strspn-s1-s1-1 (rewrite)
     (implies (and (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
		   (not (equal (get-nth i2 lst2) 0))
		   (not (equal (get-nth i2 lst2) ch)))
	      (and (strspn-s1-1p (stepn s 4) i1* i1 str1 n1 lst1 (add 32 i2* 1)
				 (add1 i2) str2 n2 lst2 ch)
		   (equal (read-rn 32 14 (mc-rfile (stepn s 4)))
                          (read-rn 32 14 (mc-rfile s)))
		   (equal (linked-a6 (stepn s 4)) (linked-a6 s))
		   (equal (linked-rts-addr (stepn s 4)) 
			  (linked-rts-addr s))
		   (equal (rn-saved (stepn s 4)) (rn-saved s))
		   (equal (read-mem x (mc-mem (stepn s 4)) k)
			  (read-mem x (mc-mem s) k)))))

(prove-lemma strspn-s1-s1 (rewrite)
     (implies (and (strspn-s1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
                   (not (equal (get-nth i2 lst2) 0))
                   (not (equal (get-nth i2 lst2) ch)))
              (strspn-s1p (stepn s 4) i1* i1 str1 n1 lst1 (add 32 i2* 1)
			  (add1 i2) str2 n2 lst2 ch)))

(prove-lemma strspn-s1-s1-rfile (rewrite)
     (implies (and (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
                   (not (equal (get-nth i2 lst2) 0))
                   (not (equal (get-nth i2 lst2) ch))
                   (d3-7a2-5p rn))
              (equal (read-rn oplen rn (mc-rfile (stepn s 4)))
                     (read-rn oplen rn (mc-rfile s)))))

; put together.
; case 1. s1 --> exit, when (not (strchr1 i2 n2 lst2 ch)).
(prove-lemma strspn-s1-1p-info (rewrite)
     (implies (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
              (equal (lessp i2 n2) t)))

(prove-lemma strspn-s1-sn (rewrite)
     (let ((sn (stepn s (strspn-t0 i2 n2 lst2 ch))))
       (implies
	(and (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
	     (not (strchr1 i2 n2 lst2 ch)))
	(and (equal (mc-status sn) 'running)
	     (equal (mc-pc sn) (linked-rts-addr s))
	     (equal (read-dn 32 0 sn) (sub 32 1 i1*))
	     (equal (read-rn 32 14 (mc-rfile sn)) (linked-a6 s))
	     (equal (read-rn 32 15 (mc-rfile sn)) (add 32 (read-an 32 6 s) 8))
	     (equal (read-mem x (mc-mem sn) k)
		    (read-mem x (mc-mem s) k)))))
     ((induct (strspn-induct0 s i2* i2 n2 lst2 ch))
      (disable strspn-s1-1p read-dn)))

(prove-lemma strspn-s1-sn-rfile (rewrite)
     (implies
      (and (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
	   (not (strchr1 i2 n2 lst2 ch))
           (d2-7a2-5p rn)
           (leq oplen 32))
      (equal (read-rn oplen rn (mc-rfile (stepn s (strspn-t0 i2 n2 lst2 ch))))
             (if (d3-7a2-5p rn)
                 (read-rn oplen rn (mc-rfile s))
	       (head (rn-saved s) oplen))))
     ((induct (strspn-induct0 s i2* i2 n2 lst2 ch))
      (disable strspn-s1-1p)))

(disable strspn-s1-1p-info)

; case 2. s1 --> s0, when (strchr1 i2 n2 lst2 ch).
(prove-lemma strspn-s1p-s1-1p ()
     (implies (strspn-s1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
              (strspn-s1-1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)))

(prove-lemma strspn-s1-s0 (rewrite)
     (let ((s0 (stepn s (strspn-t0 i2 n2 lst2 ch))))
       (implies (and (strspn-s1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
		     (strchr1 i2 n2 lst2 ch))
		(and (strspn-s0p s0 i1* i1 str1 n1 lst1 str2 n2 lst2)
		     (equal (read-rn 32 14 (mc-rfile s0))
			    (read-rn 32 14 (mc-rfile s)))
		     (equal (linked-a6 s0) (linked-a6 s))
		     (equal (linked-rts-addr s0) (linked-rts-addr s))
		     (equal (rn-saved s0) (rn-saved s))
		     (equal (read-mem x (mc-mem s0) k)
			    (read-mem x (mc-mem s) k)))))
     ((induct (strspn-induct0 s i2* i2 n2 lst2 ch))
      (use (strspn-s1p-s1-1p))
      (disable strspn-s0p strspn-s1p strspn-s1-1p)))

(prove-lemma strspn-s1-s0-rfile (rewrite)
     (implies 
      (and (strspn-s1p s i1* i1 str1 n1 lst1 i2* i2 str2 n2 lst2 ch)
	   (strchr1 i2 n2 lst2 ch)
	   (d3-7a2-5p rn))
      (equal (read-rn oplen rn (mc-rfile (stepn s (strspn-t0 i2 n2 lst2 ch))))
	     (read-rn oplen rn (mc-rfile s))))
     ((induct (strspn-induct0 s i2* i2 n2 lst2 ch))
      (use (strspn-s1p-s1-1p))
      (disable strspn-s1p strspn-s1-1p)))

; from s0 --> exit. s0 --> sn.
; base case:  s0 --> sn,  when (not (strchr1 i2 n2 lst2 ch)).
(prove-lemma strspn-s0-sn-base (rewrite)
     (let ((sn (stepn s (strspn-t1 n2 lst2 (get-nth i1 lst1)))))
       (implies (and (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
		     (not (strchr1 0 n2 lst2 (get-nth i1 lst1))))
		(and (equal (mc-status sn) 'running)
		     (equal (mc-pc sn) (linked-rts-addr s))
		     (equal (read-dn 32 0 sn) (head i1* 32))
		     (equal (read-rn 32 14 (mc-rfile sn)) (linked-a6 s))
		     (equal (read-rn 32 15 (mc-rfile sn))
			    (add 32 (read-an 32 6 s) 8))
		     (equal (read-mem x (mc-mem sn) k)
			    (read-mem x (mc-mem s) k)))))
     ((use (strspn-s0-s1-1))
      (disable strspn-s0p strspn-s1-1p strchr1 strspn-t0 read-dn)))

(prove-lemma strspn-s0-sn-rfile-base (rewrite)
     (let ((ch (get-nth i1 lst1)))
       (implies 
	(and (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
	     (not (strchr1 0 n2 lst2 ch))
	     (leq oplen 32)
	     (d2-7a2-5p rn))
	(equal (read-rn oplen rn (mc-rfile (stepn s (strspn-t1 n2 lst2 ch))))
	       (if (d3-7a2-5p rn)
		   (read-rn oplen rn (mc-rfile s))
		 (head (rn-saved s) oplen)))))
     ((use (strspn-s0-s1-1))
      (disable strspn-s0p strspn-s1-1p strchr1 strspn-t0)))

; induction case: s0 --> s0,  when (strchr1 i2 n2 lst2 ch).
(prove-lemma strspn-s0-s0 (rewrite)
     (let ((s0 (stepn s (strspn-t1 n2 lst2 (get-nth i1 lst1)))))
       (implies (and (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
		     (strchr1 0 n2 lst2 (get-nth i1 lst1)))
		(and (strspn-s0p s0 (add 32 i1* 1) (add1 i1) str1 n1 lst1 
				 str2 n2 lst2)
		     (equal (read-rn 32 14 (mc-rfile s0))
			    (read-rn 32 14 (mc-rfile s)))
		     (equal (linked-a6 s0) (linked-a6 s))
		     (equal (linked-rts-addr s0) (linked-rts-addr s))
		     (equal (rn-saved s0) (rn-saved s))
		     (equal (read-mem x (mc-mem s0) k)
			    (read-mem x (mc-mem s) k)))))
     ((use (strspn-s0-s1))
      (disable strspn-s0p strspn-s1p strspn-t0 strchr1)))

(prove-lemma strspn-s0-s0-rfile (rewrite)
     (let ((ch (get-nth i1 lst1)))
       (implies 
	(and (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
	     (strchr1 0 n2 lst2 ch)
	     (d3-7a2-5p rn))
	(equal (read-rn oplen rn (mc-rfile (stepn s (strspn-t1 n2 lst2 ch))))
	       (read-rn oplen rn (mc-rfile s)))))
     ((use (strspn-s0-s1))
      (disable strspn-s0p strspn-s1p strspn-t0 strchr1)))

; put together: s0 --> sn.
(prove-lemma strspn-s0p-info (rewrite)
     (implies (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
	      (and (equal (lessp i1 n1) t)
		   (equal (nat-to-uint (head i1* 32)) (fix i1)))))

(prove-lemma strspn-s0-sn (rewrite)
     (let ((sn (stepn s (strspn-t2 i1 n1 lst1 n2 lst2))))
       (implies (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
		(and (equal (mc-status sn) 'running)
		     (equal (mc-pc sn) (linked-rts-addr s))
		     (equal (uread-dn 32 0 sn) (strspn i1 n1 lst1 n2 lst2))
		     (equal (read-rn 32 14 (mc-rfile sn)) (linked-a6 s))
		     (equal (read-rn 32 15 (mc-rfile sn))
			    (add 32 (read-an 32 6 s) 8))
		     (equal (read-mem x (mc-mem sn) k)
			    (read-mem x (mc-mem s) k)))))
     ((induct (strspn-induct1 s i1* i1 n1 lst1 n2 lst2))
      (disable strspn-s0p strchr1 strspn-t1 read-dn)))

(prove-lemma strspn-s0-sn-rfile (rewrite)
     (implies
      (and (strspn-s0p s i1* i1 str1 n1 lst1 str2 n2 lst2)
           (d2-7a2-5p rn)
           (leq oplen 32))
      (equal (read-rn oplen rn 
		      (mc-rfile (stepn s (strspn-t2 i1 n1 lst1 n2 lst2))))
             (if (d3-7a2-5p rn)
                 (read-rn oplen rn (mc-rfile s))
               (head (rn-saved s) oplen))))
     ((induct (strspn-induct1 s i1* i1 n1 lst1 n2 lst2))
      (disable strspn-s0p strchr1 strspn-t1)))

; the correctness of strspn.
(prove-lemma strspn-correctness (rewrite)
     (let ((sn (stepn s (strspn-t n1 lst1 n2 lst2))))
       (implies (strspn-statep s str1 n1 lst1 str2 n2 lst2)
		(and (equal (mc-status sn) 'running)
		     (equal (mc-pc sn) (rts-addr s))
		     (equal (read-rn 32 14 (mc-rfile sn)) (read-an 32 6 s))
		     (equal (read-rn 32 15 (mc-rfile sn))
			    (add 32 (read-an 32 7 s) 4))
		     (implies (and (d2-7a2-5p rn)
				   (leq oplen 32))
			      (equal (read-rn oplen rn (mc-rfile sn))
				     (read-rn oplen rn (mc-rfile s))))
		     (implies (disjoint x k (sub 32 8 (read-sp s)) 20)
			      (equal (read-mem x (mc-mem sn) k)
				     (read-mem x (mc-mem s) k)))
		     (equal (uread-dn 32 0 sn) (strspn 0 n1 lst1 n2 lst2)))))
     ((use (strspn-s-s0))
      (disable strspn-statep strspn-s0p linked-rts-addr linked-a6 uread-dn)))

(disable strspn-s0p-info)
(disable strspn-t)

; some properties of strspn.
; see file cstring.events