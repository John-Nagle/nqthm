#|

 Copyright (C) 1994 by Yuan Yu.  All Rights Reserved.

 This script is hereby placed in the public domain, and therefore unlimited
 editing and redistribution is permitted.

 NO WARRANTY

 Yuan Yu PROVIDES ABSOLUTELY NO WARRANTY.  THE EVENT SCRIPT IS PROVIDED "AS IS"
 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT
 LIMITED TO, ANY IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
 SCRIPT IS WITH YOU.  SHOULD THE SCRIPT PROVE DEFECTIVE, YOU ASSUME THE COST OF
 ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 IN NO EVENT WILL Yuan Yu BE LIABLE TO YOU FOR ANY DAMAGES, ANY LOST PROFITS,
 LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT
 OF THE USE OR INABILITY TO USE THIS SCRIPT (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THIRD
 PARTIES), EVEN IF YOU HAVE ADVISED US OF THE POSSIBILITY OF SUCH DAMAGES, OR
 FOR ANY CLAIM BY ANY OTHER PARTY.

|#

;              Proof of the Correctness of a LOG2 Program
(note-lib "mc20-2" t)
#|

The following C function computes the integer logarithm (base 2) of a
nonnegative integer.  We proved the correctness of the binary of this
C function.  The binary is produced by Gnu C compiler.

The proof described here was worked out with Matt Kaufmann and Bill
Pierce.

/* computes the integer logarithm of a nonnegative integer. */
log2(int n)
{
  int log = 0;
  while (n > 1) {
    log++;
    n /= 2;}
  return(log);
}

Here is the MC68020 assembly code of the above LOG2 program.  The code is 
generated by "gcc -O".

0x22ce <log2>:          linkw fp,#0
0x22d2 <log2+4>:        movel d2,sp@-
0x22d4 <log2+6>:        movel fp@(8),d0
0x22d8 <log2+10>:       clrl d1
0x22da <log2+12>:       bra 0x22e6 <log2+24>
0x22dc <log2+14>:       addql #1,d1
0x22de <log2+16>:       tstl d0
0x22e0 <log2+18>:       bge 0x22e4 <log2+22>
0x22e2 <log2+20>:       addql #1,d0
0x22e4 <log2+22>:       asrl #1,d0
0x22e6 <log2+24>:       movel #1,d2
0x22e8 <log2+26>:       cmpl d0,d2
0x22ea <log2+28>:       blt 0x22dc <log2+14>
0x22ec <log2+30>:       movel d1,d0
0x22ee <log2+32>:       movel fp@(-4),d2
0x22f2 <log2+36>:       unlk fp
0x22f4 <log2+38>:       rts

<log2>:      0x4e56  0x0000  0x2f02  0x202e  0x0008  0x4281  0x600a  0x5281
<log2+16>:   0x4a80  0x6c02  0x5280  0xe280  0x7401  0xb480  0x6df0  0x2001
<log2+32>:   0x242e  0xfffc  0x4e5e  0x4e75

'(78      86      0       0       47      2       32      46
  0       8       66      129     96      10      82      129
  74      128     108     2       82      128     226     128
  116     1       180     128     109     240     32      1
  36      46      255     252     78      94      78      117)
|#

; in Nqthm, log2 is defined as:
(defn log2-code ()
  '(78      86      0       0       47      2       32      46
    0       8       66      129     96      10      82      129
    74      128     108     2       82      128     226     128
    116     1       180     128     109     240     32      1
    36      46      255     252     78      94      78      117))

; we define the Nqthm counterpart of log2.
(defn log2 (n log2)
  (if (lessp 1 n)
      (log2 (quotient n 2) (add1 log2))
    log2))

; the clock.
(defn log2-t0 (n)
  (if (lessp 1 n)
      (splus 7 (log2-t0 (quotient n 2)))
    7))

(defn log2-t (n)
  (splus 5 (log2-t0 n)))

; an induction hint.
(defn log2-induct (s n log2)
  (if (lessp 1 n)
      (log2-induct (stepn s 7) (quotient n 2) (add1 log2))
    t))

; the preconditions on the initail state.
(defn log2-statep (s n)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (mc-pc s) (mc-mem s) 40)
       (mcode-addrp (mc-pc s) (mc-mem s) (log2-code))
       (ram-addrp (sub 32 8 (read-sp s)) (mc-mem s) 16)
       (equal n (iread-mem (add 32 (read-sp s) 4) (mc-mem s) 4))
       (numberp n)))

; an intermediate state.
(defn log2-s0p (s n log2)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (sub 32 24 (mc-pc s)) (mc-mem s) 40)
       (mcode-addrp (sub 32 24 (mc-pc s)) (mc-mem s) (log2-code))
       (ram-addrp (sub 32 4 (read-an 32 6 s)) (mc-mem s) 16)
       (equal n (iread-dn 32 0 s))
       (equal log2 (iread-dn 32 1 s))
       (int-rangep (plus log2 n) 32)
       (numberp log2)
       (numberp n)))

; from the initial state to s0:  s --> s0.
(prove-lemma log2-s-s0 ()
     (implies (log2-statep s n)
              (log2-s0p (stepn s 5) n 0)))

(prove-lemma log2-s-s0-else (rewrite)
     (implies (log2-statep s n)
              (and (equal (linked-rts-addr (stepn s 5)) (rts-addr s))
                   (equal (linked-a6 (stepn s 5)) (read-an 32 6 s))
                   (equal (read-rn 32 14 (mc-rfile (stepn s 5)))
                          (sub 32 4 (read-sp s)))
                   (equal (rn-saved (stepn s 5)) (read-dn 32 2 s)))))

(prove-lemma log2-s-s0-rfile (rewrite)
     (implies (and (log2-statep s n)
                   (d3-7a2-5p rn))
              (equal (read-rn oplen rn (mc-rfile (stepn s 5)))
                     (read-rn oplen rn (mc-rfile s)))))

(prove-lemma log2-s-s0-mem (rewrite)
     (implies (and (log2-statep s n)
                   (disjoint x k (sub 32 8 (read-sp s)) 16))
              (equal (read-mem x (mc-mem (stepn s 5)) k)
                     (read-mem x (mc-mem s) k))))

; s0 --> exit.
; base case: s0 --> exit.
(prove-lemma log2-s0-sn-base (rewrite)
     (implies (and (log2-s0p s n log2)
                   (not (lessp 1 n)))
              (and (equal (mc-status (stepn s 7)) 'running)
                   (equal (mc-pc (stepn s 7)) (linked-rts-addr s))
                   (equal (iread-dn 32 0 (stepn s 7)) log2)
                   (equal (read-rn 32 14 (mc-rfile (stepn s 7)))
                          (linked-a6 s))
                   (equal (read-rn 32 15 (mc-rfile (stepn s 7)))
                          (add 32 (read-an 32 6 s) 8)))))

(prove-lemma log2-s0-sn-base-rfile (rewrite)
     (implies (and (log2-s0p s n log2)
                   (not (lessp 1 n))
                   (d2-7a2-5p rn)
		   (leq oplen 32))
              (equal (read-rn oplen rn (mc-rfile (stepn s 7)))
		     (if (d3-7a2-5p rn)
			 (read-rn oplen rn (mc-rfile s))
		       (head (rn-saved s) oplen)))))

(prove-lemma log2-s0s-n-base-mem (rewrite)
     (implies (and (log2-s0p s n log2)
                   (not (lessp 1 n)))
              (equal (read-mem x (mc-mem (stepn s 7)) k)
                     (read-mem x (mc-mem s) k))))

; induction case: s0 --> s0.
(prove-lemma log2-rangep-la (rewrite)
     (implies (and (int-rangep (plus m n) 32)
                   (lessp 1 n))
              (int-rangep (add1 (plus m (quotient n 2))) 32))
     ((enable int-rangep)))

(prove-lemma log2-s0-s0 (rewrite)
     (implies (and (log2-s0p s n log2)
                   (lessp 1 n))
              (and (log2-s0p (stepn s 7) (quotient n 2) (add1 log2))
                   (equal (read-rn oplen 14 (mc-rfile (stepn s 7)))
                          (read-rn oplen 14 (mc-rfile s)))
                   (equal (linked-a6 (stepn s 7)) (linked-a6 s))
                   (equal (linked-rts-addr (stepn s 7))
                          (linked-rts-addr s))
		   (equal (read-mem x (mc-mem (stepn s 7)) k)
			  (read-mem x (mc-mem s) k))
                   (equal (rn-saved (stepn s 7)) (rn-saved s))))
     ((enable iquotient iplus)))

(prove-lemma log2-s0-s0-rfile (rewrite)
     (implies (and (log2-s0p s n log2)
                   (lessp 1 n)
                   (d3-7a2-5p rn))
              (equal (read-rn oplen rn (mc-rfile (stepn s 7)))
                     (read-rn oplen rn (mc-rfile s)))))

; put together.
(prove-lemma log2-s0-sn (rewrite)
     (implies (log2-s0p s n log2)
              (and (equal (mc-status (stepn s (log2-t0 n))) 'running)
                   (equal (mc-pc (stepn s (log2-t0 n))) (linked-rts-addr s))
                   (equal (iread-dn 32 0 (stepn s (log2-t0 n)))
                          (log2 n log2))
                   (equal (read-rn 32 14 (mc-rfile (stepn s (log2-t0 n))))
                          (linked-a6 s))
                   (equal (read-rn 32 15 (mc-rfile (stepn s (log2-t0 n))))
                          (add 32 (read-an 32 6 s) 8))
		   (equal (read-mem x (mc-mem (stepn s (log2-t0 n))) k)
			  (read-mem x (mc-mem s) k))))
     ((induct (log2-induct s n log2))
      (disable log2-s0p)))

(prove-lemma log2-s0-sn-rfile (rewrite)
     (implies (and (log2-s0p s n log2)
                   (d2-7a2-5p rn)
		   (leq oplen 32))
              (equal (read-rn oplen rn (mc-rfile (stepn s (log2-t0 n))))
		     (if (d3-7a2-5p rn)
			 (read-rn oplen rn (mc-rfile s))
		       (head (rn-saved s) oplen))))
     ((induct (log2-induct s n log2))
      (disable log2-s0p)))

; correctness.
(prove-lemma log2-correct (rewrite)
     (implies (log2-statep s n)
	      (and (equal (mc-status (stepn s (log2-t n))) 'running)
		   (equal (mc-pc (stepn s (log2-t n))) (rts-addr s))
		   (equal (iread-dn 32 0 (stepn s (log2-t n)))
			  (log2 n 0))
		   (equal (read-an 32 6 (stepn s (log2-t n)))
			  (read-an 32 6 s))
		   (equal (read-an 32 7 (stepn s (log2-t n)))
			  (add 32 (read-an 32 7 s) 4))))
     ((use (log2-s-s0))
      (disable log2-statep log2-s0p linked-rts-addr linked-a6 iread-dn)))

(prove-lemma log2-rfile (rewrite)
     (implies (and (log2-statep s n)
		   (d2-7a2-5p rn)
		   (leq oplen 32))
	      (equal (read-rn oplen rn (mc-rfile (stepn s (log2-t n))))
		     (read-rn oplen rn (mc-rfile s))))
     ((use (log2-s-s0))
      (disable log2-statep log2-s0p)))

(prove-lemma log2-mem (rewrite)
     (implies (and (log2-statep s n)
		   (disjoint x k (sub 32 8 (read-sp s)) 16))
	      (equal (read-mem x (mc-mem (stepn s (log2-t n))) k)
		     (read-mem x (mc-mem s) k)))
     ((use (log2-s-s0))
      (disable log2-statep log2-s0p)))

; the correctness of the Nqthm function log2.
(prove-lemma log2-log (rewrite)
     (implies (numberp i)
	      (equal (log2 n i) (plus i (log 2 n)))))

; 2^log2(n) <= n.
(prove-lemma log2-thm1 (rewrite)
     (implies (lessp 1 n)
	      (not (lessp n (exp 2 (log2 n 0))))))

; n < 2^(log2(n)+1).
(prove-lemma log2-thm2 (rewrite)
     (lessp n (exp 2 (add1 (log2 n 0)))))
