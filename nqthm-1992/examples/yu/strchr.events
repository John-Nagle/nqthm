#|

 Copyright (C) 1994 by Yuan Yu.  All Rights Reserved.

 This script is hereby placed in the public domain, and therefore unlimited
 editing and redistribution is permitted.

 NO WARRANTY

 Yuan Yu PROVIDES ABSOLUTELY NO WARRANTY.  THE EVENT SCRIPT IS PROVIDED "AS IS"
 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT
 LIMITED TO, ANY IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
 SCRIPT IS WITH YOU.  SHOULD THE SCRIPT PROVE DEFECTIVE, YOU ASSUME THE COST OF
 ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 IN NO EVENT WILL Yuan Yu BE LIABLE TO YOU FOR ANY DAMAGES, ANY LOST PROFITS,
 LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT
 OF THE USE OR INABILITY TO USE THIS SCRIPT (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THIRD
 PARTIES), EVEN IF YOU HAVE ADVISED US OF THE POSSIBILITY OF SUCH DAMAGES, OR
 FOR ANY CLAIM BY ANY OTHER PARTY.

|#

(note-lib "mc20-2" t)
;          Proof of the Correctness of the STRCHR Function
#|
This is part of our effort to verify the Berkeley string library.  The 
Berkeley string library is widely used as part of the Berkeley Unix OS.

This is the source code of strchr function in the Berkeley string library.

char *
strchr(p, ch)
        register char *p, ch;
{
        for (;; ++p) {
                if (*p == ch)
                        return(p);
                if (!*p)
                        return((char *)NULL);
        }
        /* NOTREACHED */
}

The MC68020 assembly code of the C function strchr on SUN-3 is given as 
follows.  This binary is generated by "gcc -O".

0x2500 <strchr>:        linkw fp,#0
0x2504 <strchr+4>:      moveal fp@(8),a0
0x2508 <strchr+8>:      moveb fp@(15),d0
0x250c <strchr+12>:     cmpb a0@,d0
0x250e <strchr+14>:     bne 0x2514 <strchr+20>
0x2510 <strchr+16>:     movel a0,d0
0x2512 <strchr+18>:     bra 0x2520 <strchr+32>
0x2514 <strchr+20>:     tstb a0@
0x2516 <strchr+22>:     bne 0x251c <strchr+28>
0x2518 <strchr+24>:     clrl d0
0x251a <strchr+26>:     bra 0x2520 <strchr+32>
0x251c <strchr+28>:     addqw #1,a0
0x251e <strchr+30>:     bra 0x250c <strchr+12>
0x2520 <strchr+32>:     unlk fp
0x2522 <strchr+34>:     rts

The machine code of the above program is:

<strchr>:      0x4e56  0x0000  0x206e  0x0008  0x102e  0x000f  0xb010  0x6604
<strchr+16>:   0x2008  0x600c  0x4a10  0x6604  0x4280  0x6004  0x5248  0x60ec
<strchr+32>:   0x4e5e  0x4e75

'(78      86      0       0       32      110     0       8
  16      46      0       15      176     16      102     4
  32      8       96      12      74      16      102     4
  66      128     96      4       82      72      96      236
  78      94      78      117)
|#

; in the logic, the above program is defined by (strchr-code).
(defn strchr-code ()
  '(78      86      0       0       32      110     0       8
    16      46      0       15      176     16      102     4
    32      8       96      12      74      16      102     4
    66      128     96      4       82      72      96      236
    78      94      78      117))

; the computation time of the program.
(defn strchr1-t (i n lst ch)
  (if (lessp i n)
      (if (equal (get-nth i lst) ch)
	  6
	(if (equal (get-nth i lst) 0)
	    8
	  (splus 6 (strchr1-t (add1 i) n lst ch))))
    0)
  ((lessp (difference n i))))

(defn strchr-t (n lst ch)
  (splus 3 (strchr1-t 0 n lst ch)))

; an induction hint.
(defn strchr-induct (s i* i n lst ch)
  (if (lessp i n)
      (if (equal (get-nth i lst) ch)
	  t
	(if (equal (get-nth i lst) 0)
	    8
	  (strchr-induct (stepn s 6) (add 32 i* 1) (add1 i) n lst ch)))
    t)
  ((lessp (difference n i))))

; the preconditions of the initial state.
(defn strchr-statep (s str n lst ch)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (mc-pc s) (mc-mem s) 38)
       (mcode-addrp (mc-pc s) (mc-mem s) (strchr-code))
       (ram-addrp (sub 32 4 (read-sp s)) (mc-mem s) 16)
       (ram-addrp str (mc-mem s) n)
       (mem-lst 1 str (mc-mem s) n lst)
       (disjoint (sub 32 4 (read-sp s)) 16 str n)
       (equal str (read-mem (add 32 (read-sp s) 4) (mc-mem s) 4))
       (equal ch (uread-mem (add 32 (read-sp s) 11) (mc-mem s) 1))
       (lessp (slen 0 n lst) n)
       (numberp n)
       (not (equal (nat-to-uint str) 0))
       (uint-rangep (plus (nat-to-uint str) n) 32)))
       
; an intermediate state.
(defn strchr-s0p (s i* i str n lst ch)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (sub 32 12 (mc-pc s)) (mc-mem s) 38)
       (mcode-addrp (sub 32 12 (mc-pc s)) (mc-mem s) (strchr-code))
       (ram-addrp (read-an 32 6 s) (mc-mem s) 16)
       (ram-addrp str (mc-mem s) n)
       (mem-lst 1 str (mc-mem s) n lst)
       (disjoint (read-an 32 6 s) 16 str n)
       (equal* (read-an 32 0 s) (add 32 str i*))
       (equal ch (nat-to-uint (read-dn 8 0 s)))
       (lessp (slen i n lst) n)
       (lessp i n)
       (numberp i*)
       (nat-rangep i* 32)
       (equal i (nat-to-uint i*))
       (numberp n)
       (uint-rangep n 32)))

; from the initial state s to s0: s --> s0;
(prove-lemma strchr-s-s0 ()
     (implies (strchr-statep s str n lst ch)
              (strchr-s0p (stepn s 3) 0 0 str n lst ch)))

(prove-lemma strchr-s-s0-else (rewrite)
     (implies (strchr-statep s str n lst ch)
	      (and (equal (linked-rts-addr (stepn s 3)) (rts-addr s))
                   (equal (linked-a6 (stepn s 3)) (read-an 32 6 s))
                   (equal (read-rn 32 14 (mc-rfile (stepn s 3)))
                          (sub 32 4 (read-sp s))))))

(prove-lemma strchr-s-s0-rfile (rewrite)
     (implies (and (strchr-statep s str n lst ch)
		   (d2-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 3)))
		     (read-rn oplen rn (mc-rfile s)))))

(prove-lemma strchr-s-s0-mem (rewrite)
     (implies (and (strchr-statep s str n lst ch)
		   (disjoint x k (sub 32 4 (read-sp s)) 16))
	      (equal (read-mem x (mc-mem (stepn s 3)) k)
		     (read-mem x (mc-mem s) k))))

; from s0 to exit: s0 --> sn.
; base case 1. s0 --> sn, when lst[i] = ch.
(prove-lemma strchr-s0-sn-base1 (rewrite)
     (implies (and (strchr-s0p s i* i str n lst ch)
		   (equal (get-nth i lst) ch))
	      (and (equal (mc-status (stepn s 6)) 'running)
		   (equal (mc-pc (stepn s 6)) (linked-rts-addr s))
		   (equal (read-dn 32 0 (stepn s 6)) (add 32 str i*))
		   (equal (read-rn 32 14 (mc-rfile (stepn s 6)))
			  (linked-a6 s))
		   (equal (read-rn 32 15 (mc-rfile (stepn s 6)))
			  (add 32 (read-an 32 6 s) 8))
		   (equal (read-mem x (mc-mem (stepn s 6)) k)
			  (read-mem x (mc-mem s) k)))))
		   
(prove-lemma strchr-s0-sn-rfile-base1 (rewrite)
     (implies (and (strchr-s0p s i* i str n lst ch)
		   (equal (get-nth i lst) ch)
		   (d2-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 6)))
		     (read-rn oplen rn (mc-rfile s)))))

; base case 2: s0 --> sn, when lst[i] =\= ch and lst[i] = 0.
(prove-lemma strchr-s0-sn-base2 (rewrite)
     (implies (and (strchr-s0p s i* i str n lst ch)
		   (not (equal (get-nth i lst) ch))
		   (equal (get-nth i lst) 0))
	      (and (equal (mc-status (stepn s 8)) 'running)
		   (equal (mc-pc (stepn s 8)) (linked-rts-addr s))
		   (equal (read-dn 32 0 (stepn s 8)) 0)
		   (equal (read-rn 32 14 (mc-rfile (stepn s 8)))
			  (linked-a6 s))
		   (equal (read-rn 32 15 (mc-rfile (stepn s 8)))
			  (add 32 (read-an 32 6 s) 8))
		   (equal (read-mem x (mc-mem (stepn s 8)) k)
			  (read-mem x (mc-mem s) k)))))			  

(prove-lemma strchr-s0-sn-rfile-base2 (rewrite)
     (implies (and (strchr-s0p s i* i str n lst ch)
		   (not (equal (get-nth i lst) ch))
		   (equal (get-nth i lst) 0)
		   (d2-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 8)))
		     (read-rn oplen rn (mc-rfile s)))))

; induction case: s0 --> s0, when lst[i] =\= ch and lst[i] =\= 0.
(prove-lemma strchr-s0-s0 (rewrite)
     (implies (and (strchr-s0p s i* i str n lst ch)
		   (not (equal (get-nth i lst) ch))
		   (not (equal (get-nth i lst) 0)))
	      (and (strchr-s0p (stepn s 6) (add 32 i* 1) (add1 i)
				str n lst ch)
		   (equal (read-rn 32 14 (mc-rfile (stepn s 6)))
			  (read-rn 32 14 (mc-rfile s)))
		   (equal (linked-a6 (stepn s 6)) (linked-a6 s))
		   (equal (linked-rts-addr (stepn s 6)) (linked-rts-addr s))
		   (equal (read-mem x (mc-mem (stepn s 6)) k)
			  (read-mem x (mc-mem s) k)))))			  

(prove-lemma strchr-s0-s0-rfile (rewrite)
     (implies (and (strchr-s0p s i* i str n lst ch)
		   (not (equal (get-nth i lst) ch))
		   (not (equal (get-nth i lst) 0))
		   (d2-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 6)))
		     (read-rn oplen rn (mc-rfile s)))))

; put together. s0 --> exit.
(prove-lemma strchr-s0p-info (rewrite)
     (implies (strchr-s0p s i* i str n lst ch)
	      (equal (lessp i n) t)))

(prove-lemma strchr-s0-sn (rewrite)
     (let ((sn (stepn s (strchr1-t i n lst ch))))
       (implies (strchr-s0p s i* i str n lst ch)
		(and (equal (mc-status sn) 'running)
		     (equal (mc-pc sn) (linked-rts-addr s))
		     (equal (read-dn 32 0 sn)
			    (if (strchr i n lst ch) 
				(add 32 str (strchr* i* i n lst ch))
			      0))
		     (equal (read-rn 32 14 (mc-rfile sn)) (linked-a6 s))
		     (equal (read-rn 32 15 (mc-rfile sn))
			    (add 32 (read-an 32 6 s) 8))
		     (equal (read-mem x (mc-mem sn) k)
			    (read-mem x (mc-mem s) k)))))
     ((induct (strchr-induct s i* i n lst ch))
      (disable strchr-s0p read-dn)))

(prove-lemma strchr-s0-sn-rfile (rewrite)
     (let ((sn (stepn s (strchr1-t i n lst ch))))	     
       (implies (and (strchr-s0p s i* i str n lst ch)
		     (d2-7a2-5p rn))
		(equal (read-rn oplen rn (mc-rfile sn))
		       (read-rn oplen rn (mc-rfile s)))))
     ((induct (strchr-induct s i* i n lst ch))
      (disable strchr-s0p)))

(disable strchr-s0p-info)

; the correctness of strchr.
(prove-lemma strchr-correctness (rewrite)
     (let ((sn (stepn s (strchr-t n lst ch))))
       (implies (strchr-statep s str n lst ch)
		(and (equal (mc-status sn) 'running)
		     (equal (mc-pc sn) (rts-addr s))
		     (equal (read-rn 32 14 (mc-rfile sn))
			    (read-rn 32 14 (mc-rfile s)))
		     (equal (read-rn 32 15 (mc-rfile sn))
			    (add 32 (read-sp s) 4))
		     (implies (d2-7a2-5p rn)
			      (equal (read-rn oplen rn (mc-rfile sn))
				     (read-rn oplen rn (mc-rfile s))))
		     (implies (disjoint x k (sub 32 4 (read-sp s)) 16)
			      (equal (read-mem x (mc-mem sn) k)
				     (read-mem x (mc-mem s) k)))
		     (equal (read-dn 32 0 sn)
			    (if (strchr 0 n lst ch)
				(add 32 str (strchr* 0 0 n lst ch))
			      0)))))		     
     ((use (strchr-s-s0))
      (disable strchr-statep strchr-s0p read-dn linked-rts-addr linked-a6)))

(disable strchr-t)

; strchr* --> strchr.
(prove-lemma strchr*-strchr (rewrite)
     (implies (and (strchr i n lst ch)
		   (equal i (nat-to-uint i*))
		   (nat-rangep i* 32)
		   (uint-rangep n 32))
	      (equal (nat-to-uint (strchr* i* i n lst ch))
		     (strchr i n lst ch)))
     ((induct (strchr* i* i n lst ch))))

(prove-lemma strchr-non-zerop-la ()
     (let ((sn (stepn s (strchr-t n lst ch))))
       (implies (and (strchr-statep s str n lst ch)
		     (nat-rangep str 32)
		     (not (equal (nat-to-uint str) 0))
		     (uint-rangep (plus (nat-to-uint str) n) 32)
		     (strchr 0 n lst ch))
	      (not (equal (nat-to-uint (read-dn 32 0 sn)) 0))))
     ((enable nat-rangep-la)
      (disable strchr-statep read-dn)))

(prove-lemma strchr-non-zerop (rewrite)
     (let ((sn (stepn s (strchr-t n lst ch))))
       (implies (and (strchr-statep s str n lst ch)
		     (strchr 0 n lst ch))
	      (not (equal (nat-to-uint (read-dn 32 0 sn)) 0))))
     ((use (strchr-non-zerop-la))))

(disable strchr*)

; some properties of strchr.
; see file cstring.events.


