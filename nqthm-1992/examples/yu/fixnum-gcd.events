#|

 Copyright (C) 1994 by Yuan Yu.  All Rights Reserved.

 This script is hereby placed in the public domain, and therefore unlimited
 editing and redistribution is permitted.

 NO WARRANTY

 Yuan Yu PROVIDES ABSOLUTELY NO WARRANTY.  THE EVENT SCRIPT IS PROVIDED "AS IS"
 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT
 LIMITED TO, ANY IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
 SCRIPT IS WITH YOU.  SHOULD THE SCRIPT PROVE DEFECTIVE, YOU ASSUME THE COST OF
 ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 IN NO EVENT WILL Yuan Yu BE LIABLE TO YOU FOR ANY DAMAGES, ANY LOST PROFITS,
 LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT
 OF THE USE OR INABILITY TO USE THIS SCRIPT (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THIRD
 PARTIES), EVEN IF YOU HAVE ADVISED US OF THE POSSIBILITY OF SUCH DAMAGES, OR
 FOR ANY CLAIM BY ANY OTHER PARTY.

|#

;            Proof of the Correctness of a GCD Program
(note-lib "mc20-2" t)
#|

The following LISP program computes the greatest common divisor of two
integers a and b. We, here, investigate the machine code of this
program generated by a widely used C compiler, and verify the
correctness of the code.

; computes the greatest common divisor by Euclid's algorithm.
(proclaim '(function fixnum-gcd (fixnum fixnum) fixnum))

(defun fixnum-gcd (x y)
  (declare (fixnum x y))
  (if (not (= x 0))
      (if (= y 0)
	  (return-from fixnum-gcd x)
	(if (> x y)
	    (fixnum-gcd (the fixnum (rem x y)) y)
	  (fixnum-gcd x (the fixnum (rem y x)))))
    (return-from fixnum-gcd y)))
	  
Here is the MC68020 assembly code of the above GCD program.  The code is 
generated by AKCL.

0x14 <LI1>:	linkw fp,#0
0x18 <LI1+4>:	moveml d2-d3,sp@-
0x1c <LI1+8>:	movel fp@(8),d3
0x20 <LI1+12>:	movel fp@(12),d2
0x24 <LI1+16>:	tstl d3
0x26 <LI1+18>:	beq 0x44 <LI1+48>
0x28 <LI1+20>:	tstl d2
0x2a <LI1+22>:	bne 0x30 <LI1+28>
0x2c <LI1+24>:	movel d3,d0
0x2e <LI1+26>:	bra 0x46 <LI1+50>
0x30 <LI1+28>:	cmpl d3,d2
0x32 <LI1+30>:	bge 0x3c <LI1+40>
0x34 <LI1+32>:	divsll d2,d0,d3
0x38 <LI1+36>:	movel d0,d3
0x3a <LI1+38>:	bra 0x24 <LI1+16>
0x3c <LI1+40>:	divsll d3,d0,d2
0x40 <LI1+44>:	movel d0,d2
0x42 <LI1+46>:	bra 0x24 <LI1+16>
0x44 <LI1+48>:	movel d2,d0
0x46 <LI1+50>:	moveml fp@(-8),d2-d3
0x4c <LI1+56>:	unlk fp
0x4e <LI1+58>:	rts

The machine code of the above program is:

<LI1>:     0x4e56  0x0000  0x48e7  0x3000  0x262e  0x0008  0x242e  0x000c 
<LI1+16>:  0x4a83  0x671c  0x4a82  0x6604  0x2003  0x6016  0xb483  0x6c08 
<LI1+32>:  0x4c42  0x3800  0x2600  0x60e8  0x4c43  0x2800  0x2400  0x60e0 
<LI1+48>:  0x2002  0x4cee  0x000c  0xfff8  0x4e5e  0x4e75 

  '(78	86	0	0	72	231	48	0
    38	46	0	8	36	46	0	12
    74	131	103	28	74	130	102	4
    32	3	96	22	180	131	108	8
    76	66	56	0	38	0	96	232
    76	67	40	0	36	0	96	224
    32	2	76	238	0	12	255	248
    78	94	78	117)
|#

; now we start the correctness proof of this GCD program, defined by 
; (gcd-code).
(defn gcd-code ()
  '(78	86	0	0	72	231	48	0
    38	46	0	8	36	46	0	12
    74	131	103	28	74	130	102	4
    32	3	96	22	180	131	108	8
    76	66	56	0	38	0	96	232
    76	67	40	0	36	0	96	224
    32	2	76	238	0	12	255	248
    78	94	78	117))

; the functional description of the program (gcd-code). 
(defn gcd (a b)
  (if (zerop a)
      (fix b)
    (if (zerop b)
	a
      (if (lessp b a)
	  (gcd (remainder a b) b)
	(gcd a (remainder b a)))))
  ((lessp (plus a b))))

(defn gcd-t1 (a b)
  (if (zerop a) 
      6
      (if (zerop b)
	  9
	(if (lessp b a)
	    (splus 9 (gcd-t1 (remainder a b) b))
	  (splus 9 (gcd-t1 a (remainder b a))))))
  ((lessp (plus a b))))

(defn gcd-t (a b)
  (splus 4 (gcd-t1 a b)))

(defn gcd-induct (s a b)
  (if (or (zerop a) (zerop b))
      t
    (if (lessp b a)
	(gcd-induct (stepn s 9) (remainder a b) b)
      (gcd-induct (stepn s 9) a (remainder b a))))
  ((lessp (plus a b))))

(defn gcd-statep (s a b)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (mc-pc s) (mc-mem s) 60)
       (mcode-addrp (mc-pc s) (mc-mem s) (gcd-code))
       (ram-addrp (sub 32 12 (read-sp s)) (mc-mem s) 24)
       (equal a (iread-mem (add 32 (read-sp s) 4) (mc-mem s) 4))
       (equal b (iread-mem (add 32 (read-sp s) 8) (mc-mem s) 4))
       (numberp a)
       (numberp b)))

(defn gcd-s0p (s a b)
  (and (equal (mc-status s) 'running)
       (evenp (mc-pc s))
       (rom-addrp (sub 32 16 (mc-pc s)) (mc-mem s) 60)
       (mcode-addrp (sub 32 16 (mc-pc s)) (mc-mem s) (gcd-code))
       (ram-addrp (sub 32 8 (read-an 32 6 s)) (mc-mem s) 24)
       (equal a (iread-dn 32 3 s))
       (equal b (iread-dn 32 2 s))
       (numberp a)
       (numberp b)))

; s --> s0.
(prove-lemma gcd-s-s0 (rewrite)
     (implies (gcd-statep s a b)
	      (and (gcd-s0p (stepn s 4) a b)
		   (equal (linked-rts-addr (stepn s 4)) (rts-addr s))
		   (equal (linked-a6 (stepn s 4)) (read-an 32 6 s))
		   (equal (read-rn 32 14 (mc-rfile (stepn s 4)))
			  (sub 32 4 (read-sp s)))
		   (equal (movem-saved (stepn s 4) 4 8 2)
                          (readm-rn 32 '(2 3) (mc-rfile s))))))		   

(prove-lemma gcd-s-s0-rfile (rewrite)
     (implies (and (gcd-statep s a b)
		   (d4-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 4)))
		     (read-rn oplen rn (mc-rfile s)))))

(prove-lemma gcd-s-s0-mem (rewrite)
     (implies (and (gcd-statep s a b)
		   (disjoint x l (sub 32 12 (read-sp s)) 24))
	      (equal (read-mem x (mc-mem (stepn s 4)) l)
		     (read-mem x (mc-mem s) l))))

; s0 --> exit.
; base case: s0 --> exit.
(prove-lemma gcd-s0-sn-base-1 (rewrite)
     (implies (and (gcd-s0p s a b)
		   (zerop a))
	      (and (equal (mc-status (stepn s 6)) 'running)
		   (equal (mc-pc (stepn s 6)) (linked-rts-addr s))
		   (equal (iread-dn 32 0 (stepn s 6)) (fix b))
		   (equal (read-rn 32 14 (mc-rfile (stepn s 6))) (linked-a6 s))
		   (equal (read-rn 32 15 (mc-rfile (stepn s 6)))
			  (add 32 (read-an 32 6 s) 8))
		   (equal (read-mem x (mc-mem (stepn s 6)) l)
			  (read-mem x (mc-mem s) l)))))

(prove-lemma gcd-s0-sn-base-rfile-1 (rewrite)
     (implies (and (gcd-s0p s a b)
		   (zerop a)
		   (d2-7a2-5p rn)
		   (leq oplen 32))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 6)))
		     (if (d4-7a2-5p rn)
			 (read-rn oplen rn (mc-rfile s))
		       (get-vlst oplen 0 rn '(2 3) (movem-saved s 4 8 2))))))

(prove-lemma gcd-s0-sn-base-2 (rewrite)
     (implies (and (gcd-s0p s a b)
		   (not (zerop a))
		   (zerop b))
	      (and (equal (mc-status (stepn s 9)) 'running)
		   (equal (mc-pc (stepn s 9)) (linked-rts-addr s))
		   (equal (iread-dn 32 0 (stepn s 9)) (fix a))
		   (equal (read-rn 32 14 (mc-rfile (stepn s 9))) (linked-a6 s))
		   (equal (read-rn 32 15 (mc-rfile (stepn s 9)))
			  (add 32 (read-an 32 6 s) 8))
		   (equal (read-mem x (mc-mem (stepn s 9)) l)
			  (read-mem x (mc-mem s) l)))))

(prove-lemma gcd-s0-sn-base-rfile-2 (rewrite)
     (implies (and (gcd-s0p s a b)
		   (not (zerop a))
		   (zerop b)
		   (d2-7a2-5p rn)
		   (leq oplen 32))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 9)))
		     (if (d4-7a2-5p rn)
			 (read-rn oplen rn (mc-rfile s))
		       (get-vlst oplen 0 rn '(2 3) (movem-saved s 4 8 2))))))

; induction case:  s0 --> s0.
(enable integerp)
(enable iremainder)

(prove-lemma gcd-s0-s0-1 (rewrite)
     (implies (and (gcd-s0p s a b)
		   (not (zerop a))
		   (not (zerop b))
		   (lessp b a))
	      (and (gcd-s0p (stepn s 9) (remainder a b) b)
		   (equal (read-rn oplen 14 (mc-rfile (stepn s 9)))
			  (read-rn oplen 14 (mc-rfile s)))
		   (equal (linked-a6 (stepn s 9)) (linked-a6 s))
		   (equal (linked-rts-addr (stepn s 9))
			  (linked-rts-addr s))
		   (equal (movem-saved (stepn s 9) 4 8 2)
			  (movem-saved s 4 8 2))
		   (equal (read-mem x (mc-mem (stepn s 9)) l)
			  (read-mem x (mc-mem s) l)))))

(prove-lemma gcd-s0-s0-2 (rewrite)
     (implies (and (gcd-s0p s a b)
		   (not (zerop a))
		   (not (zerop b))
		   (not (lessp b a)))
	      (and (gcd-s0p (stepn s 9) a (remainder b a))
		   (equal (read-rn oplen 14 (mc-rfile (stepn s 9)))
			  (read-rn oplen 14 (mc-rfile s)))
		   (equal (linked-a6 (stepn s 9)) (linked-a6 s))
		   (equal (linked-rts-addr (stepn s 9))
			  (linked-rts-addr s))
		   (equal (movem-saved (stepn s 9) 4 8 2)
			  (movem-saved s 4 8 2))
		   (equal (read-mem x (mc-mem (stepn s 9)) l)
			  (read-mem x (mc-mem s) l)))))

(prove-lemma gcd-s0-s0-rfile-1 (rewrite)
     (implies (and (gcd-s0p s a b)
		   (not (zerop a))
		   (not (zerop b))
		   (lessp b a)
		   (d4-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 9)))
		     (read-rn oplen rn (mc-rfile s)))))

(prove-lemma gcd-s0-s0-rfile-2 (rewrite)
     (implies (and (gcd-s0p s a b)
		   (not (zerop a))
		   (not (zerop b))
		   (not (lessp b a))
		   (d4-7a2-5p rn))
	      (equal (read-rn oplen rn (mc-rfile (stepn s 9)))
		     (read-rn oplen rn (mc-rfile s)))))

; put together.
(prove-lemma gcd-s0-sn (rewrite)
     (implies (gcd-s0p s a b)
	      (and (equal (mc-status (stepn s (gcd-t1 a b)))
			  'running)
		   (equal (mc-pc (stepn s (gcd-t1 a b)))
			  (linked-rts-addr s))
		   (equal (iread-dn 32 0 (stepn s (gcd-t1 a b)))
			  (gcd a b))
		   (equal (read-rn 32 14 (mc-rfile (stepn s (gcd-t1 a b))))
			  (linked-a6 s))
		   (equal (read-rn 32 15 (mc-rfile (stepn s (gcd-t1 a b))))
			  (add 32 (read-an 32 6 s) 8))
		   (equal (read-mem x (mc-mem (stepn s (gcd-t1 a b))) k)
			  (read-mem x (mc-mem s) k))))
     ((induct (gcd-induct s a b))
      (disable gcd-s0p iread-dn linked-rts-addr linked-a6)))

(prove-lemma gcd-s0-sn-rfile (rewrite)
     (implies (and (gcd-s0p s a b)
		   (d2-7a2-5p rn)
		   (leq oplen 32))
	      (equal (read-rn oplen rn (mc-rfile (stepn s (gcd-t1 a b))))
		     (if (d4-7a2-5p rn)
			 (read-rn oplen rn (mc-rfile s))
		       (get-vlst oplen 0 rn '(2 3) (movem-saved s 4 8 2)))))
     ((induct (gcd-induct s a b))
      (disable gcd-s0p)))

; the correctness of gcd.
(prove-lemma gcd-correctness (rewrite)
     (implies (gcd-statep s a b)
	      (and (equal (mc-status (stepn s (gcd-t a b))) 'running)
		   (equal (mc-pc (stepn s (gcd-t a b))) (rts-addr s))
		   (equal (iread-dn 32 0 (stepn s (gcd-t a b)))
			  (gcd a b))
		   (equal (read-rn 32 14 (mc-rfile (stepn s (gcd-t a b))))
			  (read-rn 32 14 (mc-rfile s)))
		   (equal (read-rn 32 15 (mc-rfile (stepn s (gcd-t a b))))
			  (add 32 (read-an 32 7 s) 4))))
     ((disable gcd-statep gcd-s0p linked-rts-addr linked-a6)))

(prove-lemma gcd-rfile (rewrite)
     (implies (and (gcd-statep s a b)
		   (d2-7a2-5p rn)
		   (leq oplen 32))
	      (equal (read-rn oplen rn (mc-rfile (stepn s (gcd-t a b))))
		     (read-rn oplen rn (mc-rfile s))))
     ((disable gcd-statep gcd-s0p)))

(prove-lemma gcd-mem (rewrite)
     (implies (and (gcd-statep s a b)
		   (disjoint x k (sub 32 12 (read-sp s)) 24))
	      (equal (read-mem x (mc-mem (stepn s (gcd-t a b))) k)
		     (read-mem x (mc-mem s) k)))
     ((disable gcd-statep gcd-s0p)))

(disable gcd-t)

; tp prove that (gcd a b) does compute the greatest common divisor, we need 
; to prove the following two theorems:
;     1. (gcd a b) divides a and (gcd a b) divides b. 
;        i.e. (gcd a b) is a common divisor of a and b.
;     2. any divisor of a and b is no greater than (gcd a b).
(prove-lemma remainder-remainder (rewrite)
     (implies (equal (remainder b c) 0) 
	      (equal (remainder (remainder a b) c) 
		     (remainder a c))))

(prove-lemma gcd-is-cd (rewrite)
     (and (equal (remainder a (gcd a b)) 0)
	  (equal (remainder b (gcd a b)) 0)))

(prove-lemma gcd-the-greatest (rewrite)
     (implies (and (not (zerop a))
		   (not (zerop b))
		   (equal (remainder a x) 0)
		   (equal (remainder b x) 0))
	      (not (lessp (gcd a b) x)))
     ((induct (gcd a b))))

; a simple timing analysis.
(prove-lemma lessp-times-lessp (rewrite)
     (implies (and (lessp a b)
		   (not (zerop c)))
	      (lessp a (times b c))))

(prove-lemma remainder-shrink-half (rewrite)
     (implies (and (leq b a)
		   (not (zerop b)))
	      (not (lessp (quotient a 2) (remainder a b))))
     ((expand (times 2 x))
      (enable quotient-generalize)))

(prove-lemma gcd-t-shrink-1 (rewrite)
     (implies (and (leq b a)
		   (not (zerop b)))
	     (not (lessp (sub1 (log 2 a)) (log 2 (remainder a b)))))
     ((use (log-leq (b 2) (x (remainder a b)) (y (quotient a 2))))
      (disable quotient-times-lessp)))

(prove-lemma gcd-t-shrink-2 (rewrite)
     (implies (and (leq b a)
		   (not (zerop b))
		   (not (equal a 1)))
	      (not (lessp (times 9 (plus x (log 2 a)))
			  (plus 9 (times 9 (plus x (log 2 (remainder a b))))))))
     ((use (log-leq (b 2) (x (remainder a b)) (y (quotient a 2))))
      (disable quotient-times-lessp)))

(defn gcd-t2 (a b)
  (if (zerop a) 
      6
    (if (zerop b)
	9
      (if (lessp b a)
	  (plus 9 (gcd-t2 (remainder a b) b))
	(if (lessp a b)
	    (plus 9 (gcd-t2 a (remainder b a)))
	  18))))
  ((lessp (plus a b))))

(prove-lemma gcd-t2-ub ()
     (leq (gcd-t2 a b) (plus 18 (times 9 (plus (log 2 a) (log 2 b))))))

(prove-lemma gcd-t1-t2 (rewrite)
     (equal (gcd-t1 a b) (gcd-t2 a b))
     ((enable splus)))

(prove-lemma gcd-t-ub ()
     (leq (gcd-t a b) 
	  (plus 22 (times 9 (plus (log 2 a) (log 2 b)))))
     ((use (gcd-t2-ub))
      (enable gcd-t splus)))

(prove-lemma gcd-t-ubound-la ()
     (implies (and (leq a a1)
		   (leq b b1))
	      (leq (plus 22 (times 9 (plus (log 2 a) (log 2 b))))
		   (plus 22 (times 9 (plus (log 2 a1) (log 2 b1)))))))

(prove-lemma gcd-t-ubound ()
     (implies (and (lessp a (exp 2 32))
		   (lessp b (exp 2 32)))
	      (leq (gcd-t a b) 598))
     ((use (gcd-t-ubound-la (a1 (exp 2 32)) (b1 (exp 2 32)))
	   (gcd-t-ub))))
